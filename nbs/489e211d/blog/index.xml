<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>noklam.github.io</title>
<link>https://noklam.github.io/blog/index.html</link>
<atom:link href="https://noklam.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Quarto Blog</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Wed, 05 Apr 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>What is a Jupyter Kernel? By ChatGPT</title>
  <link>https://noklam.github.io/blog/posts/2023-04-12-Jupyter-Kernel/upyter-kernel-explained-chatgpt.html</link>
  <description><![CDATA[ 



<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">{<span class="op" style="color: #5E5E5E;">%</span> twitter https:<span class="op" style="color: #5E5E5E;">//</span>twitter.com<span class="op" style="color: #5E5E5E;">/</span>edublancas<span class="op" style="color: #5E5E5E;">/</span>status<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1643259630942838785</span> <span class="op" style="color: #5E5E5E;">%</span>}</span></code></pre></div>
</div>
<p>I read this on Twitter and it gets me thinking, do I really understand what is a “Kernel”? Software Engineering jargon can be confusing, particularly when they are overloaded. So I have a little chat with my best friend - ChatGPT.</p>
<p>Here is the conversation (I edited it a bit to reduce noise)</p>
<section id="what-is-a-kernel-for-computer" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-kernel-for-computer">What is a Kernel for computer?</h2>
<blockquote class="blockquote">
<p>In computer science, a kernel is a fundamental part of an operating system that acts as a bridge between software and hardware. It is a low-level program that controls and manages the resources of a computer, including memory, input/output operations, and system calls.</p>
</blockquote>
<blockquote class="blockquote">
<p>The kernel is responsible for handling all requests from applications or other software programs to access the computer’s hardware resources, and it provides a layer of abstraction that shields the higher-level software from the complexities of the underlying hardware. In essence, the kernel is the core of the operating system, and it is responsible for managing all of the system’s resources and providing a stable and secure platform for running software applications.</p>
</blockquote>
<blockquote class="blockquote">
<p>There are different types of kernels, including monolithic kernels, microkernels, hybrid kernels, and exokernels. Each type has its own advantages and disadvantages, depending on the specific requirements of the operating system and the hardware it runs on.</p>
</blockquote>
</section>
<section id="what-does-kernel-means-in-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="what-does-kernel-means-in-jupyter">What does kernel means in Jupyter</h2>
<blockquote class="blockquote">
<p>In the context of Jupyter, a kernel refers to a computational engine that executes the code in a notebook. Each notebook is associated with a kernel that runs the code in the notebook cells and communicates the results back to the notebook interface.</p>
</blockquote>
<blockquote class="blockquote">
<p>The kernel in Jupyter is responsible for executing the code in the notebook cells, managing the state of the kernel session, and communicating with the notebook interface. The kernel provides the computing power for the notebook and enables the user to interact with the notebook in real-time.</p>
</blockquote>
<blockquote class="blockquote">
<p>There are many different kernels available for use with Jupyter, including kernels for Python, R, Julia, and many other programming languages. Each kernel is specific to the language it supports and provides the necessary tools and libraries to execute code in that language.</p>
</blockquote>
</section>
<section id="whats-the-difference" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference">What’s the difference?</h2>
<blockquote class="blockquote">
<p>The main difference between the kernel in Jupyter and the kernel in an operating system is that the Jupyter kernel is a software component that runs within the Jupyter environment, whereas the operating system kernel is a low-level program that manages the computer’s resources. While both kernels have different functions and operate at different levels of the computing stack, they are both critical components of their respective systems.</p>
</blockquote>
</section>
<section id="hmm-okay-so-whats-does-a-kernel-includes---particular-the-python-kernel" class="level2">
<h2 class="anchored" data-anchor-id="hmm-okay-so-whats-does-a-kernel-includes---particular-the-python-kernel">Hmm… Okay, so what’s does a “Kernel” includes - particular the Python Kernel?</h2>
<blockquote class="blockquote">
<p>In the case of Python, the kernel provides a few key features that a standard Python interpreter does not. These include: Code execution within an isolated process: When a user runs code in a Jupyter notebook, the kernel executes that code within an isolated process, separate from the notebook interface. This allows the kernel to manage the state of the Python session independently of the notebook, providing greater stability and reliability. Input and output history: The Jupyter kernel maintains a history of inputs and outputs from previous notebook sessions, allowing users to recall and reuse previous code snippets and results.</p>
</blockquote>
<blockquote class="blockquote">
<p>Rich media display: The kernel provides support for displaying rich media content within the notebook, including images, videos, and interactive visualizations. This allows users to create more dynamic and interactive notebooks that incorporate multimedia elements. Support for multiple languages: The Jupyter kernel supports many different programming languages, allowing users to write and execute code in the language of their choice within the same notebook interface.</p>
</blockquote>
<blockquote class="blockquote">
<p>While it is possible to run a Python interpreter outside of Jupyter, using the Jupyter kernel provides many additional features and benefits that are not available in a standard Python interpreter. These features make Jupyter a powerful tool for data analysis, scientific computing, and interactive programming.</p>
</blockquote>
</section>
<section id="okay-so-what-happens-when-i-make-a-plot-in-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="okay-so-what-happens-when-i-make-a-plot-in-jupyter">Okay, so what happens when I make a plot in Jupyter?</h2>
<blockquote class="blockquote">
<p>When a user runs a cell in a Jupyter notebook that contains a call to one of these display functions, the kernel executes the Python code and generates the requested media object. The kernel then sends the media object to the notebook interface using the display protocol, which displays the object in the notebook. The communication between Jupyter and Python is supported by a messaging protocol called the “Jupyter protocol”. The Jupyter protocol is a messaging protocol that allows for bidirectional communication between the Jupyter notebook interface and the kernel that is running the Python process. When a user interacts with a Jupyter notebook, the notebook interface sends messages to the kernel, requesting that code be executed and displaying the results of that code. The kernel receives these messages, executes the requested code, and sends the results back to the notebook interface. The notebook interface then displays the results in the appropriate format, such as text output, plots, or interactive visualizations.</p>
</blockquote>
<blockquote class="blockquote">
<p>In the Jupyter ecosystem, ZeroMQ is used to establish a “wire protocol” between the notebook interface and the kernel. The wire protocol specifies the format of the messages that are sent between the notebook and the kernel, and how those messages are encoded and decoded.</p>
</blockquote>
<blockquote class="blockquote">
<p>The wire protocol is implemented using ZeroMQ sockets, which provide a reliable, low-latency communication channel between the notebook interface and the kernel. The sockets are used to send and receive messages in real-time, allowing the user to interact with the notebook interface and see the results of code execution immediately.</p>
</blockquote>


</section>

 ]]></description>
  <category>jupyter</category>
  <guid>https://noklam.github.io/blog/posts/2023-04-12-Jupyter-Kernel/upyter-kernel-explained-chatgpt.html</guid>
  <pubDate>Wed, 05 Apr 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Function overloading - singledispatch in Python with type hint</title>
  <link>https://noklam.github.io/blog/posts/2022-11-16-python_single_dispatch/python-dispatch-typehint.html</link>
  <description><![CDATA[ 



<p>With Python&gt;=3.7, the <code>@singledispatch</code> method can now understand the type hints. It behaves like function overloading but it’s more dynamic than the static langauge.</p>
<p>Here is a quick example to demonstrate it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> singledispatch</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;">@singledispatch</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">def</span> foo(x):</span>
<span id="cb1-5">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"foo"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="at" style="color: #657422;">@foo.register</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">def</span> _(x: <span class="bu" style="color: null;">float</span>):</span>
<span id="cb2-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"It's a float"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="at" style="color: #657422;">@foo.register</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;">def</span> _(x: <span class="bu" style="color: null;">str</span>):</span>
<span id="cb2-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"It's a string now!"</span>)</span></code></pre></div>
</div>
<p>Let’s see how it works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">foo(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>foo</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">foo(<span class="fl" style="color: #AD0000;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It's a float</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">foo(<span class="st" style="color: #20794D;">"1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It's a string now!</code></pre>
</div>
</div>
<p>The function <code>foo</code> now understand the type of the argument and dispatch the corresponding functions. This is nicer than a big chunk of <code>if/else</code> statement since it’s less couple. It’s also easy to extend this. Imagine the <code>foo</code> function is import from a package, it’s easy to extend it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Imagine `foo` was imported from a package</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;"># Now that you have a special type and you want to extend it from your own library, you don't need to touch the source code at all.</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># from bar import foo</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;">class</span> Nok:</span>
<span id="cb9-6">    ...</span>
<span id="cb9-7"></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="at" style="color: #657422;">@foo.register</span></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;">def</span> _(x: Nok):</span>
<span id="cb9-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Nok"</span>)</span>
<span id="cb9-12"></span>
<span id="cb9-13"></span>
<span id="cb9-14">nok <span class="op" style="color: #5E5E5E;">=</span> Nok()</span>
<span id="cb9-15">foo(nok)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Nok</code></pre>
</div>
</div>
<p>This is only possible because Python is a dynamic language. In contrast, to achieve the same functionalities with monkey patching, you would need to copy the source code of the function and extend the <code>if/else</code> block.</p>
<p>Let’s dive a bit deeper to the decorator.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;">print</span>([attr <span class="cf" style="color: #003B4F;">for</span> attr <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">dir</span>(foo) <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> attr.startswith(<span class="st" style="color: #20794D;">"_"</span>)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['dispatch', 'register', 'registry']</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">foo.dispatch</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;function functools.singledispatch.&lt;locals&gt;.dispatch(cls)&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">foo.register</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;function functools.singledispatch.&lt;locals&gt;.register(cls, func=None)&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">foo.registry</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>mappingproxy({object: &lt;function __main__.foo(x)&gt;,
              float: &lt;function __main__._(x: float)&gt;,
              str: &lt;function __main__._(x: str)&gt;,
              __main__.Nok: &lt;function __main__._(x: __main__.Nok)&gt;,
              __main__.Nok: &lt;function __main__._(x: __main__.Nok)&gt;})</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> abc</span>
<span id="cb19-2"><span class="bu" style="color: null;">isinstance</span>(foo.registry, abc.Mapping)</span></code></pre></div>
</div>
<p>The <code>foo.registry</code> is the most interesting part. Basically, it’s a dictionary-like object which store the types. It behaves like</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">type</span>(x) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"int"</span>:</span>
<span id="cb20-2">    do_something()</span>
<span id="cb20-3"><span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">type</span>(x) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"float"</span>:</span>
<span id="cb20-4">    do_somthing_else()</span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb20-6">    do_this_instead()</span></code></pre></div>



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2022-11-16-python_single_dispatch/python-dispatch-typehint.html</guid>
  <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Testing Kedro with DuckDB</title>
  <link>https://noklam.github.io/blog/posts/2022-11-15-kedro_duckdb/kedro-duckdb.html</link>
  <description><![CDATA[ 



<p>Exploring DuckDB and how can we use it with <code>kedro</code></p>
<section id="reference" class="level1">
<h1>Reference</h1>
<p>Extend the notebook from: https://colab.research.google.com/drive/1eg_TJpPQr2tyYKWjISJlX8IEAi8Qln3U?usp=sharing</p>
<section id="practical-sql-for-data-analysis" class="level2">
<h2 class="anchored" data-anchor-id="practical-sql-for-data-analysis"><strong>Practical SQL for Data Analysis</strong></h2>
<section id="what-you-can-do-together-with-pandas" class="level3">
<h3 class="anchored" data-anchor-id="what-you-can-do-together-with-pandas">What you can do <em>together with</em> Pandas</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">--</span>quiet duckdb</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> sqlite3</span>
<span id="cb2-5"><span class="im" style="color: #00769E;">import</span> duckdb</span>
<span id="cb2-6"><span class="im" style="color: #00769E;">import</span> time</span></code></pre></div>
</div>
<p><strong>Preparation</strong></p>
<p>Download the data and set up the Pandas data frames. We read the data into a Pandas DataFrame using DuckDB’s built-in Parquet reader.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>wget <span class="op" style="color: #5E5E5E;">-</span>q https:<span class="op" style="color: #5E5E5E;">//</span>github.com<span class="op" style="color: #5E5E5E;">/</span>cwida<span class="op" style="color: #5E5E5E;">/</span>duckdb<span class="op" style="color: #5E5E5E;">-</span>data<span class="op" style="color: #5E5E5E;">/</span>releases<span class="op" style="color: #5E5E5E;">/</span>download<span class="op" style="color: #5E5E5E;">/</span>v1<span class="fl" style="color: #AD0000;">.0</span><span class="op" style="color: #5E5E5E;">/</span>lineitemsf1.snappy.parquet</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  HTTP/1.1 301 Moved Permanently
  Server: GitHub.com
  Date: Tue, 15 Nov 2022 22:34:17 GMT
  Content-Type: text/html; charset=utf-8
  Vary: X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, Accept-Encoding, Accept, X-Requested-With
  Location: https://github.com/duckdb/duckdb-data/releases/download/v1.0/lineitemsf1.snappy.parquet
  Cache-Control: no-cache
  Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
  X-Frame-Options: deny
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 0
  Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
  Content-Security-Policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/; connect-src 'self' uploads.github.com objects-origin.githubusercontent.com www.githubstatus.com collector.github.com raw.githubusercontent.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events *.actions.githubusercontent.com wss://*.actions.githubusercontent.com online.visualstudio.com/api/v1/locations github-production-repository-image-32fea6.s3.amazonaws.com github-production-release-asset-2e65be.s3.amazonaws.com insights.github.com wss://alive.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com objects-origin.githubusercontent.com; frame-ancestors 'none'; frame-src viewscreen.githubusercontent.com notebooks.githubusercontent.com; img-src 'self' data: github.githubassets.com media.githubusercontent.com camo.githubusercontent.com identicons.github.com avatars.githubusercontent.com github-cloud.s3.amazonaws.com objects.githubusercontent.com objects-origin.githubusercontent.com secured-user-images.githubusercontent.com/ opengraph.githubassets.com github-production-user-asset-6210df.s3.amazonaws.com customer-stories-feed.github.com spotlights-feed.github.com *.githubusercontent.com; manifest-src 'self'; media-src github.com user-images.githubusercontent.com/ secured-user-images.githubusercontent.com/; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com; worker-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/
  Content-Length: 0
  X-GitHub-Request-Id: D47F:F2DE:2F3E29B:303AC52:637413E9
  HTTP/1.1 302 Found
  Server: GitHub.com
  Date: Tue, 15 Nov 2022 22:34:17 GMT
  Content-Type: text/html; charset=utf-8
  Vary: X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, Accept-Encoding, Accept, X-Requested-With
  Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/263853960/33e88e80-95cb-11ea-8bb7-2dfa0654592c?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20221115%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20221115T223417Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=07d1673053f9e8676510f46b62993e3b9b2428a17f00a613162f67690318e82f&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=263853960&amp;response-content-disposition=attachment%3B%20filename%3Dlineitemsf1.snappy.parquet&amp;response-content-type=application%2Foctet-stream
  Cache-Control: no-cache
  Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
  X-Frame-Options: deny
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 0
  Referrer-Policy: no-referrer-when-downgrade
  Content-Security-Policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/; connect-src 'self' uploads.github.com objects-origin.githubusercontent.com www.githubstatus.com collector.github.com raw.githubusercontent.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events *.actions.githubusercontent.com wss://*.actions.githubusercontent.com online.visualstudio.com/api/v1/locations github-production-repository-image-32fea6.s3.amazonaws.com github-production-release-asset-2e65be.s3.amazonaws.com insights.github.com wss://alive.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com objects-origin.githubusercontent.com; frame-ancestors 'none'; frame-src viewscreen.githubusercontent.com notebooks.githubusercontent.com; img-src 'self' data: github.githubassets.com media.githubusercontent.com camo.githubusercontent.com identicons.github.com avatars.githubusercontent.com github-cloud.s3.amazonaws.com objects.githubusercontent.com objects-origin.githubusercontent.com secured-user-images.githubusercontent.com/ opengraph.githubassets.com github-production-user-asset-6210df.s3.amazonaws.com customer-stories-feed.github.com spotlights-feed.github.com *.githubusercontent.com; manifest-src 'self'; media-src github.com user-images.githubusercontent.com/ secured-user-images.githubusercontent.com/; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com; worker-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/
  Content-Length: 0
  X-GitHub-Request-Id: D47F:F2DE:2F3E323:303ACEF:637413E9
  HTTP/1.1 200 OK
  Connection: keep-alive
  Content-Length: 206368635
  Content-Type: application/octet-stream
  Last-Modified: Tue, 07 Dec 2021 13:35:44 GMT
  ETag: "0x8D9B986787C89B4"
  Server: Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
  x-ms-request-id: b588900b-a01e-0060-6d42-f95efa000000
  x-ms-version: 2020-04-08
  x-ms-creation-time: Tue, 17 Aug 2021 11:28:44 GMT
  x-ms-lease-status: unlocked
  x-ms-lease-state: available
  x-ms-blob-type: BlockBlob
  Content-Disposition: attachment; filename=lineitemsf1.snappy.parquet
  x-ms-server-encrypted: true
  Fastly-Restarts: 1
  Accept-Ranges: bytes
  Age: 0
  Date: Tue, 15 Nov 2022 22:34:18 GMT
  Via: 1.1 varnish
  X-Served-By: cache-lhr7337-LHR
  X-Cache: MISS
  X-Cache-Hits: 0
  X-Timer: S1668551658.108887,VS0,VE259</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>wget <span class="op" style="color: #5E5E5E;">-</span>q https:<span class="op" style="color: #5E5E5E;">//</span>github.com<span class="op" style="color: #5E5E5E;">/</span>cwida<span class="op" style="color: #5E5E5E;">/</span>duckdb<span class="op" style="color: #5E5E5E;">-</span>data<span class="op" style="color: #5E5E5E;">/</span>releases<span class="op" style="color: #5E5E5E;">/</span>download<span class="op" style="color: #5E5E5E;">/</span>v1<span class="fl" style="color: #AD0000;">.0</span><span class="op" style="color: #5E5E5E;">/</span>orders.parquet</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb6-2">lineitem <span class="op" style="color: #5E5E5E;">=</span> duckdb.query(<span class="st" style="color: #20794D;">"SELECT * FROM 'lineitemsf1.snappy.parquet'"</span>).to_df()</span>
<span id="cb6-3">orders <span class="op" style="color: #5E5E5E;">=</span> duckdb.query(<span class="st" style="color: #20794D;">"SELECT * FROM 'orders.parquet'"</span>).to_df()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 7.62 s, sys: 5.43 s, total: 13 s
Wall time: 14.1 s</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">%%</span>time</span>
<span id="cb8-2">_ <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">"lineitemsf1.snappy.parquet"</span>)</span>
<span id="cb8-3">_ <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">"orders.parquet"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 6.29 s, sys: 1.5 s, total: 7.78 s
Wall time: 5.81 s</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">con <span class="op" style="color: #5E5E5E;">=</span> duckdb.<span class="ex" style="color: null;">connect</span>()</span>
<span id="cb10-2">con.execute(<span class="st" style="color: #20794D;">'PRAGMA threads=2'</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">def</span> timeit(fun, name):</span>
<span id="cb10-5">    <span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb10-6">    start_time <span class="op" style="color: #5E5E5E;">=</span> time.monotonic()</span>
<span id="cb10-7">    fun()</span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;">return</span> [name, time.monotonic() <span class="op" style="color: #5E5E5E;">-</span> start_time]</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;">def</span> plot_results(results, title):</span>
<span id="cb10-11">  df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame.from_dict({</span>
<span id="cb10-12">      <span class="st" style="color: #20794D;">'name'</span>: [x[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> results],</span>
<span id="cb10-13">      <span class="st" style="color: #20794D;">'time'</span>: [x[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> results]</span>
<span id="cb10-14">  })</span>
<span id="cb10-15">  <span class="bu" style="color: null;">print</span>(title)</span>
<span id="cb10-16">  <span class="bu" style="color: null;">print</span>(df)</span></code></pre></div>
</div>
<p><strong>Ungrouped Aggregates</strong></p>
<p>This performs a simple set of ungrouped aggregates (sum, min, max, avg) over a column without any filters or other complex operations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'''</span></span>
<span id="cb11-2"><span class="st" style="color: #20794D;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem</span></span>
<span id="cb11-3"><span class="st" style="color: #20794D;">'''</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;">def</span> duckdb_ungrouped_aggregate(d_con):</span>
<span id="cb11-6">    <span class="bu" style="color: null;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="kw" style="color: #003B4F;">def</span> duckdb_ungrouped_aggregate_1t():</span>
<span id="cb11-9">    duckdb_ungrouped_aggregate(duckdb)</span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;">def</span> duckdb_ungrouped_aggregate_2t():</span>
<span id="cb11-12">    duckdb_ungrouped_aggregate(con)</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="kw" style="color: #003B4F;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb11-15">  result <span class="op" style="color: #5E5E5E;">=</span> lineitem.groupby(</span>
<span id="cb11-16">    [<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]</span>
<span id="cb11-17">  ).agg(</span>
<span id="cb11-18">    Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>),</span>
<span id="cb11-19">    Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>),</span>
<span id="cb11-20">    Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>),</span>
<span id="cb11-21">    Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)</span>
<span id="cb11-22">  )</span>
<span id="cb11-23">  <span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb11-24">    <span class="co" style="color: #5E5E5E;"># print(lineitem.agg(Sum=('l_extendedprice', 'sum'), Min=('l_extendedprice', 'min'), Max=('l_extendedprice', 'max'), Avg=('l_extendedprice', 'mean')))</span></span>
<span id="cb11-25"></span>
<span id="cb11-26">ua_results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb11-27">ua_results.append(timeit(duckdb_ungrouped_aggregate_1t, <span class="st" style="color: #20794D;">'DuckDB (1T)'</span>))</span>
<span id="cb11-28">ua_results.append(timeit(duckdb_ungrouped_aggregate_2t, <span class="st" style="color: #20794D;">'DuckDB (2T)'</span>))</span>
<span id="cb11-29">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;">'Pandas'</span>))</span>
<span id="cb11-30">plot_results(ua_results, <span class="st" style="color: #20794D;">'Ungrouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.149352e+11  901.0  104749.5  38248.015609
R            F             5.656804e+10  904.0  104899.5  38250.854626
Ungrouped Aggregate
          name      time
0  DuckDB (1T)  0.052544
1  DuckDB (2T)  0.066239
2       Pandas  0.801278</code></pre>
</div>
</div>
<p><strong>Grouped Aggregates</strong></p>
<p>This performs the same set of aggregates, but this time grouped by two other columns (<em>l_returnflag</em> and <em>l_linestatus</em>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">grouped_aggregate <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'''</span></span>
<span id="cb13-2"><span class="st" style="color: #20794D;">SELECT l_returnflag,</span></span>
<span id="cb13-3"><span class="st" style="color: #20794D;">       l_linestatus,</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;">       SUM(l_extendedprice),</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;">       MIN(l_extendedprice),</span></span>
<span id="cb13-6"><span class="st" style="color: #20794D;">       MAX(l_extendedprice),</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;">       AVG(l_extendedprice)</span></span>
<span id="cb13-8"><span class="st" style="color: #20794D;">FROM lineitem</span></span>
<span id="cb13-9"><span class="st" style="color: #20794D;">GROUP BY l_returnflag,</span></span>
<span id="cb13-10"><span class="st" style="color: #20794D;">         l_linestatus</span></span>
<span id="cb13-11"><span class="st" style="color: #20794D;">'''</span></span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate(d_con):</span>
<span id="cb13-14">    <span class="bu" style="color: null;">print</span>(d_con.query(grouped_aggregate).to_df())</span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_1t():</span>
<span id="cb13-17">    duckdb_grouped_aggregate(duckdb)</span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_2t():</span>
<span id="cb13-20">    duckdb_grouped_aggregate(con)</span>
<span id="cb13-21"></span>
<span id="cb13-22"><span class="kw" style="color: #003B4F;">def</span> pandas_grouped_aggregate():</span>
<span id="cb13-23">    <span class="bu" style="color: null;">print</span>(lineitem.groupby([<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)))</span>
<span id="cb13-24"></span>
<span id="cb13-25">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb13-26">results.append(timeit(duckdb_grouped_aggregate_1t, <span class="st" style="color: #20794D;">'DuckDB (1T)'</span>))</span>
<span id="cb13-27">results.append(timeit(duckdb_grouped_aggregate_2t, <span class="st" style="color: #20794D;">'DuckDB (2T)'</span>))</span>
<span id="cb13-28">results.append(timeit(pandas_grouped_aggregate, <span class="st" style="color: #20794D;">'Pandas'</span>))</span>
<span id="cb13-29">plot_results(results, <span class="st" style="color: #20794D;">'Grouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.149352e+11                 901.0   
1            R            F          5.656804e+10                 904.0   
2            A            F          5.658655e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38248.015609  
1              104899.5          38250.854626  
2              104949.5          38273.129735  
3              104049.5          38284.467761  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.149352e+11                 901.0   
1            R            F          5.656804e+10                 904.0   
2            A            F          5.658655e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38248.015609  
1              104899.5          38250.854626  
2              104949.5          38273.129735  
3              104049.5          38284.467761  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.149352e+11  901.0  104749.5  38248.015609
R            F             5.656804e+10  904.0  104899.5  38250.854626
Grouped Aggregate
          name      time
0  DuckDB (1T)  0.115463
1  DuckDB (2T)  0.222520
2       Pandas  0.708696</code></pre>
</div>
</div>
<p><strong>Grouped Aggregate with a Filter</strong></p>
<p>This benchmark performs a grouped aggregate with a filter over the shipdate column.</p>
<p>As Pandas does not perform any projection pushdown, we include a version where we manually perform the projection pushdown by filtering only the columns we actually need before running the filter and aggregate.</p>
<p>This optimization is performed automatically in DuckDB by the query optimizer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter(d_con):</span>
<span id="cb15-2">    <span class="bu" style="color: null;">print</span>(d_con.query(<span class="st" style="color: #20794D;">'''</span></span>
<span id="cb15-3"><span class="st" style="color: #20794D;">SELECT l_returnflag,</span></span>
<span id="cb15-4"><span class="st" style="color: #20794D;">       l_linestatus,</span></span>
<span id="cb15-5"><span class="st" style="color: #20794D;">       SUM(l_extendedprice),</span></span>
<span id="cb15-6"><span class="st" style="color: #20794D;">       MIN(l_extendedprice),</span></span>
<span id="cb15-7"><span class="st" style="color: #20794D;">       MAX(l_extendedprice),</span></span>
<span id="cb15-8"><span class="st" style="color: #20794D;">       AVG(l_extendedprice)</span></span>
<span id="cb15-9"><span class="st" style="color: #20794D;">FROM lineitem</span></span>
<span id="cb15-10"><span class="st" style="color: #20794D;">WHERE</span></span>
<span id="cb15-11"><span class="st" style="color: #20794D;">    l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb15-12"><span class="st" style="color: #20794D;">GROUP BY l_returnflag,</span></span>
<span id="cb15-13"><span class="st" style="color: #20794D;">         l_linestatus</span></span>
<span id="cb15-14"><span class="st" style="color: #20794D;">'''</span>).to_df())</span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter_1t():</span>
<span id="cb15-17">    duckdb_grouped_aggregate_filter(duckdb)</span>
<span id="cb15-18"></span>
<span id="cb15-19"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter_2t():</span>
<span id="cb15-20">    duckdb_grouped_aggregate_filter(con)</span>
<span id="cb15-21"></span>
<span id="cb15-22"><span class="kw" style="color: #003B4F;">def</span> pandas_grouped_aggregate_filter():</span>
<span id="cb15-23">  filtered_df <span class="op" style="color: #5E5E5E;">=</span> lineitem[lineitem[<span class="st" style="color: #20794D;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="st" style="color: #20794D;">"1998-09-02"</span>]</span>
<span id="cb15-24">  <span class="bu" style="color: null;">print</span>(filtered_df.groupby([<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)))</span>
<span id="cb15-25"></span>
<span id="cb15-26"><span class="kw" style="color: #003B4F;">def</span> pandas_grouped_aggregate_filter_projection_pushdown():</span>
<span id="cb15-27">  pushed_down_df <span class="op" style="color: #5E5E5E;">=</span> lineitem[[<span class="st" style="color: #20794D;">'l_shipdate'</span>, <span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>, <span class="st" style="color: #20794D;">'l_extendedprice'</span>]]</span>
<span id="cb15-28">  filtered_df <span class="op" style="color: #5E5E5E;">=</span> pushed_down_df[pushed_down_df[<span class="st" style="color: #20794D;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="st" style="color: #20794D;">"1998-09-02"</span>]</span>
<span id="cb15-29">  <span class="bu" style="color: null;">print</span>(filtered_df.groupby([<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)))</span>
<span id="cb15-30"></span>
<span id="cb15-31">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb15-32">results.append(timeit(duckdb_grouped_aggregate_filter_1t, <span class="st" style="color: #20794D;">'DuckDB (1T)'</span>))</span>
<span id="cb15-33">results.append(timeit(duckdb_grouped_aggregate_filter_2t, <span class="st" style="color: #20794D;">'DuckDB (2T)'</span>))</span>
<span id="cb15-34">results.append(timeit(pandas_grouped_aggregate_filter, <span class="st" style="color: #20794D;">'Pandas'</span>))</span>
<span id="cb15-35">results.append(timeit(pandas_grouped_aggregate_filter_projection_pushdown, <span class="st" style="color: #20794D;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb15-36">plot_results(results, <span class="st" style="color: #20794D;">'Grouped Aggregate + Filter'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.117017e+11                 901.0   
1            A            F          5.658655e+10                 904.0   
2            R            F          5.656804e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38249.117989  
1              104949.5          38273.129735  
2              104899.5          38250.854626  
3              104049.5          38284.467761  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.117017e+11                 901.0   
1            A            F          5.658655e+10                 904.0   
2            R            F          5.656804e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38249.117989  
1              104949.5          38273.129735  
2              104899.5          38250.854626  
3              104049.5          38284.467761  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.116318e+11  901.0  104749.5  38249.322811
R            F             5.656804e+10  904.0  104899.5  38250.854626
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.116318e+11  901.0  104749.5  38249.322811
R            F             5.656804e+10  904.0  104899.5  38250.854626
Grouped Aggregate + Filter
                       name      time
0               DuckDB (1T)  0.281653
1               DuckDB (2T)  0.356302
2                    Pandas  2.889015
3  Pandas (manual pushdown)  1.625353</code></pre>
</div>
</div>
<p><strong>Grouped Aggregate with Join and Filter</strong></p>
<p>In this benchmark we expand on the previous benchmark by including a join and a filter on the joined-on table.</p>
<p>Note that the naive version in Pandas is extremely slow, as it performs a full join of the entire table including all the columns that are not used and all the rows that will be filtered out. For that reason we have included a separate benchmark in which we have manually optimized the Pandas code by pushing down the projections and the filters.</p>
<p>These optimizations are performed automatically in DuckDB by the query optimizer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># projection &amp; filter on lineitem table</span></span>
<span id="cb17-3">lineitem_projected <span class="op" style="color: #5E5E5E;">=</span> lineitem[</span>
<span id="cb17-4">  [<span class="st" style="color: #20794D;">'l_shipdate'</span>,</span>
<span id="cb17-5">   <span class="st" style="color: #20794D;">'l_orderkey'</span>,</span>
<span id="cb17-6">   <span class="st" style="color: #20794D;">'l_linestatus'</span>,</span>
<span id="cb17-7">   <span class="st" style="color: #20794D;">'l_returnflag'</span>,</span>
<span id="cb17-8">   <span class="st" style="color: #20794D;">'l_extendedprice'</span>]</span>
<span id="cb17-9">]</span>
<span id="cb17-10">lineitem_filtered <span class="op" style="color: #5E5E5E;">=</span> lineitem_projected[</span>
<span id="cb17-11">  lineitem_projected[<span class="st" style="color: #20794D;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="st" style="color: #20794D;">"1998-09-02"</span>]</span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;"># projection and filter on order table</span></span>
<span id="cb17-13">orders_projected <span class="op" style="color: #5E5E5E;">=</span> orders[</span>
<span id="cb17-14">  [<span class="st" style="color: #20794D;">'o_orderkey'</span>,</span>
<span id="cb17-15">   <span class="st" style="color: #20794D;">'o_orderstatus'</span>]</span>
<span id="cb17-16">]</span>
<span id="cb17-17">orders_filtered <span class="op" style="color: #5E5E5E;">=</span> orders_projected[</span>
<span id="cb17-18">  orders_projected[<span class="st" style="color: #20794D;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'O'</span>]</span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;"># perform the join</span></span>
<span id="cb17-20">merged <span class="op" style="color: #5E5E5E;">=</span> lineitem_filtered.merge(</span>
<span id="cb17-21">  orders_filtered,</span>
<span id="cb17-22">  left_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'l_orderkey'</span>,</span>
<span id="cb17-23">  right_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o_orderkey'</span>)</span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;"># perform the aggregate</span></span>
<span id="cb17-25">result <span class="op" style="color: #5E5E5E;">=</span> merged.groupby(</span>
<span id="cb17-26">  [<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]</span>
<span id="cb17-27">).agg(</span>
<span id="cb17-28">  Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>),</span>
<span id="cb17-29">  Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>),</span>
<span id="cb17-30">  Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>),</span>
<span id="cb17-31">  Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)</span>
<span id="cb17-32">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">result</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>Sum</th>
      <th>Min</th>
      <th>Max</th>
      <th>Avg</th>
    </tr>
    <tr>
      <th>l_returnflag</th>
      <th>l_linestatus</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>N</th>
      <th>O</th>
      <td>1.080448e+11</td>
      <td>901.0</td>
      <td>104749.5</td>
      <td>38250.662806</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter_join(d_con):</span>
<span id="cb19-2">    <span class="bu" style="color: null;">print</span>(d_con.query(<span class="st" style="color: #20794D;">'''</span></span>
<span id="cb19-3"><span class="st" style="color: #20794D;">SELECT l_returnflag,</span></span>
<span id="cb19-4"><span class="st" style="color: #20794D;">       l_linestatus,</span></span>
<span id="cb19-5"><span class="st" style="color: #20794D;">       sum(l_extendedprice),</span></span>
<span id="cb19-6"><span class="st" style="color: #20794D;">       min(l_extendedprice),</span></span>
<span id="cb19-7"><span class="st" style="color: #20794D;">       max(l_extendedprice),</span></span>
<span id="cb19-8"><span class="st" style="color: #20794D;">       avg(l_extendedprice)</span></span>
<span id="cb19-9"><span class="st" style="color: #20794D;">FROM lineitem lineitem</span></span>
<span id="cb19-10"><span class="st" style="color: #20794D;">JOIN orders orders ON (l_orderkey=o_orderkey)</span></span>
<span id="cb19-11"><span class="st" style="color: #20794D;">WHERE l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb19-12"><span class="st" style="color: #20794D;">  AND o_orderstatus='O'</span></span>
<span id="cb19-13"><span class="st" style="color: #20794D;">GROUP BY l_returnflag,</span></span>
<span id="cb19-14"><span class="st" style="color: #20794D;">         l_linestatus</span></span>
<span id="cb19-15"><span class="st" style="color: #20794D;">'''</span>).to_df())</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter_join_1t():</span>
<span id="cb19-18">    duckdb_grouped_aggregate_filter_join(duckdb)</span>
<span id="cb19-19"></span>
<span id="cb19-20"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter_join_2t():</span>
<span id="cb19-21">    duckdb_grouped_aggregate_filter_join(con)</span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="kw" style="color: #003B4F;">def</span> pandas_grouped_aggregate_filter_join():</span>
<span id="cb19-24">    merged <span class="op" style="color: #5E5E5E;">=</span> lineitem.merge(orders, left_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o_orderkey'</span>)</span>
<span id="cb19-25">    filtered_a <span class="op" style="color: #5E5E5E;">=</span> merged[merged[<span class="st" style="color: #20794D;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="st" style="color: #20794D;">"1998-09-02"</span>]</span>
<span id="cb19-26">    filtered_b <span class="op" style="color: #5E5E5E;">=</span> filtered_a[filtered_a[<span class="st" style="color: #20794D;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'O'</span>]</span>
<span id="cb19-27">    result <span class="op" style="color: #5E5E5E;">=</span> filtered_b.groupby([<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>))</span>
<span id="cb19-28">    <span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb19-29"></span>
<span id="cb19-30"><span class="kw" style="color: #003B4F;">def</span> pandas_grouped_aggregate_filter_join_manual_pushdown():</span>
<span id="cb19-31">    lineitem_projected <span class="op" style="color: #5E5E5E;">=</span> lineitem[[<span class="st" style="color: #20794D;">'l_shipdate'</span>, <span class="st" style="color: #20794D;">'l_orderkey'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>, <span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_extendedprice'</span>]]</span>
<span id="cb19-32">    lineitem_filtered <span class="op" style="color: #5E5E5E;">=</span> lineitem_projected[lineitem_projected[<span class="st" style="color: #20794D;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="st" style="color: #20794D;">"1998-09-02"</span>]</span>
<span id="cb19-33">    orders_projected <span class="op" style="color: #5E5E5E;">=</span> orders[[<span class="st" style="color: #20794D;">'o_orderkey'</span>, <span class="st" style="color: #20794D;">'o_orderstatus'</span>]]</span>
<span id="cb19-34">    orders_filtered <span class="op" style="color: #5E5E5E;">=</span> orders_projected[orders_projected[<span class="st" style="color: #20794D;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'O'</span>]</span>
<span id="cb19-35">    merged <span class="op" style="color: #5E5E5E;">=</span> lineitem_filtered.merge(orders_filtered, left_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o_orderkey'</span>)</span>
<span id="cb19-36">    result <span class="op" style="color: #5E5E5E;">=</span> merged.groupby([<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>))</span>
<span id="cb19-37">    <span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb19-38"></span>
<span id="cb19-39">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb19-40">results.append(timeit(duckdb_grouped_aggregate_filter_join_1t, <span class="st" style="color: #20794D;">'DuckDB (1T)'</span>))</span>
<span id="cb19-41">results.append(timeit(duckdb_grouped_aggregate_filter_join_2t, <span class="st" style="color: #20794D;">'DuckDB (2T)'</span>))</span>
<span id="cb19-42">results.append(timeit(pandas_grouped_aggregate_filter_join, <span class="st" style="color: #20794D;">'Pandas'</span>))</span>
<span id="cb19-43">results.append(timeit(pandas_grouped_aggregate_filter_join_manual_pushdown, <span class="st" style="color: #20794D;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb19-44">plot_results(results, <span class="st" style="color: #20794D;">'Grouped Aggregate Join'</span>)</span>
<span id="cb19-45"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
Grouped Aggregate Join
                       name       time
0               DuckDB (1T)   0.218088
1               DuckDB (2T)   0.376592
2                    Pandas  11.403579
3  Pandas (manual pushdown)   2.765103</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="appendix-a-there-and-back-again-transferring-data-from-pandas-to-a-sql-engine-and-back" class="level1">
<h1>Appendix A: There and back again: Transferring data from Pandas to a SQL engine and back</h1>
<p>As Appendix A relies on the presence of an external PostgreSQL database server, the code cannot be executed in colab. The source code can be found here: https://gist.github.com/hannesmuehleisen/a95a39a1eda63aeb0ca13fd82d1ba49c</p>
</section>
<section id="appendix-b-pandassql" class="level1">
<h1>Appendix B: PandasSQL</h1>
<p>Note: we cannot run this on the original dataset, as colab will run out of memory and crash. Instead for the benchmark we add a sample clause to reduce the data set size to 10% of the original data set size.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">--</span>quiet pandasql</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;">import</span> pandasql <span class="im" style="color: #00769E;">as</span> psql</span>
<span id="cb22-2">pysqldf <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">lambda</span> q: psql.sqldf(q, <span class="bu" style="color: null;">globals</span>())</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">lineitem_sample <span class="op" style="color: #5E5E5E;">=</span> duckdb.query(<span class="st" style="color: #20794D;">"SELECT * FROM 'lineitemsf1.snappy.parquet' USING SAMPLE 10%"</span>).to_df()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'''</span></span>
<span id="cb24-2"><span class="st" style="color: #20794D;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem_sample</span></span>
<span id="cb24-3"><span class="st" style="color: #20794D;">'''</span></span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="kw" style="color: #003B4F;">def</span> duckdb_ungrouped_aggregate(d_con):</span>
<span id="cb24-6">    <span class="bu" style="color: null;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="kw" style="color: #003B4F;">def</span> duckdb_ungrouped_aggregate_1t():</span>
<span id="cb24-9">    duckdb_ungrouped_aggregate(duckdb)</span>
<span id="cb24-10"></span>
<span id="cb24-11"><span class="kw" style="color: #003B4F;">def</span> duckdb_ungrouped_aggregate_2t():</span>
<span id="cb24-12">    duckdb_ungrouped_aggregate(con)</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="kw" style="color: #003B4F;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb24-15">    <span class="bu" style="color: null;">print</span>(lineitem_sample.agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)))</span>
<span id="cb24-16"></span>
<span id="cb24-17"><span class="kw" style="color: #003B4F;">def</span> ungrouped_aggregate_pandasql():</span>
<span id="cb24-18">  <span class="bu" style="color: null;">print</span>(pysqldf(ungrouped_aggregate))</span>
<span id="cb24-19"></span>
<span id="cb24-20">ua_results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb24-21">ua_results.append(timeit(duckdb_ungrouped_aggregate_1t, <span class="st" style="color: #20794D;">'DuckDB (1T)'</span>))</span>
<span id="cb24-22">ua_results.append(timeit(duckdb_ungrouped_aggregate_2t, <span class="st" style="color: #20794D;">'DuckDB (2T)'</span>))</span>
<span id="cb24-23">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;">'Pandas'</span>))</span>
<span id="cb24-24">ua_results.append(timeit(ungrouped_aggregate_pandasql, <span class="st" style="color: #20794D;">'PandaSQL'</span>))</span>
<span id="cb24-25">plot_results(ua_results, <span class="st" style="color: #20794D;">'Ungrouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   avg(l_extendedprice)  
0          38240.198955  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   avg(l_extendedprice)  
0          38240.198955  
     l_extendedprice
Sum     2.318151e+10
Min     9.070000e+02
Max     1.048995e+05
Avg     3.824020e+04
   SUM(l_extendedprice)  MIN(l_extendedprice)  MAX(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   AVG(l_extendedprice)  
0          38240.198955  
Ungrouped Aggregate
          name      time
0  DuckDB (1T)  0.039731
1  DuckDB (2T)  0.033024
2       Pandas  0.012675
3     PandaSQL  9.181672</code></pre>
</div>
</div>
</section>
<section id="appendix-c-directly-querying-parquet-files" class="level1">
<h1>Appendix C: Directly querying Parquet files</h1>
<p>In the benchmarks above, we fully read the parquet files into Pandas. However, DuckDB also has the capability of directly running queries on top of Parquet files. In this appendix, we show the performance of this compared to loading the file into Python first.</p>
<p>You can even use the wildcard syntax to run queries on multiple Parquet files in the same folder and create a unified single-table view over them (as long as they have the same schema).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># need to install pyarrow for pandas parquet reading</span></span>
<span id="cb26-2"><span class="op" style="color: #5E5E5E;">!</span>pip install pyarrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: pyarrow in /Users/Nok_Lam_Chan/miniconda3/envs/duckdb/lib/python3.9/site-packages (10.0.0)
Requirement already satisfied: numpy&gt;=1.16.6 in /Users/Nok_Lam_Chan/miniconda3/envs/duckdb/lib/python3.9/site-packages (from pyarrow) (1.23.4)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># set up the view</span></span>
<span id="cb28-2">parquet_con <span class="op" style="color: #5E5E5E;">=</span> duckdb.<span class="ex" style="color: null;">connect</span>()</span>
<span id="cb28-3">parquet_con.execute(<span class="st" style="color: #20794D;">"CREATE VIEW lineitem_parquet AS SELECT * FROM 'lineitemsf1.snappy.parquet'"</span>)</span>
<span id="cb28-4">parquet_con.execute(<span class="st" style="color: #20794D;">"CREATE VIEW orders_parquet AS SELECT * FROM 'orders.parquet'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;duckdb.DuckDBPyConnection&gt;</code></pre>
</div>
</div>
</section>
<section id="ungrouped-aggregate" class="level1">
<h1>Ungrouped Aggregate</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'''</span></span>
<span id="cb30-2"><span class="st" style="color: #20794D;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem_parquet</span></span>
<span id="cb30-3"><span class="st" style="color: #20794D;">'''</span></span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="kw" style="color: #003B4F;">def</span> duckdb_parquet_query(d_con):</span>
<span id="cb30-6">    <span class="bu" style="color: null;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb30-7"></span>
<span id="cb30-8"><span class="kw" style="color: #003B4F;">def</span> duckdb_ungrouped_parquet_1t():</span>
<span id="cb30-9">  parquet_con.execute(<span class="st" style="color: #20794D;">'PRAGMA threads=1'</span>)</span>
<span id="cb30-10">  duckdb_ungrouped_aggregate(parquet_con)</span>
<span id="cb30-11"> </span>
<span id="cb30-12"><span class="kw" style="color: #003B4F;">def</span> duckdb_ungrouped_parquet_2t():</span>
<span id="cb30-13">  parquet_con.execute(<span class="st" style="color: #20794D;">'PRAGMA threads=2'</span>)</span>
<span id="cb30-14">  duckdb_ungrouped_aggregate(parquet_con)</span>
<span id="cb30-15"></span>
<span id="cb30-16"><span class="kw" style="color: #003B4F;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb30-17">    <span class="bu" style="color: null;">print</span>(lineitem.agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)))</span>
<span id="cb30-18"></span>
<span id="cb30-19"><span class="kw" style="color: #003B4F;">def</span> pandas_ungrouped_aggregate_parquet_load():</span>
<span id="cb30-20">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">'lineitemsf1.snappy.parquet'</span>)</span>
<span id="cb30-21">  <span class="bu" style="color: null;">print</span>(lineitem_pandas_parquet.agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)))</span>
<span id="cb30-22"></span>
<span id="cb30-23"><span class="kw" style="color: #003B4F;">def</span> pandas_ungrouped_aggregate_parquet_load_pushdown():</span>
<span id="cb30-24">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">'lineitemsf1.snappy.parquet'</span>, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'l_extendedprice'</span>])</span>
<span id="cb30-25">  <span class="bu" style="color: null;">print</span>(lineitem_pandas_parquet.agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>)))</span>
<span id="cb30-26"></span>
<span id="cb30-27">ua_results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb30-28">ua_results.append(timeit(duckdb_ungrouped_parquet_1t, <span class="st" style="color: #20794D;">'DuckDB (1 Thread)'</span>))</span>
<span id="cb30-29">ua_results.append(timeit(duckdb_ungrouped_parquet_2t, <span class="st" style="color: #20794D;">'DuckDB (2 Threads)'</span>))</span>
<span id="cb30-30">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;">'Pandas'</span>))</span>
<span id="cb30-31">ua_results.append(timeit(pandas_ungrouped_aggregate_parquet_load, <span class="st" style="color: #20794D;">'Pandas + Parquet Load'</span>))</span>
<span id="cb30-32">ua_results.append(timeit(pandas_ungrouped_aggregate_parquet_load_pushdown, <span class="st" style="color: #20794D;">'Pandas + Parquet Load (Pushdown)'</span>))</span>
<span id="cb30-33">plot_results(ua_results, <span class="st" style="color: #20794D;">'Ungrouped Aggregate (Parquet)'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
Ungrouped Aggregate (Parquet)
                               name      time
0                 DuckDB (1 Thread)  0.173902
1                DuckDB (2 Threads)  0.086305
2                            Pandas  0.050655
3             Pandas + Parquet Load  6.311870
4  Pandas + Parquet Load (Pushdown)  0.151299</code></pre>
</div>
</div>
</section>
<section id="grouped-aggregate-with-join-and-filter" class="level1">
<h1>Grouped Aggregate with Join and Filter</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter_join_pq(d_con):</span>
<span id="cb32-2">    <span class="bu" style="color: null;">print</span>(d_con.query(<span class="st" style="color: #20794D;">'''</span></span>
<span id="cb32-3"><span class="st" style="color: #20794D;">SELECT l_returnflag,</span></span>
<span id="cb32-4"><span class="st" style="color: #20794D;">       l_linestatus,</span></span>
<span id="cb32-5"><span class="st" style="color: #20794D;">       sum(l_extendedprice),</span></span>
<span id="cb32-6"><span class="st" style="color: #20794D;">       min(l_extendedprice),</span></span>
<span id="cb32-7"><span class="st" style="color: #20794D;">       max(l_extendedprice),</span></span>
<span id="cb32-8"><span class="st" style="color: #20794D;">       avg(l_extendedprice)</span></span>
<span id="cb32-9"><span class="st" style="color: #20794D;">FROM lineitem_parquet lineitem</span></span>
<span id="cb32-10"><span class="st" style="color: #20794D;">JOIN orders_parquet orders ON (l_orderkey=o_orderkey)</span></span>
<span id="cb32-11"><span class="st" style="color: #20794D;">WHERE l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb32-12"><span class="st" style="color: #20794D;">  AND o_orderstatus='O'</span></span>
<span id="cb32-13"><span class="st" style="color: #20794D;">GROUP BY l_returnflag,</span></span>
<span id="cb32-14"><span class="st" style="color: #20794D;">         l_linestatus</span></span>
<span id="cb32-15"><span class="st" style="color: #20794D;">'''</span>).to_df())</span>
<span id="cb32-16"></span>
<span id="cb32-17"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter_join_pq_1t():</span>
<span id="cb32-18">  parquet_con.execute(<span class="st" style="color: #20794D;">'PRAGMA threads=1'</span>)</span>
<span id="cb32-19">  duckdb_grouped_aggregate_filter_join_pq(parquet_con)</span>
<span id="cb32-20"></span>
<span id="cb32-21"><span class="kw" style="color: #003B4F;">def</span> duckdb_grouped_aggregate_filter_join_pq_2t():</span>
<span id="cb32-22">  parquet_con.execute(<span class="st" style="color: #20794D;">'PRAGMA threads=2'</span>)</span>
<span id="cb32-23">  duckdb_grouped_aggregate_filter_join_pq(parquet_con)</span>
<span id="cb32-24"></span>
<span id="cb32-25"><span class="kw" style="color: #003B4F;">def</span> pandas_grouped_aggregate_filter_join_pq():</span>
<span id="cb32-26">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">'lineitemsf1.snappy.parquet'</span>)</span>
<span id="cb32-27">  orders_pandas_parquet <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">'orders.parquet'</span>)</span>
<span id="cb32-28">  merged <span class="op" style="color: #5E5E5E;">=</span> lineitem_pandas_parquet.merge(orders, left_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o_orderkey'</span>)</span>
<span id="cb32-29">  filtered_a <span class="op" style="color: #5E5E5E;">=</span> merged[merged[<span class="st" style="color: #20794D;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="st" style="color: #20794D;">"1998-09-02"</span>]</span>
<span id="cb32-30">  filtered_b <span class="op" style="color: #5E5E5E;">=</span> filtered_a[filtered_a[<span class="st" style="color: #20794D;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'O'</span>]</span>
<span id="cb32-31">  result <span class="op" style="color: #5E5E5E;">=</span> filtered_b.groupby([<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>))</span>
<span id="cb32-32">  <span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb32-33"></span>
<span id="cb32-34"><span class="kw" style="color: #003B4F;">def</span> pandas_grouped_aggregate_filter_join_manual_pushdown_pq():</span>
<span id="cb32-35">  lineitem_projected <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">'lineitemsf1.snappy.parquet'</span>, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'l_shipdate'</span>, <span class="st" style="color: #20794D;">'l_orderkey'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>, <span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_extendedprice'</span>])</span>
<span id="cb32-36">  orders_projected <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">'orders.parquet'</span>, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'o_orderkey'</span>, <span class="st" style="color: #20794D;">'o_orderstatus'</span>])</span>
<span id="cb32-37">  lineitem_filtered <span class="op" style="color: #5E5E5E;">=</span> lineitem_projected[lineitem_projected[<span class="st" style="color: #20794D;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="st" style="color: #20794D;">"1998-09-02"</span>]</span>
<span id="cb32-38">  orders_filtered <span class="op" style="color: #5E5E5E;">=</span> orders_projected[orders_projected[<span class="st" style="color: #20794D;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'O'</span>]</span>
<span id="cb32-39">  merged <span class="op" style="color: #5E5E5E;">=</span> lineitem_filtered.merge(orders_filtered, left_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'o_orderkey'</span>)</span>
<span id="cb32-40">  result <span class="op" style="color: #5E5E5E;">=</span> merged.groupby([<span class="st" style="color: #20794D;">'l_returnflag'</span>, <span class="st" style="color: #20794D;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'min'</span>), Max<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;">'mean'</span>))</span>
<span id="cb32-41">  <span class="bu" style="color: null;">print</span>(result)</span>
<span id="cb32-42"></span>
<span id="cb32-43">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb32-44">results.append(timeit(duckdb_grouped_aggregate_filter_join_pq_1t, <span class="st" style="color: #20794D;">'DuckDB (1T)'</span>))</span>
<span id="cb32-45">results.append(timeit(duckdb_grouped_aggregate_filter_join_pq_2t, <span class="st" style="color: #20794D;">'DuckDB (2T)'</span>))</span>
<span id="cb32-46">results.append(timeit(pandas_grouped_aggregate_filter_join_pq, <span class="st" style="color: #20794D;">'Pandas'</span>))</span>
<span id="cb32-47">results.append(timeit(pandas_grouped_aggregate_filter_join_manual_pushdown_pq, <span class="st" style="color: #20794D;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb32-48">plot_results(results, <span class="st" style="color: #20794D;">'Grouped Aggregate Join (Parquet)'</span>)</span>
<span id="cb32-49"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
Grouped Aggregate Join (Parquet)
                       name       time
0               DuckDB (1T)   0.828549
1               DuckDB (2T)   0.508537
2                    Pandas  13.954761
3  Pandas (manual pushdown)   2.337109</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;">## Part II - Transform Pandas to DuckDB Query</span></span>
<span id="cb34-2"></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;">## Part III - Create the DuckDB DataSet</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">## Part IV - Create the DuckDB Transformer</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2022-11-15-kedro_duckdb/kedro-duckdb.html</guid>
  <pubDate>Tue, 15 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding the Kedro codebase - A quick dirty meta-analysis - (Part I)</title>
  <link>https://noklam.github.io/blog/posts/2022-11-13-pandas_expert/kedro-meta-analysis.html</link>
  <description><![CDATA[ 



<div class="quarto-video ratio ratio-16x9"><iframe src="https://www.youtube.com/embed/pjq3QOxl9Ok" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Inspired by this talk</p>
<section id="how-many-lines-of-code-in-kedro" class="level1">
<h1>How many lines of code in Kedro?</h1>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> Counter</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">REPO_PATH <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">"/Users/Nok_Lam_Chan/GitHub/kedro"</span>)</span>
<span id="cb2-2"><span class="bu" style="color: null;">list</span>(REPO_PATH.iterdir())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test_requirements.txt'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CODE_OF_CONDUCT.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/LICENSE.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro_technical_charter.pdf'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.DS_Store'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.pytest_cache'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/derby.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro.egg-info'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.pre-commit-config.yaml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.coverage'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/Makefile'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CITATION.cff'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CODEOWNERS'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/pyproject.toml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/trufflehog-ignore.txt'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/dependency'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/MANIFEST.in'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.readthedocs.yml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/dep_tree.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/README.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/RELEASE.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/setup.py'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/demo-project'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/logs'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.mypy_cache'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.gitignore'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/static'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CONTRIBUTING.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/behave.ini'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.github'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.gitpod.yml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/info.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/coverage.xml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/errors.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.git'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/htmlcov'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.vscode'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/data'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/conf'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.circleci'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/import.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/notebooks'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.run'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.idea'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/src')]</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> count_effective_line(counter, fn):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span> (fn) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;">for</span> line <span class="kw" style="color: #003B4F;">in</span> f:</span>
<span id="cb4-4">            counter[fn] <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">lines_count <span class="op" style="color: #5E5E5E;">=</span> Counter()</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;">for</span> fn <span class="kw" style="color: #003B4F;">in</span> REPO_PATH.rglob(<span class="st" style="color: #20794D;">"*/*.py"</span>):</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;">#     print(fn)</span></span>
<span id="cb5-4">    count_effective_line(lines_count, fn)</span>
<span id="cb5-5"><span class="bu" style="color: null;">print</span>(lines_count)</span>
<span id="cb5-6">            </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Counter({PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_dataset.py'): 984, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline.py'): 940, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/pipeline.py'): 926, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session.py'): 891, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/micropkg.py'): 854, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_pull.py'): 846, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/core.py'): 748, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_cli.py'): 730, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_data_catalog.py'): 685, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_starters.py'): 639, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/cli_steps.py'): 623, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py'): 612, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs/conf.py'): 598, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py'): 594, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs/build/conf.py'): 587, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_package.py'): 581, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session_extension_hooks.py'): 576, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_partitioned_dataset.py'): 565, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/starters.py'): 552, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/partitioned_dataset.py'): 551, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/pipeline/test_pipeline.py'): 522, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_incremental_dataset.py'): 503, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/context/test_context.py'): 485, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/config/test_templated_config.py'): 482, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_project.py'): 479, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_jupyter.py'): 470, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/utils.py'): 469, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py'): 456, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tensorflow/test_tensorflow_model_dataset.py'): 441, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/sql_dataset.py'): 438, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/matplotlib/test_matplotlib_writer.py'): 436, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_node.py'): 434, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py'): 423, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_dataset.py'): 422, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_modular_pipeline.py'): 418, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_parallel_runner.py'): 401, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/project.py'): 392, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_with_transcoding.py'): 391, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_generic_dataset.py'): 383, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/conftest.py'): 381, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_sql_dataset.py'): 374, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/project/__init__.py'): 369, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/config/test_config.py'): 354, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/parallel_runner.py'): 353, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/context/context.py'): 345, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_parquet_dataset.py'): 344, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/pipeline.py'): 336, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_gbq_dataset.py'): 315, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_hive_dataset.py'): 314, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/gbq_dataset.py'): 314, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_catalog.py'): 305, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/ipython/test_ipython.py'): 304, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_csv_dataset.py'): 300, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/specs.py'): 296, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/modular_pipeline.py'): 290, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/jupyter.py'): 282, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_excel_dataset.py'): 281, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/templated_config.py'): 281, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/dagascii.py'): 275, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_sequential_runner.py'): 273, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pickle/test_pickle_dataset.py'): 269, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_requirements.py'): 266, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_pipeline_discovery.py'): 260, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/excel_dataset.py'): 254, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/test_startup.py'): 250, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/common.py'): 248, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/generic_dataset.py'): 246, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_hdf_dataset.py'): 245, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/matplotlib/matplotlib_writer.py'): 243, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pickle/pickle_dataset.py'): 243, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_xml_dataset.py'): 241, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_json_dataset.py'): 241, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/geojson/test_geojson_dataset.py'): 232, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pillow/test_image_dataset.py'): 231, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/parquet_dataset.py'): 230, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_from_missing.py'): 227, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_memory_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_json_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/email/test_message_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/docs/source/conf.py'): 224, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/docs/source/conf.py'): 224, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/docs/source/conf.py'): 222, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/holoviews/test_holoviews_writer.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_feather_dataset.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_hive_dataset.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_thread_runner.py'): 213, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/cli.py'): 211, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/yaml/test_yaml_dataset.py'): 210, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/hdf_dataset.py'): 204, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/json/test_json_dataset.py'): 200, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_lambda_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tracking/test_metrics_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/csv_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/feather_dataset.py'): 191, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/redis/redis_dataset.py'): 189, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_gml_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_graphml_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tensorflow/tensorflow_model_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/email/message_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/text/test_text_dataset.py'): 187, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/json_dataset.py'): 187, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tracking/test_json_dataset.py'): 185, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/catalog.py'): 176, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_jdbc_dataset.py'): 175, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/xml_dataset.py'): 171, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/api/test_api_dataset.py'): 170, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/conftest.py'): 168, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/redis/test_redis_dataset.py'): 165, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py'): 164, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/dask/test_parquet_dataset.py'): 162, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/json/json_dataset.py'): 160, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/conftest.py'): 159, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/geopandas/geojson_dataset.py'): 157, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/startup.py'): 156, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/thread_runner.py'): 156, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/yaml/yaml_dataset.py'): 155, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/tools/test_cli.py'): 154, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/json_dataset.py'): 154, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/json_dataset.py'): 150, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/gml_dataset.py'): 145, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/graphml_dataset.py'): 143, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_cached_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pillow/image_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/api/api_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_node_run.py'): 141, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/biosequence/biosequence_dataset.py'): 137, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/holoviews/holoviews_writer.py'): 137, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/dask/parquet_dataset.py'): 136, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/config.py'): 134, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/memory_dataset.py'): 132, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/text/text_dataset.py'): 131, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/environment.py'): 128, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_cli_hooks.py'): 128, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session_hook_manager.py'): 126, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_jdbc_dataset.py'): 121, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/plotly_dataset.py'): 117, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/cached_dataset.py'): 113, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/lambda_dataset.py'): 113, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/plotly/test_plotly_dataset.py'): 108, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/deltatable_dataset.py'): 108, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/bioinformatics/test_biosequence_dataset.py'): 107, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/manager.py'): 106, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/sh_run.py'): 105, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_settings.py'): 102, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/plotly/test_json_dataset.py'): 101, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_core.py'): 96, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/logging/color_logger.py'): 95, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/conftest.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_store.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_deltatable_dataset.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_registry.py'): 88, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py'): 87, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/util.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_integration.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/pipeline/conftest.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/nodes.py'): 80, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_pipeline_registry.py'): 79, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/conftest.py'): 79, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/hooks/test_manager.py'): 75, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/metrics_dataset.py'): 68, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_memory_dataset.py'): 67, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools/cli.py'): 62, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/settings.py'): 62, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_logging.py'): 58, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/settings.py'): 56, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/nodes.py'): 51, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/registry.py'): 50, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/manager.py'): 49, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/json_dataset.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/specs.py'): 46, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/shelvestore.py'): 43, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/tests/test_run.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/conftest.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/tests/test_run.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/tests/test_run.py'): 40, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/settings.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/pipeline.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/abstract_config.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/store.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/settings.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/__init__.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/pipeline.py'): 38, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/settings.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/setup.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/settings.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/setup.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/conftest.py'): 35, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/pipeline.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/pipeline.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/__init__.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/test_utils.py'): 30, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/utils.py'): 28, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_plugin/plugin.py'): 27, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/pipeline.py'): 27, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools/circleci/github_scripts/kedro_version.py'): 26, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/pipeline.py'): 26, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/settings.py'): 24, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/hooks/test_manager.py'): 22, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/extensions/ipython.py'): 22, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipeline_registry.py'): 19, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/__init__.py'): 19, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/logging/test_color_logger.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/__init__.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipeline_registry.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/logging/__init__.py'): 15, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/__init__.py'): 15, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/__init__.py'): 14, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/pipeline_registry.py'): 13, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_plugin/setup.py'): 12, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/markers.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/api/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/__main__.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/markers.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/__init__.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/pipeline.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/__init__.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/dask/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/redis/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/geopandas/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pillow/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/json/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/biosequence/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tensorflow/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/matplotlib/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/yaml/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pickle/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/text/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/holoviews/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/email/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/context/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/__init__.py'): 6, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/__init__.py'): 5, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/__init__.py'): 5, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/nodes.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/settings.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/__init__.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/extensions/__init__.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/__init__.py'): 2, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/__init__.py'): 1})</code></pre>
</div>
</div>
</section>
<section id="clean-up-the-dictionary-a-little-bit" class="level1">
<h1>Clean up the dictionary a little bit</h1>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">line_counts_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(lines_count.items(), columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"fullpath"</span>,<span class="st" style="color: #20794D;">"line_of_code"</span>])</span>
<span id="cb7-2">line_counts_df[<span class="st" style="color: #20794D;">"fullpath"</span>] <span class="op" style="color: #5E5E5E;">=</span> line_counts_df[<span class="st" style="color: #20794D;">"fullpath"</span>].<span class="bu" style="color: null;">apply</span>(<span class="bu" style="color: null;">str</span>)</span>
<span id="cb7-3">line_counts_df[<span class="st" style="color: #20794D;">"fullpath"</span>] <span class="op" style="color: #5E5E5E;">=</span>  line_counts_df[<span class="st" style="color: #20794D;">"fullpath"</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">"/Users/Nok_Lam_Chan/GitHub/kedro/"</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb7-4">line_counts_df.head(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>fullpath</th>
      <th>line_of_code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>tools/cli.py</td>
      <td>62</td>
    </tr>
    <tr>
      <th>1</th>
      <td>features/environment.py</td>
      <td>128</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">line_counts_df[[<span class="st" style="color: #20794D;">"toplevel"</span>,<span class="st" style="color: #20794D;">"module"</span>,<span class="st" style="color: #20794D;">"submodule"</span>,<span class="st" style="color: #20794D;">"filename"</span>]] <span class="op" style="color: #5E5E5E;">=</span> line_counts_df[<span class="st" style="color: #20794D;">"fullpath"</span>].<span class="bu" style="color: null;">str</span>.split(<span class="st" style="color: #20794D;">"/"</span>,expand<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">line_counts_df</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>fullpath</th>
      <th>line_of_code</th>
      <th>toplevel</th>
      <th>module</th>
      <th>submodule</th>
      <th>filename</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>tools/cli.py</td>
      <td>62</td>
      <td>tools</td>
      <td>cli.py</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>1</th>
      <td>features/environment.py</td>
      <td>128</td>
      <td>features</td>
      <td>environment.py</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>2</th>
      <td>tests/test_utils.py</td>
      <td>30</td>
      <td>tests</td>
      <td>test_utils.py</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>3</th>
      <td>tests/conftest.py</td>
      <td>89</td>
      <td>tests</td>
      <td>conftest.py</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>4</th>
      <td>docs/conf.py</td>
      <td>598</td>
      <td>docs</td>
      <td>conf.py</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>276</th>
      <td>kedro/extras/datasets/pandas/feather_dataset.py</td>
      <td>191</td>
      <td>kedro</td>
      <td>extras</td>
      <td>datasets</td>
      <td>pandas/feather_dataset.py</td>
    </tr>
    <tr>
      <th>277</th>
      <td>kedro/extras/datasets/pandas/hdf_dataset.py</td>
      <td>204</td>
      <td>kedro</td>
      <td>extras</td>
      <td>datasets</td>
      <td>pandas/hdf_dataset.py</td>
    </tr>
    <tr>
      <th>278</th>
      <td>kedro/extras/datasets/pandas/csv_dataset.py</td>
      <td>194</td>
      <td>kedro</td>
      <td>extras</td>
      <td>datasets</td>
      <td>pandas/csv_dataset.py</td>
    </tr>
    <tr>
      <th>279</th>
      <td>kedro/extras/datasets/pandas/excel_dataset.py</td>
      <td>254</td>
      <td>kedro</td>
      <td>extras</td>
      <td>datasets</td>
      <td>pandas/excel_dataset.py</td>
    </tr>
    <tr>
      <th>280</th>
      <td>kedro/extras/datasets/pandas/gbq_dataset.py</td>
      <td>314</td>
      <td>kedro</td>
      <td>extras</td>
      <td>datasets</td>
      <td>pandas/gbq_dataset.py</td>
    </tr>
  </tbody>
</table>
<p>281 rows × 6 columns</p>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">## Sort by Top level module</span></span>
<span id="cb10-2">line_counts_df.groupby([<span class="st" style="color: #20794D;">"toplevel"</span>]).<span class="bu" style="color: null;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, by <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>line_of_code</th>
    </tr>
    <tr>
      <th>toplevel</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>tests</th>
      <td>25341</td>
    </tr>
    <tr>
      <th>kedro</th>
      <td>18683</td>
    </tr>
    <tr>
      <th>features</th>
      <td>1587</td>
    </tr>
    <tr>
      <th>docs</th>
      <td>1185</td>
    </tr>
    <tr>
      <th>resume-kedro</th>
      <td>1007</td>
    </tr>
    <tr>
      <th>iris-demo</th>
      <td>550</td>
    </tr>
    <tr>
      <th>iris</th>
      <td>547</td>
    </tr>
    <tr>
      <th>test</th>
      <td>405</td>
    </tr>
    <tr>
      <th>tools</th>
      <td>88</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Interstingly we have roughly a 1:1 ratio between <code>tests</code> and <code>kedro</code></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">line_counts_df.groupby([<span class="st" style="color: #20794D;">"module"</span>,<span class="st" style="color: #20794D;">"submodule"</span>]).<span class="bu" style="color: null;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, by <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>line_of_code</th>
    </tr>
    <tr>
      <th>module</th>
      <th>submodule</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>extras</th>
      <th>datasets</th>
      <td>15775</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">framework</th>
      <th>cli</th>
      <td>8837</td>
    </tr>
    <tr>
      <th>session</th>
      <td>2574</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">pipeline</th>
      <th>test_pipeline.py</th>
      <td>940</td>
    </tr>
    <tr>
      <th>pipeline.py</th>
      <td>926</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <td>...</td>
    </tr>
    <tr>
      <th>config</th>
      <th>__init__.py</th>
      <td>19</td>
    </tr>
    <tr>
      <th>runner</th>
      <th>__init__.py</th>
      <td>16</td>
    </tr>
    <tr>
      <th>pipeline</th>
      <th>__init__.py</th>
      <td>9</td>
    </tr>
    <tr>
      <th>extras</th>
      <th>__init__.py</th>
      <td>2</td>
    </tr>
    <tr>
      <th>framework</th>
      <th>__init__.py</th>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>74 rows × 1 columns</p>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">## Sort by Sub-module</span></span>
<span id="cb12-2">kedro_line_counts_df <span class="op" style="color: #5E5E5E;">=</span> line_counts_df[line_counts_df[<span class="st" style="color: #20794D;">"toplevel"</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"kedro"</span>]</span>
<span id="cb12-3">tmp <span class="op" style="color: #5E5E5E;">=</span> kedro_line_counts_df.groupby(<span class="st" style="color: #20794D;">"module"</span>).<span class="bu" style="color: null;">sum</span>().rename(mapper<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"line_of_code"</span>: <span class="st" style="color: #20794D;">"module_line_of_code"</span>},axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span> )</span>
<span id="cb12-4">kedro_line_counts_df_group <span class="op" style="color: #5E5E5E;">=</span> kedro_line_counts_df.groupby([<span class="st" style="color: #20794D;">"module"</span>,<span class="st" style="color: #20794D;">"submodule"</span>]).<span class="bu" style="color: null;">sum</span>().reset_index().merge(tmp, left_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"module"</span>, right_on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"module"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;"># .sort_values(ascending=False, by ="line_of_code")</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">kedro_line_counts_df.groupby([<span class="st" style="color: #20794D;">"module"</span>]).<span class="bu" style="color: null;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, by <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>line_of_code</th>
    </tr>
    <tr>
      <th>module</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>extras</th>
      <td>6871</td>
    </tr>
    <tr>
      <th>framework</th>
      <td>5246</td>
    </tr>
    <tr>
      <th>io</th>
      <td>2284</td>
    </tr>
    <tr>
      <th>pipeline</th>
      <td>1837</td>
    </tr>
    <tr>
      <th>runner</th>
      <td>1068</td>
    </tr>
    <tr>
      <th>config</th>
      <td>721</td>
    </tr>
    <tr>
      <th>templates</th>
      <td>443</td>
    </tr>
    <tr>
      <th>ipython</th>
      <td>164</td>
    </tr>
    <tr>
      <th>utils.py</th>
      <td>28</td>
    </tr>
    <tr>
      <th>__init__.py</th>
      <td>11</td>
    </tr>
    <tr>
      <th>__main__.py</th>
      <td>10</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Sort by file </span></span>
<span id="cb14-2">kedro_line_counts_df_group.sort_values(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, by <span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"module_line_of_code"</span>,<span class="st" style="color: #20794D;">"line_of_code"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>module</th>
      <th>submodule</th>
      <th>line_of_code</th>
      <th>module_line_of_code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>6</th>
      <td>extras</td>
      <td>datasets</td>
      <td>6734</td>
      <td>6871</td>
    </tr>
    <tr>
      <th>8</th>
      <td>extras</td>
      <td>logging</td>
      <td>110</td>
      <td>6871</td>
    </tr>
    <tr>
      <th>7</th>
      <td>extras</td>
      <td>extensions</td>
      <td>25</td>
      <td>6871</td>
    </tr>
    <tr>
      <th>5</th>
      <td>extras</td>
      <td>__init__.py</td>
      <td>2</td>
      <td>6871</td>
    </tr>
    <tr>
      <th>10</th>
      <td>framework</td>
      <td>cli</td>
      <td>3439</td>
      <td>5246</td>
    </tr>
    <tr>
      <th>14</th>
      <td>framework</td>
      <td>session</td>
      <td>511</td>
      <td>5246</td>
    </tr>
    <tr>
      <th>12</th>
      <td>framework</td>
      <td>hooks</td>
      <td>418</td>
      <td>5246</td>
    </tr>
    <tr>
      <th>13</th>
      <td>framework</td>
      <td>project</td>
      <td>369</td>
      <td>5246</td>
    </tr>
    <tr>
      <th>11</th>
      <td>framework</td>
      <td>context</td>
      <td>352</td>
      <td>5246</td>
    </tr>
    <tr>
      <th>15</th>
      <td>framework</td>
      <td>startup.py</td>
      <td>156</td>
      <td>5246</td>
    </tr>
    <tr>
      <th>9</th>
      <td>framework</td>
      <td>__init__.py</td>
      <td>1</td>
      <td>5246</td>
    </tr>
    <tr>
      <th>18</th>
      <td>io</td>
      <td>core.py</td>
      <td>748</td>
      <td>2284</td>
    </tr>
    <tr>
      <th>19</th>
      <td>io</td>
      <td>data_catalog.py</td>
      <td>594</td>
      <td>2284</td>
    </tr>
    <tr>
      <th>22</th>
      <td>io</td>
      <td>partitioned_dataset.py</td>
      <td>551</td>
      <td>2284</td>
    </tr>
    <tr>
      <th>21</th>
      <td>io</td>
      <td>memory_dataset.py</td>
      <td>132</td>
      <td>2284</td>
    </tr>
    <tr>
      <th>17</th>
      <td>io</td>
      <td>cached_dataset.py</td>
      <td>113</td>
      <td>2284</td>
    </tr>
    <tr>
      <th>20</th>
      <td>io</td>
      <td>lambda_dataset.py</td>
      <td>113</td>
      <td>2284</td>
    </tr>
    <tr>
      <th>16</th>
      <td>io</td>
      <td>__init__.py</td>
      <td>33</td>
      <td>2284</td>
    </tr>
    <tr>
      <th>27</th>
      <td>pipeline</td>
      <td>pipeline.py</td>
      <td>926</td>
      <td>1837</td>
    </tr>
    <tr>
      <th>26</th>
      <td>pipeline</td>
      <td>node.py</td>
      <td>612</td>
      <td>1837</td>
    </tr>
    <tr>
      <th>25</th>
      <td>pipeline</td>
      <td>modular_pipeline.py</td>
      <td>290</td>
      <td>1837</td>
    </tr>
    <tr>
      <th>24</th>
      <td>pipeline</td>
      <td>__init__.py</td>
      <td>9</td>
      <td>1837</td>
    </tr>
    <tr>
      <th>30</th>
      <td>runner</td>
      <td>runner.py</td>
      <td>456</td>
      <td>1068</td>
    </tr>
    <tr>
      <th>29</th>
      <td>runner</td>
      <td>parallel_runner.py</td>
      <td>353</td>
      <td>1068</td>
    </tr>
    <tr>
      <th>32</th>
      <td>runner</td>
      <td>thread_runner.py</td>
      <td>156</td>
      <td>1068</td>
    </tr>
    <tr>
      <th>31</th>
      <td>runner</td>
      <td>sequential_runner.py</td>
      <td>87</td>
      <td>1068</td>
    </tr>
    <tr>
      <th>28</th>
      <td>runner</td>
      <td>__init__.py</td>
      <td>16</td>
      <td>1068</td>
    </tr>
    <tr>
      <th>4</th>
      <td>config</td>
      <td>templated_config.py</td>
      <td>281</td>
      <td>721</td>
    </tr>
    <tr>
      <th>2</th>
      <td>config</td>
      <td>common.py</td>
      <td>248</td>
      <td>721</td>
    </tr>
    <tr>
      <th>3</th>
      <td>config</td>
      <td>config.py</td>
      <td>134</td>
      <td>721</td>
    </tr>
    <tr>
      <th>1</th>
      <td>config</td>
      <td>abstract_config.py</td>
      <td>39</td>
      <td>721</td>
    </tr>
    <tr>
      <th>0</th>
      <td>config</td>
      <td>__init__.py</td>
      <td>19</td>
      <td>721</td>
    </tr>
    <tr>
      <th>34</th>
      <td>templates</td>
      <td>project</td>
      <td>410</td>
      <td>443</td>
    </tr>
    <tr>
      <th>33</th>
      <td>templates</td>
      <td>pipeline</td>
      <td>33</td>
      <td>443</td>
    </tr>
    <tr>
      <th>23</th>
      <td>ipython</td>
      <td>__init__.py</td>
      <td>164</td>
      <td>164</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Total number of LOC</span></span>
<span id="cb15-2">kedro_line_counts_df[<span class="st" style="color: #20794D;">"line_of_code"</span>].<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>18683</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The kedro codebase is not huge, roughly 20000 line of code, compare to pandas which has &gt; 250000 of code, 10x smaller. The <code>datasets</code> and <code>framework</code> code is the largest module which isn’t surprise to me. The more surprising is how small <code>config</code> actually is, but it creates huge complexity in terms of a kedro project. The <code>cli</code> is also relatively huge as it takes ~3000 lines of code which I didn’t expected.</p>


</section>

 ]]></description>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/2022-11-13-pandas_expert/kedro-meta-analysis.html</guid>
  <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Being Python Expert</title>
  <link>https://noklam.github.io/blog/posts/2022-11-10-python-expert/python-expert-decorator-generator-contextmanager.html</link>
  <description><![CDATA[ 



<div class="quarto-video ratio ratio-16x9"><iframe src="https://www.youtube.com/embed/cKPlPJyQrt4" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>This presentation introduce three concepts, <code>decorator</code>, <code>generator</code> and <code>contextmanager</code>. The presenter explains that Python is a Protocol oriented langauge brilliantly and put these three concepts together to illustrate a story. Ultimately, being a Python expert doesn’t mean that you write advance syntax, but using these pattern wisely with simple code. These three concepts both serves its own puprose and are orthogonal to each other, yet working nicely when they are composed together.</p>
<section id="meet-the-python-data-model" class="level2">
<h2 class="anchored" data-anchor-id="meet-the-python-data-model">Meet the Python Data Model</h2>
<p>With python, there are almost always a lower level <code>__</code> method corresponds to a higher-level function/syntax. It’s useful to change these behavior and understand how the Python Data Model work. You can find all the dunder <code>__</code> method here. https://docs.python.org/3/reference/datamodel.html</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"> x <span class="op" style="color: #5E5E5E;">+</span> y   <span class="op" style="color: #5E5E5E;">--&gt;</span> <span class="fu" style="color: #4758AB;">__add__</span></span>
<span id="cb1-2"> <span class="bu" style="color: null;">repr</span>(s) <span class="op" style="color: #5E5E5E;">--&gt;</span> <span class="fu" style="color: #4758AB;">__repr__</span></span>
<span id="cb1-3"> x()     <span class="op" style="color: #5E5E5E;">--&gt;</span> <span class="fu" style="color: #4758AB;">__call__</span></span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">## Metaclasses</span></span>
<span id="cb2-2">`metaclass` exists to allow library code works nicely <span class="cf" style="color: #003B4F;">with</span> user code. For example, how can a library author ensure that its user will follow its protocol <span class="kw" style="color: #003B4F;">and</span> <span class="kw" style="color: #003B4F;">not</span> using it wrongly? Again you can dive into `__new__` <span class="cf" style="color: #003B4F;">for</span> ensuring that. In practice, the code <span class="kw" style="color: #003B4F;">is</span> already written <span class="cf" style="color: #003B4F;">for</span> `abc` <span class="kw" style="color: #003B4F;">and</span> people use `<span class="op" style="color: #5E5E5E;">@</span>abstractmethod` `abc.ABCMeta`</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Meet the `__builtins__` library</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;">import</span> builtins</span>
<span id="cb3-3">__build_class__</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">class</span> Nok:</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">Nok() <span class="co" style="color: #5E5E5E;"># This is possible because class is a Python keyword</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;"># You can actually construct a class with a function.</span></span>
<span id="cb3-11">builtins.__build_class__(<span class="st" style="color: #20794D;">"Nok"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: __build_class__: not enough arguments</code></pre>
</div>
</div>
</section>
<section id="generator" class="level2">
<h2 class="anchored" data-anchor-id="generator">Generator</h2>
<ul>
<li>Eager vs Lazy</li>
<li>Process when data comes - memory efficient and no wait.</li>
<li><code>yield</code> control - interleaving. Idea of executing some code, then passing the output back to user, do something and continue.</li>
</ul>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> temptable(cur):</span>
<span id="cb5-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Create Table"</span>)</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;">yield</span></span>
<span id="cb5-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Drop Table"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;">class</span> T:</span>
<span id="cb5-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__enter__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-9">        <span class="va" style="color: #111111;">self</span>.gen <span class="op" style="color: #5E5E5E;">=</span> temptable(<span class="st" style="color: #20794D;">"123"</span>)</span>
<span id="cb5-10">        <span class="bu" style="color: null;">next</span>(<span class="va" style="color: #111111;">self</span>.gen)</span>
<span id="cb5-11">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__exit__</span>(<span class="va" style="color: #111111;">self</span>, <span class="op" style="color: #5E5E5E;">*</span>args):</span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">next</span>(<span class="va" style="color: #111111;">self</span>.gen, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;">with</span> T():</span>
<span id="cb5-17">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Finish"</span>)</span>
<span id="cb5-18"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Create Table
Finish
Drop Table</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2022-11-10-python-expert/python-expert-decorator-generator-contextmanager.html</guid>
  <pubDate>Thu, 10 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Advance Kedro Series - Digging into Dataset Memory Management and CacheDataSet</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/posts/2021-07-02-kedro-datacatalog.html</link>
  <description><![CDATA[ 



<p>Today I am gonna explain some <code>kedro</code> internals to understnad how kedor manage your dataset. If you always write imperative python code, you may find that writing <code>nodes</code> and <code>pipeline</code> is a little bti awkward. They may seems less intuitive, however, it also enable some interesting featrue.</p>
<p>This article assumes you have basic understanding of <code>kedro</code>, I will focus on <code>CacheDataSet</code> and the auto-release dataset feature of kedro pipeline. It is useful to reduce your memory footprint without encountering the infamous <strong>Out of Memory (OOM)</strong> issue.</p>
<p>To start with, we have the default iris dataset. Normally we would do it in a YAML file, but to make things easier in Notebook, I’ll keep everything compact in a notebook.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> kedro</span>
<span id="cb1-2">kedro.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>'0.17.4'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> kedro.io <span class="im" style="color: #00769E;">import</span> DataCatalog, MemoryDataSet, CachedDataSet</span>
<span id="cb3-2"><span class="im" style="color: #00769E;">from</span> kedro.extras.datasets.pandas <span class="im" style="color: #00769E;">import</span> CSVDataSet</span>
<span id="cb3-3"><span class="im" style="color: #00769E;">from</span> kedro.pipeline <span class="im" style="color: #00769E;">import</span> node, Pipeline</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">from</span> kedro.runner <span class="im" style="color: #00769E;">import</span> SequentialRunner</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Prepare a data catalog</span></span>
<span id="cb3-7">data_catalog <span class="op" style="color: #5E5E5E;">=</span> DataCatalog({<span class="st" style="color: #20794D;">"iris"</span>: CSVDataSet(<span class="st" style="color: #20794D;">'data/01_raw/iris.csv'</span>)})</span></code></pre></div>
</div>
<p>Next, we have a pipeline follows this execution order: <strong>A -&gt; B -&gt; C</strong></p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> kedro.pipeline <span class="im" style="color: #00769E;">import</span> Pipeline, node</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">def</span> A(df):</span>
<span id="cb4-6">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Loading the Iris Dataset'</span>)</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'Step1'</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;">def</span> B(dummy):</span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'Step2'</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;">def</span> C(dummy):</span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'Step3'</span></span>
<span id="cb4-16"></span>
<span id="cb4-17"></span>
<span id="cb4-18">pipeline <span class="op" style="color: #5E5E5E;">=</span> Pipeline([node(A, <span class="st" style="color: #20794D;">"iris"</span>, <span class="st" style="color: #20794D;">"A"</span>),</span>
<span id="cb4-19">                     node(B, <span class="st" style="color: #20794D;">"A"</span>, <span class="st" style="color: #20794D;">"B"</span>),</span>
<span id="cb4-20">                     node(C, <span class="st" style="color: #20794D;">"B"</span>, <span class="st" style="color: #20794D;">"C"</span>),</span>
<span id="cb4-21">                    ])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\ipykernel\ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.
  and should_run_async(code)</code></pre>
</div>
</div>
<p>To zoom in to the pipeline, we can use <code>Hook</code> to print out the catalog after every node’s run.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">from</span> kedro.framework.hooks <span class="im" style="color: #00769E;">import</span> hook_impl</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">from</span> kedro.framework.hooks <span class="im" style="color: #00769E;">import</span> get_hook_manager</span>
<span id="cb6-3"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">def</span> apply_dict(d):</span>
<span id="cb6-6">    new_dict <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;">for</span> k, v <span class="kw" style="color: #003B4F;">in</span> d.items():</span>
<span id="cb6-8">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(v, CachedDataSet):</span>
<span id="cb6-9">            <span class="cf" style="color: #003B4F;">if</span> v._cache.exists():</span>
<span id="cb6-10">                <span class="bu" style="color: null;">print</span>(v._cache._data)</span>
<span id="cb6-11">                new_dict[k] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'In Memory'</span></span>
<span id="cb6-12">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-13">                new_dict[k] <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Cache Deleted'</span></span>
<span id="cb6-14">        <span class="cf" style="color: #003B4F;">elif</span> v.exists():</span>
<span id="cb6-15">            new_dict[k] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'In Memory'</span></span>
<span id="cb6-16">    <span class="cf" style="color: #003B4F;">return</span> new_dict</span>
<span id="cb6-17"></span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="kw" style="color: #003B4F;">class</span> DebugHook:</span>
<span id="cb6-20">    <span class="co" style="color: #5E5E5E;">"""A hook class for creating a post mortem debugging with the PDB debugger</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;">    whenever an error is triggered within a pipeline. The local scope from when the</span></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;">    exception occured is available within this debugging session.</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb6-24">    <span class="at" style="color: #657422;">@hook_impl</span></span>
<span id="cb6-25">    <span class="kw" style="color: #003B4F;">def</span> after_node_run(<span class="va" style="color: #111111;">self</span>, node, catalog):</span>
<span id="cb6-26">        <span class="co" style="color: #5E5E5E;"># adding extra behaviour to a single node</span></span>
<span id="cb6-27">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Finish node </span><span class="sc" style="color: #5E5E5E;">{</span>node<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb6-28">        pprint(<span class="ss" style="color: #20794D;">f"Print Catalog </span><span class="sc" style="color: #5E5E5E;">{</span>apply_dict(catalog._data_sets)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb6-29"><span class="co" style="color: #5E5E5E;">#         pprint(f"Print Catalog {apply_dict2(lambda x:x.exists(), catalog._data_sets)}")</span></span>
<span id="cb6-30">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"*****************************"</span>)</span>
<span id="cb6-31">        </span>
<span id="cb6-32">hook_manager <span class="op" style="color: #5E5E5E;">=</span> get_hook_manager()</span>
<span id="cb6-33">debug_hook <span class="op" style="color: #5E5E5E;">=</span> hook_manager.register(DebugHook())<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>This hook will print out dataset that exist in data catalog. It is a bit tricky because <code>kedro</code> did not delete the dataset, it marked the underlying data as <code>_EMPTY</code> object instead.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Create a runner to run the pipeline</span></span>
<span id="cb7-2">runner <span class="op" style="color: #5E5E5E;">=</span> SequentialRunner()</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># Run the pipeline</span></span>
<span id="cb7-5">runner.run(pipeline, data_catalog)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading the Iris Dataset
Finish node A([iris]) -&gt; [A]
"Print Catalog {'iris': 'In Memory'}"
*****************************
Finish node B([A]) -&gt; [B]
"Print Catalog {'iris': 'In Memory', 'A': 'In Memory'}"
*****************************
Finish node C([B]) -&gt; [C]
"Print Catalog {'iris': 'In Memory', 'B': 'In Memory'}"
*****************************</code></pre>
</div>
</div>
<p>Let’s have a look at what happened when a <code>SequentialRunner</code> runs a pipeline.</p>
<p>It is interesting to note that <code>kedro</code> takes a similar approach to <code>Python</code>, it uses <code>reference counting</code> to control the dataset life cycle. If you are interested, I have another post to dive into <a href="https://noklam.github.io/blog/python-internal/2021/05/29/Python-Internal-Series-Python-GIL-And-Memory.html">Python Memory Management</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">            <span class="co" style="color: #5E5E5E;"># decrement load counts and release any data sets we've finished with</span></span>
<span id="cb9-2">            <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.inputs:</span>
<span id="cb9-3">                load_counts[data_set] <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb9-4">                <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.inputs():</span>
<span id="cb9-5">                    catalog.release(data_set)</span>
<span id="cb9-6">            <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.outputs:</span>
<span id="cb9-7">                <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.outputs():</span>
<span id="cb9-8">                    catalog.release(data_set)</span></code></pre></div>
<section id="cachedataset" class="level1">
<h1>CacheDataSet</h1>
<p>What does <code>release</code> do? It will remove the underlying data if this data is stored in memory.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># In CSVDataSet</span></span>
<span id="cb10-2">https:<span class="op" style="color: #5E5E5E;">//</span>github.com<span class="op" style="color: #5E5E5E;">/</span>quantumblacklabs<span class="op" style="color: #5E5E5E;">/</span>kedro<span class="op" style="color: #5E5E5E;">/</span>blob<span class="op" style="color: #5E5E5E;">/</span>master<span class="op" style="color: #5E5E5E;">/</span>kedro<span class="op" style="color: #5E5E5E;">/</span>extras<span class="op" style="color: #5E5E5E;">/</span>datasets<span class="op" style="color: #5E5E5E;">/</span>pandas<span class="op" style="color: #5E5E5E;">/</span>csv_dataset.py<span class="co" style="color: #5E5E5E;">#L176-L178</span></span>
<span id="cb10-3">```python</span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">def</span> _release(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb10-5">    <span class="bu" style="color: null;">super</span>()._release()</span>
<span id="cb10-6">    <span class="va" style="color: #111111;">self</span>._invalidate_cache()</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># In CacheDataSet</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;">def</span> _release(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb11-3">    <span class="va" style="color: #111111;">self</span>._cache.release()</span>
<span id="cb11-4">    <span class="va" style="color: #111111;">self</span>._dataset.release()</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># In MemoryDataSet</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;">def</span> _release(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb12-3">    <span class="va" style="color: #111111;">self</span>._data <span class="op" style="color: #5E5E5E;">=</span> _EMPTY</span></code></pre></div>
<p>First, we can test if it works as expected.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">d <span class="op" style="color: #5E5E5E;">=</span> CachedDataSet(CSVDataSet(<span class="st" style="color: #20794D;">'data/01_raw/iris.csv'</span>))</span>
<span id="cb13-2">d.load()</span>
<span id="cb13-3">d._cache._data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sepal_length</th>
      <th>sepal_width</th>
      <th>petal_length</th>
      <th>petal_width</th>
      <th>species</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5.1</td>
      <td>3.5</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4.9</td>
      <td>3.0</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>2</th>
      <td>4.7</td>
      <td>3.2</td>
      <td>1.3</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.6</td>
      <td>3.1</td>
      <td>1.5</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5.0</td>
      <td>3.6</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">d.exists()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\ipykernel\ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.
  and should_run_async(code)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">d.release()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">d._cache.exists()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>False</code></pre>
</div>
</div>
<p>This is the expected behavior, where the cache should be released. However, it seems not to be the case when I run the pipeline.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">data_catalog <span class="op" style="color: #5E5E5E;">=</span> DataCatalog({<span class="st" style="color: #20794D;">"iris"</span>: CachedDataSet(CSVDataSet(<span class="st" style="color: #20794D;">'data/01_raw/iris.csv'</span>))})</span>
<span id="cb20-2">runner.run(pipeline, data_catalog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading the Iris Dataset
Finish node A([iris]) -&gt; [A]
     sepal_length  sepal_width  petal_length  petal_width    species
0             5.1          3.5           1.4          0.2     setosa
1             4.9          3.0           1.4          0.2     setosa
2             4.7          3.2           1.3          0.2     setosa
3             4.6          3.1           1.5          0.2     setosa
4             5.0          3.6           1.4          0.2     setosa
..            ...          ...           ...          ...        ...
145           6.7          3.0           5.2          2.3  virginica
146           6.3          2.5           5.0          1.9  virginica
147           6.5          3.0           5.2          2.0  virginica
148           6.2          3.4           5.4          2.3  virginica
149           5.9          3.0           5.1          1.8  virginica

[150 rows x 5 columns]
"Print Catalog {'iris': 'In Memory'}"
*****************************
Finish node B([A]) -&gt; [B]
     sepal_length  sepal_width  petal_length  petal_width    species
0             5.1          3.5           1.4          0.2     setosa
1             4.9          3.0           1.4          0.2     setosa
2             4.7          3.2           1.3          0.2     setosa
3             4.6          3.1           1.5          0.2     setosa
4             5.0          3.6           1.4          0.2     setosa
..            ...          ...           ...          ...        ...
145           6.7          3.0           5.2          2.3  virginica
146           6.3          2.5           5.0          1.9  virginica
147           6.5          3.0           5.2          2.0  virginica
148           6.2          3.4           5.4          2.3  virginica
149           5.9          3.0           5.1          1.8  virginica

[150 rows x 5 columns]
"Print Catalog {'iris': 'In Memory', 'A': 'In Memory'}"
*****************************
Finish node C([B]) -&gt; [C]
     sepal_length  sepal_width  petal_length  petal_width    species
0             5.1          3.5           1.4          0.2     setosa
1             4.9          3.0           1.4          0.2     setosa
2             4.7          3.2           1.3          0.2     setosa
3             4.6          3.1           1.5          0.2     setosa
4             5.0          3.6           1.4          0.2     setosa
..            ...          ...           ...          ...        ...
145           6.7          3.0           5.2          2.3  virginica
146           6.3          2.5           5.0          1.9  virginica
147           6.5          3.0           5.2          2.0  virginica
148           6.2          3.4           5.4          2.3  virginica
149           5.9          3.0           5.1          1.8  virginica

[150 rows x 5 columns]
"Print Catalog {'iris': 'In Memory', 'B': 'In Memory'}"
*****************************</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'C': 'Step3'}</code></pre>
</div>
</div>
<p>The dataset is persisted throughout the entire pipeline, why? We can monkey patch the <code>SequentialRunner</code> to check why is this happening.</p>
</section>
<section id="a-potential-bug-or-undesired-beahvior" class="level1">
<h1>A potential bug or undesired beahvior?</h1>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> Counter</span>
<span id="cb23-2"><span class="im" style="color: #00769E;">from</span> itertools <span class="im" style="color: #00769E;">import</span> chain</span>
<span id="cb23-3"><span class="im" style="color: #00769E;">from</span> kedro.runner.runner <span class="im" style="color: #00769E;">import</span> AbstractRunner, run_node</span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="kw" style="color: #003B4F;">def</span> _run(</span>
<span id="cb23-6">    <span class="va" style="color: #111111;">self</span>, pipeline, catalog, run_id <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb23-7">) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb23-8">    <span class="co" style="color: #5E5E5E;">"""The method implementing sequential pipeline running.</span></span>
<span id="cb23-9"></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;">        pipeline: The ``Pipeline`` to run.</span></span>
<span id="cb23-12"><span class="co" style="color: #5E5E5E;">        catalog: The ``DataCatalog`` from which to fetch data.</span></span>
<span id="cb23-13"><span class="co" style="color: #5E5E5E;">        run_id: The id of the run.</span></span>
<span id="cb23-14"></span>
<span id="cb23-15"><span class="co" style="color: #5E5E5E;">    Raises:</span></span>
<span id="cb23-16"><span class="co" style="color: #5E5E5E;">        Exception: in case of any downstream node failure.</span></span>
<span id="cb23-17"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb23-18">    nodes <span class="op" style="color: #5E5E5E;">=</span> pipeline.nodes</span>
<span id="cb23-19">    done_nodes <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>()</span>
<span id="cb23-20"></span>
<span id="cb23-21">    load_counts <span class="op" style="color: #5E5E5E;">=</span> Counter(chain.from_iterable(n.inputs <span class="cf" style="color: #003B4F;">for</span> n <span class="kw" style="color: #003B4F;">in</span> nodes))</span>
<span id="cb23-22"></span>
<span id="cb23-23">    <span class="cf" style="color: #003B4F;">for</span> exec_index, node <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(nodes):</span>
<span id="cb23-24">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb23-25">            run_node(node, catalog, <span class="va" style="color: #111111;">self</span>._is_async, run_id)</span>
<span id="cb23-26">            done_nodes.add(node)</span>
<span id="cb23-27">        <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">Exception</span>:</span>
<span id="cb23-28">            <span class="va" style="color: #111111;">self</span>._suggest_resume_scenario(pipeline, done_nodes)</span>
<span id="cb23-29">            <span class="cf" style="color: #003B4F;">raise</span></span>
<span id="cb23-30">            </span>
<span id="cb23-31">        <span class="co" style="color: #5E5E5E;"># print load counts for every node run</span></span>
<span id="cb23-32">        pprint(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>load_counts<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb23-33">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"pipeline input: "</span>, pipeline.inputs())</span>
<span id="cb23-34">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"pipeline output: "</span>, pipeline.outputs())</span>
<span id="cb23-35"></span>
<span id="cb23-36">        <span class="co" style="color: #5E5E5E;"># decrement load counts and release any data sets we've finished with</span></span>
<span id="cb23-37">        <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.inputs:</span>
<span id="cb23-38">            load_counts[data_set] <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb23-39">            <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.inputs():</span>
<span id="cb23-40">                catalog.release(data_set)</span>
<span id="cb23-41">        <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.outputs:</span>
<span id="cb23-42">            <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.outputs():</span>
<span id="cb23-43">                catalog.release(data_set)</span>
<span id="cb23-44"></span>
<span id="cb23-45">        <span class="va" style="color: #111111;">self</span>._logger.info(</span>
<span id="cb23-46">            <span class="st" style="color: #20794D;">"Completed </span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> out of </span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> tasks"</span>, exec_index <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="bu" style="color: null;">len</span>(nodes)</span>
<span id="cb23-47">        )</span>
<span id="cb23-48">        </span>
<span id="cb23-49">SequentialRunner._run <span class="op" style="color: #5E5E5E;">=</span> _run</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\ipykernel\ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.
  and should_run_async(code)</code></pre>
</div>
</div>
<p>Now we re-run the pipeline. Let’s reset the hook to only print related information.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;">class</span> PrintHook:</span>
<span id="cb25-2">    <span class="at" style="color: #657422;">@hook_impl</span></span>
<span id="cb25-3">    <span class="kw" style="color: #003B4F;">def</span> after_node_run(<span class="va" style="color: #111111;">self</span>, node, catalog):</span>
<span id="cb25-4">        <span class="co" style="color: #5E5E5E;"># adding extra behaviour to a single node</span></span>
<span id="cb25-5">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Finish node </span><span class="sc" style="color: #5E5E5E;">{</span>node<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb25-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"*****************************"</span>)</span>
<span id="cb25-7">        </span>
<span id="cb25-8"></span>
<span id="cb25-9">hook_manager.set_blocked(debug_hook)<span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;"># I tried hook_manger.unregister(), but it is not working.</span></span>
<span id="cb25-10">print_hook <span class="op" style="color: #5E5E5E;">=</span> hook_manager.register(PrintHook())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Create a runner to run the pipeline</span></span>
<span id="cb26-2">runner <span class="op" style="color: #5E5E5E;">=</span> SequentialRunner()</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;"># Run the pipeline</span></span>
<span id="cb26-5">runner.run(pipeline, data_catalog)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading the Iris Dataset
Finish node A([iris]) -&gt; [A]
*****************************
"Counter({'iris': 1, 'A': 1, 'B': 1})"
pipeline input:  {'iris'}
pipeline output:  {'C'}
Finish node B([A]) -&gt; [B]
*****************************
"Counter({'A': 1, 'B': 1, 'iris': 0})"
pipeline input:  {'iris'}
pipeline output:  {'C'}
Finish node C([B]) -&gt; [C]
*****************************
"Counter({'B': 1, 'iris': 0, 'A': 0})"
pipeline input:  {'iris'}
pipeline output:  {'C'}</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>So the reason why the iris data is kept becasue it is always in <code>pipeline.inputs()</code>, which I think is not what we wanted.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/2021-07-02-kedro-datacatalog.html</guid>
  <pubDate>Thu, 01 Jul 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Jupyter Superpower - Extend SQL analysis with Python</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/posts/2021-06-26-jupyter-sql-notebook.html</link>
  <description><![CDATA[ 



<p>If you have ever written SQL queries to extract data from a database, chances are you are familiar with an IDE like the screenshot below. The IDE offers features like auto-completion, visualize the query output, display the table schema and the ER diagram. Whenever you need to write a query, this is your go-to tool. However, you may want to add <code>Jupyter Notebook</code> into your toolkit. It improves my productivity by complementing some missing features in IDE.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/posts/images/reviewnb/dbeaver.png" title="Screenshot of a typical IDE (DBeaver)" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Dbeaver</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># !pip install ipython_sql</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">%</span>load_ext sql</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">%</span>config SqlMagic.displaycon <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">%</span>config SqlMagic.feedback <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># Download the file from https://github.com/cwoodruff/ChinookDatabase/blob/master/Scripts/Chinook_Sqlite.sqlite</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>sql sqlite:<span class="op" style="color: #5E5E5E;">///</span>sales.sqlite.db</span>
<span id="cb1-7">    </span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb1-9">DATA_DIR <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'../_demo/sql_notebook'</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb2-2">select ProductId, Sum(Unit) <span class="im" style="color: #00769E;">from</span> Sales group by ProductId<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">

<table>
    <tbody><tr>
        <th>ProductId</th>
        <th>Sum(Unit)</th>
    </tr>
    <tr>
        <td>1</td>
        <td>210</td>
    </tr>
    <tr>
        <td>2</td>
        <td>50</td>
    </tr>
    <tr>
        <td>3</td>
        <td>30</td>
    </tr>
</tbody></table>
</div>
</div>
<section id="notebook-as-a-self-contained-report" class="level2">
<h2 class="anchored" data-anchor-id="notebook-as-a-self-contained-report">Notebook as a self-contained report</h2>
<p>As a data scientist/data analyst, you write SQL queries for ad-hoc analyses all the time. After getting the right data, you make nice-looking charts and put them in a PowerPoint and you are ready to present your findings. Unlike a well-defined ETL job, you are exploring the data and testing your hypotheses all the time. You make assumptions, which is often wrong but you only realized it after a few weeks. But all you got is a CSV that you cannot recall how it was generated in the first place.</p>
<p>Data is not stationary, why should your analysis be? I have seen many screenshots, fragmented scripts flying around in organizations. As a data scientist, I learned that you need to be cautious about what you heard. Don’t trust peoples’ words easily, verify the result! To achieve that, we need to know exactly how the data was extracted, what kind of assumptions have been made? Unfortunately, this information usually is not available. As a result, people are redoing the same analysis over and over. You will be surprised that this is very common in organizations. In fact, numbers often do not align because every department has its own definition for a given metric. It is not shared among the organization, and verbal communication is inaccurate and error-prone. It would be really nice if anyone in the organization can reproduce the same result with just a single click. Jupyter Notebook can achieve that reproducibility and keep your entire analysis (documentation, data, and code) in the same place.</p>
</section>
<section id="notebook-as-an-extension-of-ide" class="level2">
<h2 class="anchored" data-anchor-id="notebook-as-an-extension-of-ide">Notebook as an extension of IDE</h2>
<p>Writing SQL queries in a notebook gives you extra flexibility of a full programming language alongside SQL. For example:</p>
<ul>
<li>Write complex processing logic that is not easy in pure SQL</li>
<li>Create visualizations directly from SQL results without exporting to an intermediate CSV</li>
</ul>
<p>For instance, you can pipe your <code>SQL</code> query with <code>pandas</code> and then make a plot. It allows you to generate analysis with richer content. If you find bugs in your code, you can modify the code and re-run the analysis. This reduces the hustles to reproduce an analysis greatly. In contrast, if your analysis is reading data from an anonymous exported CSV, it is almost guaranteed that the definition of the data will be lost. No one will be able to reproduce the dataset.</p>
<p>You can make use of the <code>ipython_sql</code> library to make queries in a notebook. To do this, you need to use the <strong>magic</strong> function with the inline magic <code>%</code> or cell magic <code>%%</code>.</p>
<div class="cell" data-scrolled="true" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">sales <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sql SELECT <span class="op" style="color: #5E5E5E;">*</span> <span class="im" style="color: #00769E;">from</span> sales LIMIT <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb3-2">sales</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<table>
    <tbody><tr>
        <th>ProductId</th>
        <th>Unit</th>
        <th>IsDeleted</th>
    </tr>
    <tr>
        <td>1</td>
        <td>10</td>
        <td>1</td>
    </tr>
    <tr>
        <td>1</td>
        <td>10</td>
        <td>1</td>
    </tr>
    <tr>
        <td>2</td>
        <td>10</td>
        <td>0</td>
    </tr>
</tbody></table>
</div>
</div>
<p>To make it fancier, you can even parameterize your query with variables. Tools like <a href="https://www.bing.com/search?q=github+paramter+notebook&amp;cvid=5b17218ec803438fb1ca41212d53d90a&amp;FORM=ANAB01&amp;PC=U531">papermill</a> allows you to parameterize your notebook. If you execute the notebook regularly with a scheduler, you can get a updated dashboard. To reference the python variable, the <code>$</code> sign is used.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">table <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"sales"</span></span>
<span id="cb4-2">query <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"SELECT * from </span><span class="sc" style="color: #5E5E5E;">{</span>table<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> LIMIT 3"</span></span>
<span id="cb4-3">sales <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sql $query</span>
<span id="cb4-4">sales</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<table>
    <tbody><tr>
        <th>ProductId</th>
        <th>Unit</th>
        <th>IsDeleted</th>
    </tr>
    <tr>
        <td>1</td>
        <td>10</td>
        <td>1</td>
    </tr>
    <tr>
        <td>1</td>
        <td>10</td>
        <td>1</td>
    </tr>
    <tr>
        <td>2</td>
        <td>10</td>
        <td>0</td>
    </tr>
</tbody></table>
</div>
</div>
<p>With a little bit of python code, you can make a nice plot to summarize your finding. You can even make an interactive plot if you want. This is a very powerful way to extend your analysis.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb5-2">sales <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sql SELECT <span class="op" style="color: #5E5E5E;">*</span> FROM SALES</span>
<span id="cb5-3">sales_df <span class="op" style="color: #5E5E5E;">=</span> sales.DataFrame()</span>
<span id="cb5-4">sales_df <span class="op" style="color: #5E5E5E;">=</span> sales_df.groupby(<span class="st" style="color: #20794D;">'ProductId'</span>, as_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb5-5">ax <span class="op" style="color: #5E5E5E;">=</span> sns.barplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ProductId'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Unit'</span>, data<span class="op" style="color: #5E5E5E;">=</span>sales_df)</span>
<span id="cb5-6">ax.set_title(<span class="st" style="color: #20794D;">'Sales by ProductId'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2021-06-26-Jupyter-SQL-Notebook_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="notebook-as-a-collaboration-tool" class="level2">
<h2 class="anchored" data-anchor-id="notebook-as-a-collaboration-tool">Notebook as a collaboration tool</h2>
<p>Jupyter Notebook is flexible and it fits extremely well with exploratory data analysis. To share to a non-coder, you can share the notebook or export it as an HTML file. They can read the report or any cached executed result. If they need to verify the data or add some extra plots, they can do it easily themselves.</p>
<p>It is true that Jupyter Notebook has an infamous reputation. It is not friendly to version control, it’s hard to collaborate with notebooks. Luckily, there are efforts that make collaboration in notebook a lot easier now.</p>
<p>Here what I did not show you is that the table has an <code>isDeleted</code> column. Some of the records are invalid and we should exclude them. In reality, this happens frequently when you are dealing with hundreds of tables that you are not familiar with. These tables are made for applications, transactions, and they do not have analytic in mind. Data Analytic is usually an afterthought. Therefore, you need to consult the SME or the maintainer of that tables. It takes many iterations to get the correct data that can be used to produce useful insight.</p>
<p>With <a href="https://www.reviewnb.com/">ReviewNB</a>, you can publish your result and invite some domain expert to review your analysis. This is where notebook shine, this kind of workflow is not possible with just the SQL script or a screenshot of your finding. The notebook itself is a useful documentation and collaboration tool.</p>
<section id="step-1---review-pr-online" class="level3">
<h3 class="anchored" data-anchor-id="step-1---review-pr-online">Step 1 - Review PR online</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/posts/images/reviewnb/step_1.png" title="Start a discussion on a cell block, the analyst suggest to add a filter to slice the correct data" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Step1</figcaption><p></p>
</figure>
</div>
<p>You can view your notebook and add comments on a particular cell on <a href="https://www.reviewnb.com/">ReviewNB</a>. This lowers the technical barrier as your analysts do not have to understand Git. He can review changes and make comments on the web without the need to pull code at all. As soon as your analyst makes a suggestion, you can make changes.</p>
</section>
<section id="step-2---review-changes" class="level3">
<h3 class="anchored" data-anchor-id="step-2---review-changes">Step 2 - Review Changes</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/posts/images/reviewnb/step_2.png" title="Review changes side by side" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Step2</figcaption><p></p>
</figure>
</div>
<p>Once you have made changes to the notebook, you can review it side by side. This is very trivial to do it in your local machine. Without ReviewNB, you have to pull both notebooks separately. As Git tracks line-level changes, you can’t really read the changes as it consists of a lot of confusing noise. It would also be impossible to view changes about the chart with git.</p>
</section>
<section id="step-3---resolve-discussion" class="level3">
<h3 class="anchored" data-anchor-id="step-3---resolve-discussion">Step 3 - Resolve Discussion</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/posts/images/reviewnb/step_3.png" title="Resolve the discussion." class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Step3</figcaption><p></p>
</figure>
</div>
<p>Once the changes are reviewed, you can resolve the discussion and share your insight with the team. You can publish the notebook to internal sharing platform like <a href="https://github.com/airbnb/knowledge-repo">knowledge-repo</a> to organize the analysis.</p>
<p>I hope this convince you that Notebook is a good choice for adhoc analytics. It is possible to collaborate with notebook with proper software in place. Regarless if you use notebook or not, you should try your best to document the process. Let’s make more reproducible analyses!</p>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>reviewnb</category>
  <category>sql</category>
  <guid>https://noklam.github.io/blog/posts/2021-06-26-jupyter-sql-notebook.html</guid>
  <pubDate>Fri, 25 Jun 2021 23:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/posts/images/reviewnb/dbeaver.png " medium="image"/>
</item>
<item>
  <title>deepcopy, LGBM and pickle</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/posts/2021-03-19-deepcopy-lightgbm-and-🥒pickles.html</link>
  <description><![CDATA[ 



<p>To start with, let’s look at some code to get some context.</p>
<section id="deepcopy-or-no-copy" class="level2">
<h2 class="anchored" data-anchor-id="deepcopy-or-no-copy">deepcopy or no copy?</h2>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> lightgbm <span class="im" style="color: #00769E;">as</span> lgb</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> copy <span class="im" style="color: #00769E;">import</span> deepcopy</span>
<span id="cb1-5"></span>
<span id="cb1-6">params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb1-7"><span class="st" style="color: #20794D;">'objective'</span>: <span class="st" style="color: #20794D;">'regression'</span>,</span>
<span id="cb1-8"><span class="st" style="color: #20794D;">'verbose'</span>: <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-9"><span class="st" style="color: #20794D;">'num_leaves'</span>: <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb1-10">}</span>
<span id="cb1-11"></span>
<span id="cb1-12">X <span class="op" style="color: #5E5E5E;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-13">Y <span class="op" style="color: #5E5E5E;">=</span> np.ravel(np.random.rand(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb1-14">lgbm <span class="op" style="color: #5E5E5E;">=</span> lgb.train(params, lgb.Dataset(X,label<span class="op" style="color: #5E5E5E;">=</span>Y),num_boost_round<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Parameters of the model: "</span>, lgbm.params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parameters of the model:  {'objective': 'regression', 'verbose': -1, 'num_leaves': 3, 'num_iterations': 1, 'early_stopping_round': None}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">## Deep copy will missing params</span></span>
<span id="cb3-2">new_model <span class="op" style="color: #5E5E5E;">=</span> deepcopy(lgbm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finished loading model, total used 1 iterations</code></pre>
</div>
</div>
<p>You would expect <code>new_model.parameters</code> return the same dict right? Not quite.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Parameters of the copied model: "</span>, new_model.params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parameters of the copied model:  {}</code></pre>
</div>
</div>
<p>Surprise, surprise. It’s an empty dict, where did the parameters go? To dive deep into the issue, let’s have a look at the source code of <code>deepcopy</code> to understand how does it work.</p>
<p>reference: https://github.com/python/cpython/blob/e8e341993e3f80a3c456fb8e0219530c93c13151/Lib/copy.py#L128</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> deepcopy(x, memo<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, _nil<span class="op" style="color: #5E5E5E;">=</span>[]):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;">"""Deep copy operation on arbitrary Python objects.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">    See the module's __doc__ string for more info.</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">    ... <span class="co" style="color: #5E5E5E;"># skip some irrelevant code  </span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    cls <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">type</span>(x)</span>
<span id="cb7-9"></span>
<span id="cb7-10">    copier <span class="op" style="color: #5E5E5E;">=</span> _deepcopy_dispatch.get(cls)</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;">if</span> copier <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb7-12">        y <span class="op" style="color: #5E5E5E;">=</span> copier(x, memo)</span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb7-14">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">issubclass</span>(cls, <span class="bu" style="color: null;">type</span>):</span>
<span id="cb7-15">            y <span class="op" style="color: #5E5E5E;">=</span> _deepcopy_atomic(x, memo)</span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb7-17">            copier <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(x, <span class="st" style="color: #20794D;">"__deepcopy__"</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb7-18">            <span class="cf" style="color: #003B4F;">if</span> copier <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb7-19">                y <span class="op" style="color: #5E5E5E;">=</span> copier(memo)</span>
<span id="cb7-20">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb7-21">                ... <span class="co" style="color: #5E5E5E;"># skip irrelevant code</span></span>
<span id="cb7-22"></span>
<span id="cb7-23">    <span class="co" style="color: #5E5E5E;"># If is its own copy, don't memoize.</span></span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;">if</span> y <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> x:</span>
<span id="cb7-25">        memo[d] <span class="op" style="color: #5E5E5E;">=</span> y</span>
<span id="cb7-26">        _keep_alive(x, memo) <span class="co" style="color: #5E5E5E;"># Make sure x lives at least as long as d</span></span>
<span id="cb7-27">    <span class="cf" style="color: #003B4F;">return</span> y</span></code></pre></div>
<p>In particular, line 17 is what we care.<br>
<code>copier = getattr(x, "__deepcopy__", None)</code></p>
<p>If a particular class has implement the <code>__deepcopy__</code> method, <code>deepcopy</code> will try to invoke that instead of the standard copy. The following dummy class should illustrate this clearly.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">class</span> DummyClass():</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;">def</span> __deepcopy__(<span class="va" style="color: #111111;">self</span>, _):</span>
<span id="cb8-3">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Just hanging around and not copying.'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">o <span class="op" style="color: #5E5E5E;">=</span> DummyClass()</span>
<span id="cb9-2">deepcopy(o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Just hanging around and not copying.</code></pre>
</div>
</div>
<p>a lightgbm model is actually a <code>Booster</code> object and implement its own <code>__deepcopy__</code>. It only copy the model string but nothing else, this explains why <code>deepcopy(lgbm).paramters</code> is an empty dictionary.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"> <span class="kw" style="color: #003B4F;">def</span> __deepcopy__(<span class="va" style="color: #111111;">self</span>, _): </span>
<span id="cb11-2">     model_str <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.model_to_string(num_iteration<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>) </span>
<span id="cb11-3">     booster <span class="op" style="color: #5E5E5E;">=</span> Booster(model_str<span class="op" style="color: #5E5E5E;">=</span>model_str) </span>
<span id="cb11-4">     <span class="cf" style="color: #003B4F;">return</span> booster </span></code></pre></div>
<p>Reference: https://github.com/microsoft/LightGBM/blob/d6ebd063fff7ff9ed557c3f2bcacc8f9456583e6/python-package/lightgbm/basic.py#L2279-L2282</p>
<p>Okay, so why <code>lightgbm</code> need to have an custom implementation? I thought this is a bug, but turns out there are some deeper reason behind this. I created an issue on GitHub.</p>
<p>https://github.com/microsoft/LightGBM/issues/4085 Their response is &gt; Custom <strong>deepcopy</strong> is needed to make <code>Booster</code> class picklable.</p>
</section>
<section id="italian-bmt-lettuce-tomato-and-some-pickles-please" class="level2">
<h2 class="anchored" data-anchor-id="italian-bmt-lettuce-tomato-and-some-pickles-please">🥖Italian BMT, 🥬Lettuce 🍅 tomato and some 🥒pickles please</h2>
<p>What does <code>pickle</code> really is? and what makes an object <code>pickable</code>?</p>
<blockquote class="blockquote">
<p>Python Pickle is used to serialize and deserialize a python object structure. Any object on python can be pickled so that it can be saved on disk.</p>
</blockquote>
<p>Serialization roughly means translating the data in memory into a format that can be stored on disk or sent over network. It’s like ordering a chair from Ikea, they will send you a box, but not a chair.</p>
<p>The process of decomposing the chair and put it into a box is <code>serialization</code>, while putting it together is <code>deserialization</code>. With pickle terms, we called it <code>Pickling</code> and <code>Unpickling</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/posts/images/serialize.jpg" title="Putting the chair together is `deseralization`, decomposing the chair and make it packable in a box is `serialization`" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">deserialize and serialize</figcaption><p></p>
</figure>
</div>
<section id="what-is-pickle" class="level3">
<h3 class="anchored" data-anchor-id="what-is-pickle">What is Pickle</h3>
<p><code>Pickle</code> is a protocol for <strong>Python</strong>, you and either pickling a Python object to memory or to file.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;">import</span> pickle</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">d <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'a'</span>: <span class="dv" style="color: #AD0000;">1</span>}</span>
<span id="cb13-2">pickle_d <span class="op" style="color: #5E5E5E;">=</span> pickle.dumps(d)</span>
<span id="cb13-3">pickle_d</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>b'\x80\x04\x95\n\x00\x00\x00\x00\x00\x00\x00}\x94\x8c\x01a\x94K\x01s.'</code></pre>
</div>
</div>
<p>The python dict is now transfrom into a series of binary str, this string can be only understand by Python. We can also deserialize a binary string back to a python dict.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">binary_str <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">b'</span><span class="ch" style="color: #20794D;">\x80\x04\x95\n\x00\x00\x00\x00\x00\x00\x00</span><span class="st" style="color: #20794D;">}</span><span class="ch" style="color: #20794D;">\x94\x8c\x01</span><span class="st" style="color: #20794D;">a</span><span class="ch" style="color: #20794D;">\x94</span><span class="st" style="color: #20794D;">K</span><span class="ch" style="color: #20794D;">\x01</span><span class="st" style="color: #20794D;">s.'</span></span>
<span id="cb15-2">pickle.loads(binary_str)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>{'a': 1}</code></pre>
</div>
</div>
<p>Reference: https://www.python.org/dev/peps/pep-0574/#:~:text=The%20pickle%20protocol%20was%20originally%20designed%20in%201995,copying%20temporary%20data%20before%20writing%20it%20to%20disk.</p>
</section>
<section id="what-makes-something-picklable" class="level3">
<h3 class="anchored" data-anchor-id="what-makes-something-picklable">What makes something picklable</h3>
<p>Finally, we come back to our initial questions. &gt; What makes something picklable? Why lightgbm need to have <code>deepcopy</code> to make the <code>Booster</code> class picklable?</p>
<blockquote class="blockquote">
<p>What can be pickled and unpickled? The following types can be pickled:<br>
* None, True, and False<br>
* integers, floating point numbers, complex numbers<br>
* strings, bytes, bytearrays<br>
* tuples, lists, sets, and dictionaries containing only picklable objects<br>
* functions defined at the top level of a module (using def, not lambda)<br>
* built-in functions defined at the top level of a module<br>
* classes that are defined at the top level of a module</p>
</blockquote>
<p>So pretty much common datatype, functions and classes are picklable. Let’s see without <code>__deepcopy__</code>, the <code>Booster</code> class is not serializable as it claims.</p>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">import</span> lightgbm</span>
<span id="cb17-2"><span class="im" style="color: #00769E;">from</span> lightgbm <span class="im" style="color: #00769E;">import</span> Booster</span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;">del</span> Booster.__deepcopy__</span>
<span id="cb17-4"></span>
<span id="cb17-5">params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb17-6"><span class="st" style="color: #20794D;">'objective'</span>: <span class="st" style="color: #20794D;">'regression'</span>,</span>
<span id="cb17-7"><span class="st" style="color: #20794D;">'verbose'</span>: <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb17-8"><span class="st" style="color: #20794D;">'num_leaves'</span>: <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb17-9">}</span>
<span id="cb17-10"></span>
<span id="cb17-11">X <span class="op" style="color: #5E5E5E;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb17-12">Y <span class="op" style="color: #5E5E5E;">=</span> np.ravel(np.random.rand(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb17-13">lgbm <span class="op" style="color: #5E5E5E;">=</span> lgb.train(params, lgb.Dataset(X,label<span class="op" style="color: #5E5E5E;">=</span>Y),num_boost_round<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb17-14"></span>
<span id="cb17-15"></span>
<span id="cb17-16">deepcopy_lgbm <span class="op" style="color: #5E5E5E;">=</span> deepcopy(lgbm)</span>
<span id="cb17-17">lgbm.params, deepcopy_lgbm.params</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>({'objective': 'regression',
  'verbose': -1,
  'num_leaves': 3,
  'num_iterations': 1,
  'early_stopping_round': None},
 {'objective': 'regression',
  'verbose': -1,
  'num_leaves': 3,
  'num_iterations': 1,
  'early_stopping_round': None})</code></pre>
</div>
</div>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">pickle.dumps(deepcopy_lgbm) <span class="op" style="color: #5E5E5E;">==</span> pickle.dumps(lgbm)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">unpickle_model <span class="op" style="color: #5E5E5E;">=</span> pickle.loads(pickle.dumps(deepcopy_lgbm))</span>
<span id="cb21-2">unpickle_deepcopy_model <span class="op" style="color: #5E5E5E;">=</span> pickle.loads(pickle.dumps(lgbm))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">unpickle_model.params, unpickle_deepcopy_model.params</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>({'objective': 'regression',
  'verbose': -1,
  'num_leaves': 3,
  'num_iterations': 1,
  'early_stopping_round': None},
 {'objective': 'regression',
  'verbose': -1,
  'num_leaves': 3,
  'num_iterations': 1,
  'early_stopping_round': None})</code></pre>
</div>
</div>
<div class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">unpickle_model.model_to_string() <span class="op" style="color: #5E5E5E;">==</span> unpickle_deepcopy_model.model_to_string()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="82">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">unpickle_deepcopy_model.predict(X)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">
<pre><code>array([0.48439803, 0.48439803, 0.50141491, 0.48439803, 0.48439803,
       0.48439803, 0.50141491, 0.48439803, 0.48439803, 0.48439803,
       0.49029787, 0.49029787, 0.48439803, 0.48439803, 0.48439803,
       0.49029787, 0.48439803, 0.50141491, 0.50141491, 0.50141491,
       0.48439803, 0.50141491, 0.48439803, 0.49029787, 0.50141491,
       0.50141491, 0.48439803, 0.49029787, 0.49029787, 0.49029787,
       0.49029787, 0.50141491, 0.48439803, 0.50141491, 0.48439803,
       0.49029787, 0.50141491, 0.48439803, 0.48439803, 0.48439803,
       0.48439803, 0.50141491, 0.50141491, 0.48439803, 0.49029787,
       0.48439803, 0.48439803, 0.50141491, 0.48439803, 0.48439803,
       0.48439803, 0.48439803, 0.48439803, 0.48439803, 0.50141491,
       0.49029787, 0.48439803, 0.50141491, 0.49029787, 0.49029787,
       0.50141491, 0.50141491, 0.48439803, 0.50141491, 0.48439803,
       0.48439803, 0.48439803, 0.48439803, 0.50141491, 0.48439803,
       0.48439803, 0.50141491, 0.50141491, 0.49029787, 0.50141491,
       0.48439803, 0.49029787, 0.48439803, 0.48439803, 0.50141491,
       0.50141491, 0.48439803, 0.49029787, 0.48439803, 0.48439803,
       0.50141491, 0.49029787, 0.50141491, 0.50141491, 0.49029787,
       0.48439803, 0.49029787, 0.48439803, 0.48439803, 0.48439803,
       0.48439803, 0.48439803, 0.48439803, 0.50141491, 0.49029787])</code></pre>
</div>
</div>
</section>
<section id="last-word" class="level3">
<h3 class="anchored" data-anchor-id="last-word">Last Word</h3>
<p>Well…. It seems actually picklable? I may need to investigate the issue a bit more. For now, the <code>__deepcopy__</code> does not seems to be necessary.</p>
<p>I tried to dig into <code>lightgbm</code> source code and find this potential related issue. https://github.com/microsoft/LightGBM/blame/dc1bc23adf1137ef78722176e2da69f8411b1feb/python-package/lightgbm/basic.py#L2298</p>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>pickle</category>
  <category>deepcopy</category>
  <guid>https://noklam.github.io/blog/posts/2021-03-19-deepcopy-lightgbm-and-🥒pickles.html</guid>
  <pubDate>Fri, 19 Mar 2021 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/posts/images/serialize.jpg " medium="image"/>
</item>
<item>
  <title>Setting up pyodbc for Impala connection, works on both Linux and Window</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/posts/2021-03-05-pyodbc-linux.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Long story short, connect with Impala is a big headache in Windows. <code>pyhive</code>, <code>impyla</code> are both buggy. At the end, I stick with <code>pyodbc</code> as it works on both Linux and Windows, and seems to have better performance. There are not many steps, but it would be tricky if you try to Google as there are not much guide that just work out of the box</p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>First, you need to download the ODBC driver from <a href="https://www.cloudera.com/downloads/connectors/impala/odbc/2-6-11.html">Cloudera</a>.</p>
<p>Then you need to instsall the driver properly.</p>
<pre><code>dpkg -i docker/clouderaimpalaodbc_2.6.10.1010-2_amd64.deb</code></pre>
<p>Add this file to the directory /etc/odbcinst.ini, if you already have add, append this to the file.</p>
<pre><code># /etc/odbcinst.ini
[ODBC Drivers]
Cloudera Impala ODBC Driver 32-bit=Installed
Cloudera Impala ODBC Driver 64-bit=Installed
[Cloudera Impala ODBC Driver 32-bit]
Description=Cloudera Impala ODBC Driver (32-bit)
Driver=/opt/cloudera/impalaodbc/lib/32/libclouderaimpalaodbc32.so
[Cloudera Impala ODBC Driver 64-bit]
Description=Cloudera Impala ODBC Driver (64-bit)
Driver=/opt/cloudera/impalaodbc/lib/64/libclouderaimpalaodbc64.so</code></pre>
<p>Then install some additional package.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">apt-get</span> update <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">apt-get</span> <span class="at" style="color: #657422;">-y</span> install gnupg apt-transport-https</span>
<span id="cb3-2"><span class="ex" style="color: null;">apt-get</span> update <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">apt-get</span> <span class="at" style="color: #657422;">-y</span> install libssl1.0.0 unixodbc unixodbc-dev <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="va" style="color: #111111;">ACCEPT_EULA</span><span class="op" style="color: #5E5E5E;">=</span>Y <span class="ex" style="color: null;">apt-get</span> <span class="at" style="color: #657422;">-y</span> install msodbcsql17</span>
<span id="cb3-4"><span class="ex" style="color: null;">apt-get</span> install unixodbc-dev <span class="at" style="color: #657422;">-y</span></span></code></pre></div>
<p>Last, <code>pip install pyodbc</code> and have fun.</p>
<p>To read a database table, you can simply do this.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> pyodbc</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb4-3"></span>
<span id="cb4-4">conn <span class="op" style="color: #5E5E5E;">=</span> pyodbc.<span class="ex" style="color: null;">connect</span>(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb4-5"><span class="ss" style="color: #20794D;">Driver=Cloudera ODBC Driver for Impala 64-bit;</span></span>
<span id="cb4-6"><span class="ss" style="color: #20794D;">PWD=password;</span></span>
<span id="cb4-7"><span class="ss" style="color: #20794D;">UID=username;</span></span>
<span id="cb4-8"><span class="ss" style="color: #20794D;">Database=database</span></span>
<span id="cb4-9"><span class="ss" style="color: #20794D;">"""</span>)</span></code></pre></div>
<p>There are multiple way to connect, but I found using a connection string is the most straight forward solution that does not require any additional enviornment variable setup.</p>


</section>

 ]]></description>
  <category>pyodbc</category>
  <category>impala</category>
  <guid>https://noklam.github.io/blog/posts/2021-03-05-pyodbc-linux.html</guid>
  <pubDate>Fri, 05 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Kedro - pipeline for data science</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/posts/2020-12-04-kedro-pipeline.html</link>
  <description><![CDATA[ 



<section id="why-we-need-a-pipeline-tool" class="level1">
<h1>Why we need a pipeline tool</h1>
<p>Data Scientist often starts their development with a Jupyter Notebook. As the notebook grows larger, it’s inevitable to convert it to a python script. It starts with one file, then another one, and it accumulates quickly. Converting a notebook could be more than just pasting the code in a script. It involves careful thinking and refactoring.</p>
<p>A pipeline library can be helpful in a few ways: - modular pipeline, it can be executed partially. - easily run in parallel - check for loop dependecies</p>
<section id="what-is-kedro" class="level2">
<h2 class="anchored" data-anchor-id="what-is-kedro">What is Kedro</h2>
<p>Kedro is a development workflow tool that allows you to create portable data pipelines. It applies software engineering best practices to make your data science code reproducible, modular and well-documented. For example, you can easily create a template for new projects, build a documentation site, lint your code and always have an expected structure to find your config and data.</p>
<blockquote class="blockquote">
<p>Kedro is a lightweight pipeline library without need to setup infracstructure.</p>
</blockquote>
<p>In comparison to Airflow or Luigi, Kedro is much more lightweighted. It helps you to write production-ready code, and let data engineer and data scientist work together with the same code base. It also has good Jupyter support, so data scientist can still use the tool that they are familiar with.</p>
<p>Functions and Pipeline</p>
<section id="nodes" class="level3">
<h3 class="anchored" data-anchor-id="nodes">Nodes</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> split_data(data: pd.DataFrame, example_test_data_ratio: <span class="bu" style="color: null;">float</span>):</span>
<span id="cb1-2">    ...</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb1-4">        train_x<span class="op" style="color: #5E5E5E;">=</span>train_data_x,</span>
<span id="cb1-5">        train_y<span class="op" style="color: #5E5E5E;">=</span>train_data_y,</span>
<span id="cb1-6">        test_x<span class="op" style="color: #5E5E5E;">=</span>test_data_x,</span>
<span id="cb1-7">        test_y<span class="op" style="color: #5E5E5E;">=</span>test_data_y,</span>
<span id="cb1-8">    )</span></code></pre></div>
<p><code>Node</code> is the core component of kedro <code>Pipeline</code>. For example, we have a python function that split data into train/test set. A node take 4 arguments. <code>func</code>, <code>inputs</code>, <code>outputs</code>, <code>name</code>. To use this function as a node, we would write something like this.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">node(split_data, inputs<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"example_iris_data"</span>, <span class="st" style="color: #20794D;">"params:example_test_data_ratio"</span>],</span>
<span id="cb2-3">                outputs<span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb2-4">                train_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_x"</span>,</span>
<span id="cb2-5">                train_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_y"</span>,</span>
<span id="cb2-6">                test_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_x"</span>,</span>
<span id="cb2-7">                test_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_y"</span>,</span>
<span id="cb2-8">                ),</span>
<span id="cb2-9">         name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"split_data"</span>)</span></code></pre></div>
<p>It’s fairly simple, and it resemble the original function. The only significant difference is, <code>split_data</code> takes a <code>df</code> and <code>float</code>, but in our nodes, it becomes a list of strings. I will explain it in <strong>Section 3.2</strong>.</p>
</section>
<section id="pipeline" class="level3">
<h3 class="anchored" data-anchor-id="pipeline">Pipeline</h3>
<p>Pipeline is nothing more than a list of <code>Node</code>, it helps you to reuse nodes for different pipelines</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">Pipeline([ṅode(),</span>
<span id="cb3-2">         [node(),</span>
<span id="cb3-3">            ...]])</span></code></pre></div>
<p>Here is an simple <code>Pipeline</code> which does splitting data, train a model, make predictions, and report metrics.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> create_pipeline(<span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;">return</span> Pipeline(</span>
<span id="cb4-3">        [</span>
<span id="cb4-4">            node(</span>
<span id="cb4-5">                split_data,</span>
<span id="cb4-6">                [<span class="st" style="color: #20794D;">"example_iris_data"</span>, <span class="st" style="color: #20794D;">"params:example_test_data_ratio"</span>],</span>
<span id="cb4-7">                <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb4-8">                    train_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_x"</span>,</span>
<span id="cb4-9">                    train_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_y"</span>,</span>
<span id="cb4-10">                    test_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_x"</span>,</span>
<span id="cb4-11">                    test_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_y"</span>,</span>
<span id="cb4-12">                ),</span>
<span id="cb4-13">            ),</span>
<span id="cb4-14">            node(</span>
<span id="cb4-15">                train_model,</span>
<span id="cb4-16">                [<span class="st" style="color: #20794D;">"example_train_x"</span>, <span class="st" style="color: #20794D;">"example_train_y"</span>, <span class="st" style="color: #20794D;">"parameters"</span>],</span>
<span id="cb4-17">                <span class="st" style="color: #20794D;">"example_model"</span>,</span>
<span id="cb4-18">            ),</span>
<span id="cb4-19">            node(</span>
<span id="cb4-20">                predict,</span>
<span id="cb4-21">                <span class="bu" style="color: null;">dict</span>(model<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_model"</span>, test_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_x"</span>),</span>
<span id="cb4-22">                <span class="st" style="color: #20794D;">"example_predictions"</span>,</span>
<span id="cb4-23">            ),</span>
<span id="cb4-24">            node(report_accuracy, [<span class="st" style="color: #20794D;">"example_predictions"</span>, <span class="st" style="color: #20794D;">"example_test_y"</span>], <span class="va" style="color: #111111;">None</span>, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'report1'</span>),</span>
<span id="cb4-25">            node(report_accuracy, [<span class="st" style="color: #20794D;">"example_predictions"</span>, <span class="st" style="color: #20794D;">"example_test_y"</span>], <span class="va" style="color: #111111;">None</span>, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'report2'</span>),</span>
<span id="cb4-26">        ]</span>
<span id="cb4-27">    )</span></code></pre></div>
<p>You can also use <strong>node tags</strong> or writing different defined pipeline to reuse your node easily.</p>
</section>
<section id="kedro-viz" class="level3">
<h3 class="anchored" data-anchor-id="kedro-viz">Kedro Viz</h3>
<p>Internally, Kedro always form a <strong>graph</strong> for your entire pipelines, which can be visaulized with this command.</p>
<p><code>kedro viz</code></p>
<p>This starts a web server that visualizes the dependencies of your function, parameters and data,you can also filter some nodes of function with the UI.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/images/kedro_viz.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">viz</figcaption><p></p>
</figure>
</div>
</section>
<section id="kedro-run-partial-pipeline-parallel-execution" class="level3">
<h3 class="anchored" data-anchor-id="kedro-run-partial-pipeline-parallel-execution">Kedro Run, partial pipeline, parallel execution</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/posts/images/graph.jpg" title="A simple pipeline graph" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">image.png</figcaption><p></p>
</figure>
</div>
<p>You can execute your pipeline partially with this command. This with execute your pipeline from A to C except the last Node D.</p>
<p><code>kedro run --from-nodes="A, B, C"</code></p>
<p>If you pay attention to this graph, Node B and Node C has no dependency, they only depend on Node A. With kedro, you can parallelize this execution for free by using this command.</p>
<p><code>kedro run --parallel</code></p>
</section>
<section id="functional-programming" class="level3">
<h3 class="anchored" data-anchor-id="functional-programming">Functional programming</h3>
<p>Now, you have basic understand of what is <code>Node</code> and <code>Pipeline</code>, you also learnt that you can use <code>kedro run</code> command to execute your pipeline with different options. Before I jump into other <code>kedro</code> features, let me explain a bit more about <strong>functional programming</strong>. This concept is at the heart of data processing library like <code>spark</code>.</p>
<p>Functional programming, means using functions to program literally. It may sounds silly, but bear with me.</p>
<p><strong>Pure Function</strong> has these characteristics: 1. No side effect, it won’t change state outside of the function scope. 2. If you repeating running the same function with same input(argument), it should give you the same output. 3. Easy to parallel if there is no data dependency</p>
<p>Consider this simple function that add 1 to your input:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">def</span> func1(x):</span>
<span id="cb5-3">    x<span class="op" style="color: #5E5E5E;">=</span>x<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">def</span> func2(x):</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">var1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-2">var2 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"></span>
<span id="cb6-5">func1(var1) <span class="co" style="color: #5E5E5E;"># var1=2</span></span>
<span id="cb6-6">func2(var2) <span class="co" style="color: #5E5E5E;"># var2=2</span></span></code></pre></div>
<p>They both add 1 to your input, so which version is a better function?</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">func1(var1) <span class="co" style="color: #5E5E5E;"># var1=3</span></span>
<span id="cb7-2">func2(var2) <span class="co" style="color: #5E5E5E;"># var2=2    </span></span></code></pre></div>
<p>Now consider if we run this function twice. <code>func1</code> changes the result to 3, while <code>func2</code> still give you 2. I argue <code>func2</code> is better in this case.</p>
<p>Why does this matter? Or how is it going to be useful at all? Well, it makes debugging much easier. It is because you only need to debug code inside a function, not 200 lines of code before it. This greatly reduce the complexity that you have to worried about your data. This fundamental principle is what powering the pipeline, and the reason why you can just use <code>kedro run --parallel</code> to parallelize some computation.</p>
<p>It will also be easier to write test for function. <code>func1</code> is harder to test, because you need to consider all possible code path. You may end up need to write verbose test cases like this.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> test_case1():</span>
<span id="cb8-2">    func_A()</span>
<span id="cb8-3">    func_B()</span>
<span id="cb8-4">    </span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">def</span> test_case2():</span>
<span id="cb8-6">    func_A()</span>
<span id="cb8-7">    func_A()</span>
<span id="cb8-8">    func_B()</span></code></pre></div>
<p>How does using Kedro helps to achieve this? Think about <code>func1</code>, if it is written as a <code>Node</code>, it will look like this.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">Node(func1, inputs<span class="op" style="color: #5E5E5E;">=</span>var1, output<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"func1"</span>)</span></code></pre></div>
<p>Since it is a Node without any output, it will have no impact to the downstreams. In order to use that variable, you will naturally writing code looks more like <code>func2</code> instead.</p>
<p>Let’s look at one more example.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">k <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">def</span> func3(x):</span>
<span id="cb10-3">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">+</span>k</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">func3(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>20</code></pre>
</div>
</div>
<p>Now consider <code>func3</code>, it is a valid Python function. You can run it in a notebook or in a script, but it wouldn’t be possible for a Node, sinec a Node only have access to its input. It will just throw an error to you immediately.</p>
<pre class="pyton"><code>node(func3, inputs='x', outputs='some_result', name='func3')</code></pre>
<p>By writing nodes, you limit your function to only access variable within its scope. It helps to prevent a lot of bug.</p>
</section>
<section id="decompose-program-to-pipeline-is-not-just-copy-and-paste" class="level3">
<h3 class="anchored" data-anchor-id="decompose-program-to-pipeline-is-not-just-copy-and-paste">Decompose program to pipeline is not just copy and paste</h3>
<p>I hope the examples demonstrate how writing nodes help transform your code towards functional style. In reality, decoupling your functions from a programming is not straight forward.</p>
<p>Consider this example. <img src="https://noklam.github.io/blog/posts/images/nan.jpg" class="img-fluid" alt="na"></p>
<p>Look at how data <code>np.nan</code> is changed. This wouldn’t be a problem if we have one program, since we will just passing all variable in memroy, without the step that writing and reading from a file.</p>
<p>Error like these are subtle and dangerous, it may not throw error, but ruining our features quality. We have better chance to catch these error in a small program, but it would be much harder to isolate the issue if we have 1000 lines of code. The sooner you integrate it into your pipeline, the easier the integration is. In fact, we can do better. We could introduce test case for validating data, I would explain more in <strong>Section 3.5</strong>.</p>
</section>
</section>
<section id="data-catalog-paramaeters" class="level2">
<h2 class="anchored" data-anchor-id="data-catalog-paramaeters">Data Catalog &amp; Paramaeters</h2>
<p><img src="https://noklam.github.io/blog/posts/images/catalog.jpg" title="Supported integration" class="img-fluid" alt="catalog"> Data Catalog is an API for Dataset. It includes a Data Model from from raw data, feature, to reporting layer and a standard Data I/O API. It integrates with pandas, spark, SQLAlchemy and Cloud Storage.</p>
<p>To use Data Catalog, you would first need to define your dataset in the <code>catalog.yml</code>. You will have give it a <code>name</code> and <code>type</code>, denoting whether it is a SQL query or a CSV. Optionally, you can pass in any arguments that are supported from the underlying API as well.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb14-1"><span class="fu" style="color: #4758AB;">example_iris_data</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb14-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> pandas.CSVDataSet</span></span>
<span id="cb14-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">filepath</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> data/01_raw/iris.csv</span></span></code></pre></div>
<section id="connect-data-catalog-with-node" class="level3">
<h3 class="anchored" data-anchor-id="connect-data-catalog-with-node">Connect Data Catalog with Node</h3>
<p>Let’s reuse our <code>split_data</code> function. When you create a node that using the <code>split_data</code> function, you would pass in the string of the dataset instead of an actual dataframe, the Reading/Writing operation is handled by Kedro, so you don’t have to write to_csv() or read_csv() yourself.</p>
<p><code>parameters.yml</code></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb15-1"><span class="fu" style="color: #4758AB;">example_test_data_ratio</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="fl" style="color: #AD0000;">0.2</span></span></code></pre></div>
<p>A node using the <code>split_data</code> function.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">node(split_data, inputs<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"example_iris_data"</span>, <span class="st" style="color: #20794D;">"params:example_test_data_ratio"</span>],</span>
<span id="cb16-3">                outputs<span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb16-4">                train_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_x"</span>,</span>
<span id="cb16-5">                train_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_y"</span>,</span>
<span id="cb16-6">                test_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_x"</span>,</span>
<span id="cb16-7">                test_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_y"</span>,</span>
<span id="cb16-8">                ),</span>
<span id="cb16-9">         name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"split_data"</span>)</span></code></pre></div>
<p>Here the inputs “example_iris_data” is refering to a dataset defined by <code>catalog.yml</code>, kedro will load the csv for you. Same applies for <code>params:example_test_data_ratio</code>.</p>
<p>By using <code>catalog</code> and <code>parmaeters</code>, it already makes your program cleaner. You now have a single file to manager all data source, and a single file contains all parameters, which is configurable. Your functions now is parameterized, you can simply change configuration in a single file without going into every possible script to change a number.</p>
<p>Data Catalog abstract away the Data I/O logic from the data processing function.</p>
<p>It process data and write a file.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> process_data(df):</span>
<span id="cb17-2">    ... <span class="co" style="color: #5E5E5E;"># do some processing</span></span>
<span id="cb17-3">    df.to_csv(<span class="st" style="color: #20794D;">'xxx.csv'</span>)</span></code></pre></div>
<p>It only process data</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;">def</span> process_data(df):</span>
<span id="cb18-2">    ... <span class="co" style="color: #5E5E5E;">#do some processing</span></span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
<p>This applies the <strong>single-responsibility principle&nbsp;(SRP)</strong>, meaning that your function is only doing one thing at a time. There are many benefits from it, for example, it makes data versioning easier. I will explain this in <strong>Section 3.3</strong>.</p>
</section>
<section id="memory-dataset-optional-to-skip" class="level3">
<h3 class="anchored" data-anchor-id="memory-dataset-optional-to-skip">Memory Dataset (optional to skip)</h3>
<p>Remember our we pass in a string to our node, and it will look for the corresponding dataset? What if we do not define it? It could be a lot of work if we need to define everything. Besides, some variable are not needed to be written out as a file, it could just stay as in memory.</p>
<p>In fact, kedro use <code>MemroyDataset</code> by default. Which means you could simply pass in a string that is not defined, the string will be use as the name of the variable. There are more useful dataset like <code>CacheDataset</code>, you can find more details in this link.</p>
<p>https://kedro.readthedocs.io/en/stable/kedro.extras.datasets.html</p>
<p>p.s. When using kedro pipeline, you only define the node’s inputs and outputs, but you never defined the order of execution. From my experience, there are pros and cons. The benefits is, your code is less coupled, and due to this, kedro is able to execute your pipeline in parallel whenever possible to speed up your program. However, it means the order of execution is not guaranteed, this may cause unexpected effect. For example, if you are training a machine learning model, it is common to set a random seed at the beginning. Due to the randomness of execution, you may not get identical result, as the order of execution is different everytime, thus the sequence of the random number used is random too. In general this is not a big problem, but if you have a strong need to make sure you have identical output (e.g.&nbsp;regression test), it may cause some trouble and you need to use dummy input and output to force kedro run your pipeline in a specific order.</p>


</section>
</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/2020-12-04-kedro-pipeline.html</guid>
  <pubDate>Fri, 04 Dec 2020 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/posts/images/kedro_viz.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>Hong Kong Elevation map with rayshader (with R)</title>
  <link>https://noklam.github.io/blog/posts/2020-11-14-hong-kong-elevation-map-with-rayshader.html</link>
  <description><![CDATA[ 



<p>This blog is mainly reproducing the blog with different data https://www.tylermw.com/a-step-by-step-guide-to-making-3d-maps-with-satellite-imagery-in-r/. My impression is that R is doing so much better for graph compare to Python. (<code>ggplot</code> and now <code>rayshader</code> for 3D plots!)</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Two datasets was used for this images. Landset for RGB * LC08_L1TP_122044_20200218_20200225_01_T1.TIF</p>
<p>SRTM 30M resolution elevation map * n21e113.hgt * n21e114.hgt * n22e113.hgt * n22e114.hgt The USGS explorer is a very nice tool to search data.</p>
<p>I actually couldn’t find a Landsat image cover entire hong kong (some western part is missing). Further enhancement is needed for stitching together different images.</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<ol type="1">
<li>conda with R Kernel</li>
<li>Jupyter Notebook</li>
<li>fastpages</li>
<li>rayshader</li>
</ol>
<blockquote class="blockquote">
<p>Use conda install even for R Packages, I spend hours to get the environment going back and forth in Windows and Linux</p>
</blockquote>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Library</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(rayshader)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(sp)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(raster)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(scales)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">elevation1 <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/N21E113.hgt"</span>)</span>
<span id="cb2-2">elevation2 <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/N21E114.hgt"</span>)</span>
<span id="cb2-3">elevation3 <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/N22E113.hgt"</span>)</span>
<span id="cb2-4">elevation4 <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/N22E114.hgt"</span>)</span></code></pre></div>
</div>
<p>Let’s plot the elevation map. The whole image is green-ish because most of the area is ocean, so they are at sea-level. The orange color indicate a higher elevation.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">hk_elevation <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">merge</span>(elevation1,elevation2, elevation3, elevation4)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">height_shade</span>(<span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_elevation)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">plot_map</span>();</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/images/rayshader_img/elevation_map.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">elevation</figcaption><p></p>
</figure>
</div>
<p>Next, we are going to process the RGB image from Landsat-8 ,The raw jpeg look like this.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/images/rayshader_img/raw_jpg.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">raw_jpeg</figcaption><p></p>
</figure>
</div>
<p>Satellite raw images requries some preprocessing, before they look like what we expected.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">hk_r <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/LC08_L1TP_122044_20200218_20200225_01_T1_B4.TIF"</span>)</span>
<span id="cb4-2">hk_g <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/LC08_L1TP_122044_20200218_20200225_01_T1_B3.TIF"</span>)</span>
<span id="cb4-3">hk_b <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/LC08_L1TP_122044_20200218_20200225_01_T1_B2.TIF"</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6">hk_rbg_corrected <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">sqrt</span>(raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">stack</span>(hk_r, hk_g, hk_b))</span>
<span id="cb4-7">raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plotRGB</span>(hk_rbg_corrected);</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/images/rayshader_img/corrected_rgb.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">raw_corrected</figcaption><p></p>
</figure>
</div>
<p>The image is quite hazzy, which doesn’t look like the jpeg we saw earlier. We need to improve the contrast.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Since the RGB image and elevation map does not use the same coordinate system, we need to do some projections.</span></span>
<span id="cb5-2">hk_elevation_utm <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">projectRaster</span>(hk_elevation, <span class="at" style="color: #657422;">crs =</span> <span class="fu" style="color: #4758AB;">crs</span>(hk_r), <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"bilinear"</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">crs</span>(hk_elevation_utm)</span>
<span id="cb5-4"></span>
<span id="cb5-5">bottom_left <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">y=</span><span class="fl" style="color: #AD0000;">113.888</span>, <span class="at" style="color: #657422;">x=</span><span class="fl" style="color: #AD0000;">22.1365</span>)</span>
<span id="cb5-6">top_right   <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">y=</span><span class="fl" style="color: #AD0000;">114.330</span>, <span class="at" style="color: #657422;">x=</span><span class="fl" style="color: #AD0000;">22.5493</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8">extent_latlong <span class="ot" style="color: #003B4F;">=</span> sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">SpatialPoints</span>(<span class="fu" style="color: #4758AB;">rbind</span>(bottom_left, top_right), <span class="at" style="color: #657422;">proj4string=</span>sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">CRS</span>(<span class="st" style="color: #20794D;">"+proj=longlat +ellps=WGS84 +datum=WGS84"</span>))</span>
<span id="cb5-9">extent_utm <span class="ot" style="color: #003B4F;">=</span> sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spTransform</span>(extent_latlong, raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crs</span>(hk_elevation_utm))</span>
<span id="cb5-10"></span>
<span id="cb5-11">e <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">extent</span>(extent_utm)</span>
<span id="cb5-12">e</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>CRS arguments:
 +proj=utm +zone=49 +datum=WGS84 +units=m +no_defs </code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>class      : Extent 
xmin       : 797906.6 
xmax       : 842523 
ymin       : 2450766 
ymax       : 2497449 </code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">hk_rgb_cropped <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(hk_rbg_corrected, e)</span>
<span id="cb8-2">elevation_cropped <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(hk_elevation_utm, e)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;">names</span>(hk_rgb_cropped) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"r"</span>,<span class="st" style="color: #20794D;">"g"</span>,<span class="st" style="color: #20794D;">"b"</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6">hk_r_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>r)</span>
<span id="cb8-7">hk_g_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>g)</span>
<span id="cb8-8">hk_b_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>b)</span>
<span id="cb8-9"></span>
<span id="cb8-10">hkel_matrix <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(elevation_cropped)</span>
<span id="cb8-11"></span>
<span id="cb8-12">hk_rgb_array <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">array</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="at" style="color: #657422;">dim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">nrow</span>(hk_r_cropped),<span class="fu" style="color: #4758AB;">ncol</span>(hk_r_cropped),<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb8-13"></span>
<span id="cb8-14">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">=</span> hk_r_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Red layer</span></span>
<span id="cb8-15">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">=</span> hk_g_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Blue layer</span></span>
<span id="cb8-16">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">3</span>] <span class="ot" style="color: #003B4F;">=</span> hk_b_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Green layer</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">hk_rgb_array <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">aperm</span>(hk_rgb_array, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="fu" style="color: #4758AB;">plot_map</span>(hk_rgb_array)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/images/rayshader_img/hazzy_rgb.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">hazzy</figcaption><p></p>
</figure>
</div>
<p>The whole image is bright because we have some dark pixels in the corner. It’s similiar to taking images in a dark room, any light source will become a bright spot.</p>
<p>We can improve this by stretching the intensity. It’s really no different than how you fine tune your images on Instagram.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">hk_rgb_cropped <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(hk_rbg_corrected, e)</span>
<span id="cb9-2">elevation_cropped <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(hk_elevation_utm, e)</span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;"># Stretch the images</span></span>
<span id="cb9-4">hk_rgb_cropped <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb9-5">raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">stretch</span>(hk_rgb_cropped,</span>
<span id="cb9-6"><span class="at" style="color: #657422;">minq =</span> .<span class="dv" style="color: #AD0000;">01</span>,</span>
<span id="cb9-7"><span class="at" style="color: #657422;">maxq =</span> .<span class="dv" style="color: #AD0000;">999</span>,</span>
<span id="cb9-8">)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="fu" style="color: #4758AB;">names</span>(hk_rgb_cropped) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"r"</span>,<span class="st" style="color: #20794D;">"g"</span>,<span class="st" style="color: #20794D;">"b"</span>)</span>
<span id="cb9-11"></span>
<span id="cb9-12">hk_r_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>r)</span>
<span id="cb9-13">hk_g_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>g)</span>
<span id="cb9-14">hk_b_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>b)</span>
<span id="cb9-15"></span>
<span id="cb9-16">hkel_matrix <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(elevation_cropped)</span>
<span id="cb9-17"></span>
<span id="cb9-18">hk_rgb_array <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">array</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="at" style="color: #657422;">dim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">nrow</span>(hk_r_cropped),<span class="fu" style="color: #4758AB;">ncol</span>(hk_r_cropped),<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb9-19"></span>
<span id="cb9-20">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">=</span> hk_r_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Red layer</span></span>
<span id="cb9-21">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">=</span> hk_g_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Blue layer</span></span>
<span id="cb9-22">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">3</span>] <span class="ot" style="color: #003B4F;">=</span> hk_b_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Green layer</span></span>
<span id="cb9-23"></span>
<span id="cb9-24">hk_rgb_array <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">aperm</span>(hk_rgb_array, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb9-25">hk_rgb_contrast <span class="ot" style="color: #003B4F;">=</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rescale</span>(hk_rgb_array,<span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb9-26"><span class="fu" style="color: #4758AB;">plot_map</span>(hk_rgb_contrast)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/images/rayshader_img/bright_hk.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bright</figcaption><p></p>
</figure>
</div>
<p>Now we get a much better image</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">plot_3d</span>(hk_rgb_contrast, hkel_matrix, <span class="at" style="color: #657422;">windowsize =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1100</span>,<span class="dv" style="color: #AD0000;">900</span>), <span class="at" style="color: #657422;">zscale =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">shadowdepth =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb10-2">        <span class="at" style="color: #657422;">zoom=</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">phi=</span><span class="dv" style="color: #AD0000;">45</span>,<span class="at" style="color: #657422;">theta=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">15</span>,<span class="at" style="color: #657422;">fov=</span><span class="dv" style="color: #AD0000;">70</span>, <span class="at" style="color: #657422;">background =</span> <span class="st" style="color: #20794D;">"#F2E1D0"</span>, <span class="at" style="color: #657422;">shadowcolor =</span> <span class="st" style="color: #20794D;">"#523E2B"</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;">render_scalebar</span>(<span class="at" style="color: #657422;">limits=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">10</span>),<span class="at" style="color: #657422;">label_unit =</span> <span class="st" style="color: #20794D;">"km"</span>,<span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"W"</span>, <span class="at" style="color: #657422;">y=</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb10-6">                <span class="at" style="color: #657422;">scale_length =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.33</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb10-7"><span class="fu" style="color: #4758AB;">render_compass</span>(<span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"N"</span>)</span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;">render_snapshot</span>(<span class="at" style="color: #657422;">title_text =</span> <span class="st" style="color: #20794D;">"Hong Kong | Imagery: Landsat 8 | DEM: 30m SRTM"</span>,</span>
<span id="cb10-9">                <span class="at" style="color: #657422;">title_bar_color =</span> <span class="st" style="color: #20794D;">"#000000"</span>, <span class="at" style="color: #657422;">title_color =</span> <span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">title_bar_alpha =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-10">               <span class="at" style="color: #657422;">clear=</span><span class="cn" style="color: #8f5902;">TRUE</span>, )</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/images/rayshader_img/3d_hk.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">3d</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://noklam.github.io/blog/posts/2020-11-14-hong-kong-elevation-map-with-rayshader.html</guid>
  <pubDate>Sat, 14 Nov 2020 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/posts/images/rayshader_img/elevation_map.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Recreating the BBC style graphic in Python - plotnine and altair</title>
  <link>https://noklam.github.io/blog/posts/2020-04-13-recreating-the-bbc-graphs-in-python-plotnine-altair.html</link>
  <description><![CDATA[ 



<section id="todo" class="level1">
<h1>Todo</h1>
<ul class="task-list">
<li><input type="checkbox" disabled="">Missing Subtitle (plotnine)</li>
<li><input type="checkbox" disabled="">Missing Style</li>
</ul>
</section>
<section id="difference-between-plotnine-and-ggplot" class="level1">
<h1>Difference between plotnine and ggplot</h1>
<p>99% of them are the same, except that in python you have to wrap column names in <code>''</code>, otherwise it will be treated as variable and caused error. Most of the time you just need to wrap a <code>''</code> or replaced with <code>_</code> depends on the function.</p>
<p>I tried to produce the same chart with <code>plotnine</code> and <code>altair</code>, and hopefully you will see their difference. <code>plotnine</code> covers 99% of <code>ggplot2</code>, so if you are coming from R, just go ahead with <code>plotnine</code>! <code>altair</code> is another interesting visualization library that base on vega-lite, therefore it can be integrated with website easily. In addition, it can also produce interactive chart with very simple function, which is a big plus!</p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:27.079957Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:04.195733Z&quot;}" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># !pip install plotnine[all]</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># !pip install altair</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># !pip install gapminder</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> gapminder <span class="im" style="color: #00769E;">import</span> gapminder</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> plotnine.data <span class="im" style="color: #00769E;">import</span> mtcars</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> plotnine <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> plotnine <span class="im" style="color: #00769E;">import</span> ggplot, geom_point, aes, stat_smooth, facet_wrap, geom_line</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> plotnine <span class="im" style="color: #00769E;">import</span> ggplot  <span class="co" style="color: #5E5E5E;"># https://plotnine.readthedocs.io/en/stable/</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> altair <span class="im" style="color: #00769E;">as</span> alt</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">import</span> plotnine</span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Collecting plotnine[all]
  Using cached https://files.pythonhosted.org/packages/19/da/4d2f68e7436e76a3c26ccd804e1bfc5c58fca7a6cba06c71bab68b25e825/plotnine-0.6.0-py3-none-any.whl
Collecting descartes&gt;=1.1.0 (from plotnine[all])
  Using cached https://files.pythonhosted.org/packages/e5/b6/1ed2eb03989ae574584664985367ba70cd9cf8b32ee8cad0e8aaeac819f3/descartes-1.1.0-py3-none-any.whl
Requirement already satisfied: numpy&gt;=1.16.0 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from plotnine[all]) (1.16.5)
Requirement already satisfied: matplotlib&gt;=3.1.1 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from plotnine[all]) (3.1.1)
Requirement already satisfied: statsmodels&gt;=0.9.0 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from plotnine[all]) (0.10.1)
Requirement already satisfied: pandas&gt;=0.25.0 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from plotnine[all]) (1.0.3)
Requirement already satisfied: scipy&gt;=1.2.0 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from plotnine[all]) (1.3.1)
Requirement already satisfied: patsy&gt;=0.4.1 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from plotnine[all]) (0.5.1)
Collecting mizani&gt;=0.6.0 (from plotnine[all])
  Using cached https://files.pythonhosted.org/packages/e3/76/7a2c9094547ee592f9f43f651ab824aa6599af5e1456250c3f4cc162aece/mizani-0.6.0-py2.py3-none-any.whl
Requirement already satisfied: scikit-learn; extra == "all" in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from plotnine[all]) (0.22.1)
Collecting scikit-misc; extra == "all" (from plotnine[all])
  Using cached https://files.pythonhosted.org/packages/94/4c/e6c3ba02dc66278317778b5c5df7b372c6c5313fce43615a7ce7fc0b34b8/scikit_misc-0.1.1-cp37-cp37m-win_amd64.whl
Requirement already satisfied: cycler&gt;=0.10 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from matplotlib&gt;=3.1.1-&gt;plotnine[all]) (0.10.0)
Requirement already satisfied: kiwisolver&gt;=1.0.1 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from matplotlib&gt;=3.1.1-&gt;plotnine[all]) (1.1.0)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from matplotlib&gt;=3.1.1-&gt;plotnine[all]) (2.4.2)
Requirement already satisfied: python-dateutil&gt;=2.1 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from matplotlib&gt;=3.1.1-&gt;plotnine[all]) (2.8.0)
Requirement already satisfied: pytz&gt;=2017.2 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from pandas&gt;=0.25.0-&gt;plotnine[all]) (2019.3)
Requirement already satisfied: six in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from patsy&gt;=0.4.1-&gt;plotnine[all]) (1.12.0)
Requirement already satisfied: palettable in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from mizani&gt;=0.6.0-&gt;plotnine[all]) (3.3.0)
Requirement already satisfied: joblib&gt;=0.11 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from scikit-learn; extra == "all"-&gt;plotnine[all]) (0.13.2)
Requirement already satisfied: setuptools in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from kiwisolver&gt;=1.0.1-&gt;matplotlib&gt;=3.1.1-&gt;plotnine[all]) (41.4.0)
Installing collected packages: descartes, mizani, scikit-misc, plotnine
Successfully installed descartes-1.1.0 mizani-0.6.0 plotnine-0.6.0 scikit-misc-0.1.1
Requirement already satisfied: altair in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (4.1.0)
Requirement already satisfied: jinja2 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from altair) (2.10.3)
Requirement already satisfied: jsonschema in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from altair) (3.0.2)
Requirement already satisfied: entrypoints in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from altair) (0.3)
Requirement already satisfied: numpy in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from altair) (1.16.5)
Requirement already satisfied: toolz in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from altair) (0.10.0)
Requirement already satisfied: pandas&gt;=0.18 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from altair) (1.0.3)
Requirement already satisfied: MarkupSafe&gt;=0.23 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from jinja2-&gt;altair) (1.1.1)
Requirement already satisfied: pyrsistent&gt;=0.14.0 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from jsonschema-&gt;altair) (0.15.4)
Requirement already satisfied: setuptools in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from jsonschema-&gt;altair) (41.4.0)
Requirement already satisfied: six&gt;=1.11.0 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from jsonschema-&gt;altair) (1.12.0)
Requirement already satisfied: attrs&gt;=17.4.0 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from jsonschema-&gt;altair) (19.2.0)
Requirement already satisfied: pytz&gt;=2017.2 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from pandas&gt;=0.18-&gt;altair) (2019.3)
Requirement already satisfied: python-dateutil&gt;=2.6.1 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from pandas&gt;=0.18-&gt;altair) (2.8.0)
Collecting gapminder
  Downloading https://files.pythonhosted.org/packages/85/83/57293b277ac2990ea1d3d0439183da8a3466be58174f822c69b02e584863/gapminder-0.1-py3-none-any.whl
Requirement already satisfied: pandas in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from gapminder) (1.0.3)
Requirement already satisfied: numpy&gt;=1.13.3 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from pandas-&gt;gapminder) (1.16.5)
Requirement already satisfied: pytz&gt;=2017.2 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from pandas-&gt;gapminder) (2019.3)
Requirement already satisfied: python-dateutil&gt;=2.6.1 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from pandas-&gt;gapminder) (2.8.0)
Requirement already satisfied: six&gt;=1.5 in c:\users\channo.oocldm\appdata\local\continuum\anaconda3\lib\site-packages (from python-dateutil&gt;=2.6.1-&gt;pandas-&gt;gapminder) (1.12.0)
Installing collected packages: gapminder
Successfully installed gapminder-0.1</code></pre>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:27.085941Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:27.081952Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'altair version: </span><span class="sc" style="color: #5E5E5E;">{</span>alt<span class="sc" style="color: #5E5E5E;">.</span>__version__<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb3-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'plotnine version: </span><span class="sc" style="color: #5E5E5E;">{</span>plotnine<span class="sc" style="color: #5E5E5E;">.</span>__version__<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb3-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'pandas version: </span><span class="sc" style="color: #5E5E5E;">{</span>pd<span class="sc" style="color: #5E5E5E;">.</span>__version__<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>altair version: 4.1.0
plotnine version: 0.6.0
pandas version: 1.0.3</code></pre>
</div>
</div>
<section id="plotnine-example" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-example">Plotnine Example</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:27.843419Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:27.087936Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">(ggplot(mtcars, aes(<span class="st" style="color: #20794D;">'wt'</span>, <span class="st" style="color: #20794D;">'mpg'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'factor(gear)'</span>))</span>
<span id="cb5-2"> <span class="op" style="color: #5E5E5E;">+</span> geom_point()</span>
<span id="cb5-3"> <span class="op" style="color: #5E5E5E;">+</span> stat_smooth(method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lm'</span>)</span>
<span id="cb5-4"> <span class="op" style="color: #5E5E5E;">+</span> facet_wrap(<span class="st" style="color: #20794D;">'~gear'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>&lt;ggplot: (-9223371941312347920)&gt;</code></pre>
</div>
</div>
</section>
</section>
<section id="make-a-line-chart" class="level1">
<h1>Make a Line Chart</h1>
<section id="ggplot" class="level2">
<h2 class="anchored" data-anchor-id="ggplot">ggplot</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">line_df <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">filter</span>(country <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Malawi"</span>) </span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">#Make plot</span></span>
<span id="cb7-5">line <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(line_df, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"#1380A1"</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">colour=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">bbc_style</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"Living longer"</span>,</span>
<span id="cb7-10">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Life expectancy in Malawi 1952-2007"</span>)</span></code></pre></div>
</section>
<section id="plotnine" class="level2">
<h2 class="anchored" data-anchor-id="plotnine">plotnine</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:30.149237Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:29.807154Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">(ggplot(line_df, aes(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'year'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>)) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2"> geom_line(colour<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'#1380A1'</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3"> geom_hline(yintercept <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>, size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>, colour<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'#333333'</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4"> labs(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Living longer'</span>, </span>
<span id="cb8-5">     subtitle <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Life expectancy in Malawi 1952-2007'</span>)</span>
<span id="cb8-6"> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>&lt;ggplot: (-9223371941310406772)&gt;</code></pre>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:30.191125Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:30.151232Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">## altair</span></span>
<span id="cb10-2">line <span class="op" style="color: #5E5E5E;">=</span> (alt.Chart(line_df).mark_line().encode(</span>
<span id="cb10-3">x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'year'</span>,</span>
<span id="cb10-4">y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>)</span>
<span id="cb10-5">.properties(title<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'text'</span>: <span class="st" style="color: #20794D;">'Living Longer'</span>,</span>
<span id="cb10-6">                   <span class="st" style="color: #20794D;">'subtitle'</span>: <span class="st" style="color: #20794D;">'Life expectancy in Malawi 1952-2007'</span>})</span>
<span id="cb10-7">) </span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;"># hline</span></span>
<span id="cb10-10">overlay <span class="op" style="color: #5E5E5E;">=</span> overlay <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'y'</span>: [<span class="dv" style="color: #AD0000;">0</span>]})</span>
<span id="cb10-11">hline <span class="op" style="color: #5E5E5E;">=</span> alt.Chart(overlay).mark_rule(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'#333333'</span>, strokeWidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>).encode(y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y:Q'</span>)</span>
<span id="cb10-12"></span>
<span id="cb10-13">line <span class="op" style="color: #5E5E5E;">+</span> hline</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

<div id="altair-viz-08ece90fee29424da66bd2467102af16"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-08ece90fee29424da66bd2467102af16") {
      outputDiv = document.getElementById("altair-viz-08ece90fee29424da66bd2467102af16");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"data": {"name": "data-09bd37ab7bcd5f13694b463cd22b382a"}, "mark": "line", "encoding": {"x": {"type": "quantitative", "field": "year"}, "y": {"type": "quantitative", "field": "lifeExp"}}, "title": {"text": "Living Longer", "subtitle": "Life expectancy in Malawi 1952-2007"}}, {"data": {"name": "data-06fd9f850666401b4599de5588b60692"}, "mark": {"type": "rule", "color": "#333333", "strokeWidth": 3}, "encoding": {"y": {"type": "quantitative", "field": "y"}}}], "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-09bd37ab7bcd5f13694b463cd22b382a": [{"country": "Malawi", "continent": "Africa", "year": 1952, "lifeExp": 36.256, "pop": 2917802, "gdpPercap": 369.1650802}, {"country": "Malawi", "continent": "Africa", "year": 1957, "lifeExp": 37.207, "pop": 3221238, "gdpPercap": 416.36980639999996}, {"country": "Malawi", "continent": "Africa", "year": 1962, "lifeExp": 38.41, "pop": 3628608, "gdpPercap": 427.90108560000004}, {"country": "Malawi", "continent": "Africa", "year": 1967, "lifeExp": 39.486999999999995, "pop": 4147252, "gdpPercap": 495.5147806}, {"country": "Malawi", "continent": "Africa", "year": 1972, "lifeExp": 41.766000000000005, "pop": 4730997, "gdpPercap": 584.6219709}, {"country": "Malawi", "continent": "Africa", "year": 1977, "lifeExp": 43.766999999999996, "pop": 5637246, "gdpPercap": 663.2236766}, {"country": "Malawi", "continent": "Africa", "year": 1982, "lifeExp": 45.641999999999996, "pop": 6502825, "gdpPercap": 632.8039209}, {"country": "Malawi", "continent": "Africa", "year": 1987, "lifeExp": 47.457, "pop": 7824747, "gdpPercap": 635.5173633999999}, {"country": "Malawi", "continent": "Africa", "year": 1992, "lifeExp": 49.42, "pop": 10014249, "gdpPercap": 563.2000145}, {"country": "Malawi", "continent": "Africa", "year": 1997, "lifeExp": 47.495, "pop": 10419991, "gdpPercap": 692.2758102999999}, {"country": "Malawi", "continent": "Africa", "year": 2002, "lifeExp": 45.00899999999999, "pop": 11824495, "gdpPercap": 665.4231186000001}, {"country": "Malawi", "continent": "Africa", "year": 2007, "lifeExp": 48.303000000000004, "pop": 13327079, "gdpPercap": 759.3499101}], "data-06fd9f850666401b4599de5588b60692": [{"y": 0}]}}, {"mode": "vega-lite"});
</script>
</div>
</div>
</section>
</section>
<section id="the-bbc-style" class="level1">
<h1>The BBC style</h1>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="cf" style="color: #003B4F;">function</span> () </span>
<span id="cb11-2">{</span>
<span id="cb11-3">    font <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Helvetica"</span></span>
<span id="cb11-4">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">plot.title =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> font, </span>
<span id="cb11-5">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">28</span>, <span class="at" style="color: #657422;">face =</span> <span class="st" style="color: #20794D;">"bold"</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"#222222"</span>), <span class="at" style="color: #657422;">plot.subtitle =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> font, </span>
<span id="cb11-6">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">22</span>, <span class="at" style="color: #657422;">margin =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">0</span>)), <span class="at" style="color: #657422;">plot.caption =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), </span>
<span id="cb11-7">    <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>, <span class="at" style="color: #657422;">legend.text.align =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">legend.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), </span>
<span id="cb11-8">    <span class="at" style="color: #657422;">legend.title =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), <span class="at" style="color: #657422;">legend.key =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), </span>
<span id="cb11-9">    <span class="at" style="color: #657422;">legend.text =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">18</span>, </span>
<span id="cb11-10">        <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"#222222"</span>), <span class="at" style="color: #657422;">axis.title =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), </span>
<span id="cb11-11">    <span class="at" style="color: #657422;">axis.text =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> font, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">18</span>, </span>
<span id="cb11-12">        <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"#222222"</span>), <span class="at" style="color: #657422;">axis.text.x =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">margin =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">5</span>, </span>
<span id="cb11-13">        <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">10</span>)), <span class="at" style="color: #657422;">axis.ticks =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), </span>
<span id="cb11-14">    <span class="at" style="color: #657422;">axis.line =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), <span class="at" style="color: #657422;">panel.grid.minor =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), </span>
<span id="cb11-15">    <span class="at" style="color: #657422;">panel.grid.major.y =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"#cbcbcb"</span>), </span>
<span id="cb11-16">    <span class="at" style="color: #657422;">panel.grid.major.x =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), <span class="at" style="color: #657422;">panel.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_blank</span>(), </span>
<span id="cb11-17">    <span class="at" style="color: #657422;">strip.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"white"</span>), </span>
<span id="cb11-18">    <span class="at" style="color: #657422;">strip.text =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">22</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb11-19">    }</span>
<span id="cb11-20">    <span class="sc" style="color: #5E5E5E;">&lt;</span>environment<span class="sc" style="color: #5E5E5E;">:</span> namespace<span class="sc" style="color: #5E5E5E;">:</span>bbplot<span class="sc" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-22T06:13:09.985650Z&quot;,&quot;start_time&quot;:&quot;2020-04-22T06:13:09.972686Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">legend_text_align</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>NameError: name 'legend_text_align' is not defined</code></pre>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-22T06:36:56.051067Z&quot;,&quot;start_time&quot;:&quot;2020-04-22T06:36:56.044118Z&quot;}" data-execution_count="87">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> bbc_style():</span>
<span id="cb14-2">    font <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Helvetica"</span></span>
<span id="cb14-3">    t <span class="op" style="color: #5E5E5E;">=</span> theme(plot_title<span class="op" style="color: #5E5E5E;">=</span>element_text(family<span class="op" style="color: #5E5E5E;">=</span>font,</span>
<span id="cb14-4">                                      size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">28</span>, face<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bold"</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#222222"</span>),</span>
<span id="cb14-5">              <span class="co" style="color: #5E5E5E;">#       plot_subtitle=element_text(family=font,</span></span>
<span id="cb14-6">              <span class="co" style="color: #5E5E5E;">#                                  size=22, plot_margin=(9, 0, 9, 0)), plot_caption=element_blank(),</span></span>
<span id="cb14-7">              legend_position<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"top"</span>, legend_title_align<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, legend_background<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb14-8">              legend_title<span class="op" style="color: #5E5E5E;">=</span>element_blank(), legend_key<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb14-9">              legend_text<span class="op" style="color: #5E5E5E;">=</span>element_text(family<span class="op" style="color: #5E5E5E;">=</span>font, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb14-10">                                       color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#222222"</span>), axis_title<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb14-11"></span>
<span id="cb14-12">              axis_text<span class="op" style="color: #5E5E5E;">=</span>element_text(family<span class="op" style="color: #5E5E5E;">=</span>font, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb14-13">                                     color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#222222"</span>),</span>
<span id="cb14-14">              axis_text_x<span class="op" style="color: #5E5E5E;">=</span>element_text(margin<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'t'</span>: <span class="dv" style="color: #AD0000;">5</span>, <span class="st" style="color: #20794D;">'b'</span>: <span class="dv" style="color: #AD0000;">10</span>}),</span>
<span id="cb14-15">              axis_ticks<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb14-16">              axis_line<span class="op" style="color: #5E5E5E;">=</span>element_blank(), panel_grid_minor<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb14-17">              panel_grid_major_y<span class="op" style="color: #5E5E5E;">=</span>element_line(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#cbcbcb"</span>),</span>
<span id="cb14-18">              panel_grid_major_x<span class="op" style="color: #5E5E5E;">=</span>element_blank(), panel_background<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb14-19">              strip_background<span class="op" style="color: #5E5E5E;">=</span>element_rect(fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"white"</span>),</span>
<span id="cb14-20">              strip_text<span class="op" style="color: #5E5E5E;">=</span>element_text(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">22</span>, hjust<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb14-21">              )</span>
<span id="cb14-22">    <span class="cf" style="color: #003B4F;">return</span> t</span></code></pre></div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-22T06:37:11.757978Z&quot;,&quot;start_time&quot;:&quot;2020-04-22T06:37:11.749002Z&quot;}" data-execution_count="89">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">font <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Helvetica"</span></span>
<span id="cb15-2">theme(plot_title<span class="op" style="color: #5E5E5E;">=</span>element_text(family<span class="op" style="color: #5E5E5E;">=</span>font,</span>
<span id="cb15-3">                                      size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">28</span>, face<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bold"</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#222222"</span>),</span>
<span id="cb15-4">              <span class="co" style="color: #5E5E5E;">#       plot_subtitle=element_text(family=font,</span></span>
<span id="cb15-5">              <span class="co" style="color: #5E5E5E;">#                                  size=22, plot_margin=(9, 0, 9, 0)), plot_caption=element_blank(),</span></span>
<span id="cb15-6">              legend_position<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"top"</span>, legend_title_align<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, legend_background<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb15-7">              legend_title<span class="op" style="color: #5E5E5E;">=</span>element_blank(), legend_key<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb15-8">              legend_text<span class="op" style="color: #5E5E5E;">=</span>element_text(family<span class="op" style="color: #5E5E5E;">=</span>font, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb15-9">                                       color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#222222"</span>), axis_title<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb15-10"></span>
<span id="cb15-11">              axis_text<span class="op" style="color: #5E5E5E;">=</span>element_text(family<span class="op" style="color: #5E5E5E;">=</span>font, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb15-12">                                     color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#222222"</span>),</span>
<span id="cb15-13">              axis_text_x<span class="op" style="color: #5E5E5E;">=</span>element_text(margin<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'t'</span>: <span class="dv" style="color: #AD0000;">5</span>, <span class="st" style="color: #20794D;">'b'</span>: <span class="dv" style="color: #AD0000;">10</span>}),</span>
<span id="cb15-14">              axis_ticks<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb15-15">              axis_line<span class="op" style="color: #5E5E5E;">=</span>element_blank(), panel_grid_minor<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb15-16">              panel_grid_major_y<span class="op" style="color: #5E5E5E;">=</span>element_line(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#cbcbcb"</span>),</span>
<span id="cb15-17">              panel_grid_major_x<span class="op" style="color: #5E5E5E;">=</span>element_blank(), panel_background<span class="op" style="color: #5E5E5E;">=</span>element_blank(),</span>
<span id="cb15-18">              strip_background<span class="op" style="color: #5E5E5E;">=</span>element_rect(fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"white"</span>),</span>
<span id="cb15-19">              strip_text<span class="op" style="color: #5E5E5E;">=</span>element_text(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">22</span>, hjust<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb15-20">              )</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="89">
<pre><code>&lt;plotnine.themes.theme.theme at 0x163f0ca1508&gt;</code></pre>
</div>
</div>
<p>The <code>finalise_plot()</code> function does more than just save out your chart, it also left-aligns the title and subtitle as is standard for BBC graphics, adds a footer with the logo on the right side and lets you input source text on the left side.</p>
<section id="altair" class="level2">
<h2 class="anchored" data-anchor-id="altair">altair</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-22T06:37:15.118084Z&quot;,&quot;start_time&quot;:&quot;2020-04-22T06:37:15.085171Z&quot;}" data-execution_count="90">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;">## altair</span></span>
<span id="cb17-2">line <span class="op" style="color: #5E5E5E;">=</span> (alt.Chart(line_df).mark_line().encode(</span>
<span id="cb17-3">x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'year'</span>,</span>
<span id="cb17-4">y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>)</span>
<span id="cb17-5">.properties(title<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'text'</span>: <span class="st" style="color: #20794D;">'Living Longer'</span>,</span>
<span id="cb17-6">                   <span class="st" style="color: #20794D;">'subtitle'</span>: <span class="st" style="color: #20794D;">'Life expectancy in China 1952-2007'</span>})</span>
<span id="cb17-7">) </span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;"># hline</span></span>
<span id="cb17-10">overlay <span class="op" style="color: #5E5E5E;">=</span> overlay <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'lifeExp'</span>: [<span class="dv" style="color: #AD0000;">0</span>]})</span>
<span id="cb17-11">hline <span class="op" style="color: #5E5E5E;">=</span> alt.Chart(overlay).mark_rule(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'#333333'</span>, strokeWidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>).encode(y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp:Q'</span>)</span>
<span id="cb17-12"></span>
<span id="cb17-13">line <span class="op" style="color: #5E5E5E;">+</span> hline</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="90">

<div id="altair-viz-bd68f968dd334ec596e17d9d7c1f1359"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-bd68f968dd334ec596e17d9d7c1f1359") {
      outputDiv = document.getElementById("altair-viz-bd68f968dd334ec596e17d9d7c1f1359");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"data": {"name": "data-09bd37ab7bcd5f13694b463cd22b382a"}, "mark": "line", "encoding": {"x": {"type": "quantitative", "field": "year"}, "y": {"type": "quantitative", "field": "lifeExp"}}, "title": {"text": "Living Longer", "subtitle": "Life expectancy in China 1952-2007"}}, {"data": {"name": "data-b72d08f8e8aba7f4bc4f7a2761cca43e"}, "mark": {"type": "rule", "color": "#333333", "strokeWidth": 3}, "encoding": {"y": {"type": "quantitative", "field": "lifeExp"}}}], "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-09bd37ab7bcd5f13694b463cd22b382a": [{"country": "Malawi", "continent": "Africa", "year": 1952, "lifeExp": 36.256, "pop": 2917802, "gdpPercap": 369.1650802}, {"country": "Malawi", "continent": "Africa", "year": 1957, "lifeExp": 37.207, "pop": 3221238, "gdpPercap": 416.36980639999996}, {"country": "Malawi", "continent": "Africa", "year": 1962, "lifeExp": 38.41, "pop": 3628608, "gdpPercap": 427.90108560000004}, {"country": "Malawi", "continent": "Africa", "year": 1967, "lifeExp": 39.486999999999995, "pop": 4147252, "gdpPercap": 495.5147806}, {"country": "Malawi", "continent": "Africa", "year": 1972, "lifeExp": 41.766000000000005, "pop": 4730997, "gdpPercap": 584.6219709}, {"country": "Malawi", "continent": "Africa", "year": 1977, "lifeExp": 43.766999999999996, "pop": 5637246, "gdpPercap": 663.2236766}, {"country": "Malawi", "continent": "Africa", "year": 1982, "lifeExp": 45.641999999999996, "pop": 6502825, "gdpPercap": 632.8039209}, {"country": "Malawi", "continent": "Africa", "year": 1987, "lifeExp": 47.457, "pop": 7824747, "gdpPercap": 635.5173633999999}, {"country": "Malawi", "continent": "Africa", "year": 1992, "lifeExp": 49.42, "pop": 10014249, "gdpPercap": 563.2000145}, {"country": "Malawi", "continent": "Africa", "year": 1997, "lifeExp": 47.495, "pop": 10419991, "gdpPercap": 692.2758102999999}, {"country": "Malawi", "continent": "Africa", "year": 2002, "lifeExp": 45.00899999999999, "pop": 11824495, "gdpPercap": 665.4231186000001}, {"country": "Malawi", "continent": "Africa", "year": 2007, "lifeExp": 48.303000000000004, "pop": 13327079, "gdpPercap": 759.3499101}], "data-b72d08f8e8aba7f4bc4f7a2761cca43e": [{"lifeExp": 0}]}}, {"mode": "vega-lite"});
</script>
</div>
</div>
</section>
</section>
<section id="make-a-multiple-line-chart" class="level1">
<h1>Make a multiple line chart</h1>
<section id="ggplot-1" class="level2">
<h2 class="anchored" data-anchor-id="ggplot-1">ggplot</h2>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">#Prepare data</span></span>
<span id="cb18-2">multiple_line_df <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">filter</span>(country <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"China"</span> <span class="sc" style="color: #5E5E5E;">|</span> country <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"United States"</span>) </span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;">#Make plot</span></span>
<span id="cb18-6">multiple_line <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(multiple_line_df, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">colour =</span> country)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-7">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-8">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">colour=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-9">  <span class="fu" style="color: #4758AB;">scale_colour_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#FAAB18"</span>, <span class="st" style="color: #20794D;">"#1380A1"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-10">  <span class="fu" style="color: #4758AB;">bbc_style</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-11">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"Living longer"</span>,</span>
<span id="cb18-12">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Life expectancy in China and the US"</span>)</span></code></pre></div>
</section>
<section id="plotnine-1" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-1">plotnine</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-22T06:37:17.502995Z&quot;,&quot;start_time&quot;:&quot;2020-04-22T06:37:17.167383Z&quot;}" data-execution_count="92">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Make plot</span></span>
<span id="cb19-2">multiline <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb19-3">    ggplot(multiline_df, aes(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'year'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>, colour<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'country'</span>)) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb19-4">    geom_line(colour<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#1380A1"</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb19-5">    geom_hline(yintercept<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb19-6">    scale_colour_manual(values<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"#FAAB18"</span>, <span class="st" style="color: #20794D;">"#1380A1"</span>]) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb19-7">      bbc_style() <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb19-8">    labs(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Living longer"</span>,</span>
<span id="cb19-9">         subtitle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Life expectancy in China 1952-2007"</span>))</span>
<span id="cb19-10">multiline</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>findfont: Font family ['Helvetica'] not found. Falling back to DejaVu Sans.
findfont: Font family ['Helvetica'] not found. Falling back to DejaVu Sans.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>&lt;ggplot: (-9223371941310014864)&gt;</code></pre>
</div>
</div>
</section>
<section id="altair-1" class="level2">
<h2 class="anchored" data-anchor-id="altair-1">altair</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:32.475002Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:32.364299Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">multiline_altair <span class="op" style="color: #5E5E5E;">=</span> (alt.Chart(multiline_df).mark_line().encode(</span>
<span id="cb22-2">x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'year'</span>,</span>
<span id="cb22-3">y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>,</span>
<span id="cb22-4">color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'country'</span>)</span>
<span id="cb22-5">.properties(title<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'text'</span>: <span class="st" style="color: #20794D;">'Living Longer'</span>,</span>
<span id="cb22-6">                   <span class="st" style="color: #20794D;">'subtitle'</span>: <span class="st" style="color: #20794D;">'Life expectancy in China 1952-2007'</span>})</span>
<span id="cb22-7">) </span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;"># hline</span></span>
<span id="cb22-10">overlay <span class="op" style="color: #5E5E5E;">=</span> overlay <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'lifeExp'</span>: [<span class="dv" style="color: #AD0000;">0</span>]})</span>
<span id="cb22-11">hline <span class="op" style="color: #5E5E5E;">=</span> alt.Chart(overlay).mark_rule(color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'#333333'</span>, strokeWidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>).encode(y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp:Q'</span>)</span>
<span id="cb22-12"></span>
<span id="cb22-13">multiline_altair <span class="op" style="color: #5E5E5E;">+</span> hline</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">

<div id="altair-viz-f99f481a2f53474fbadc4f79b22afc9f"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-f99f481a2f53474fbadc4f79b22afc9f") {
      outputDiv = document.getElementById("altair-viz-f99f481a2f53474fbadc4f79b22afc9f");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"data": {"name": "data-e288d201d411085ed0c88f3916d88499"}, "mark": "line", "encoding": {"color": {"type": "nominal", "field": "country"}, "x": {"type": "quantitative", "field": "year"}, "y": {"type": "quantitative", "field": "lifeExp"}}, "title": {"text": "Living Longer", "subtitle": "Life expectancy in China 1952-2007"}}, {"data": {"name": "data-b72d08f8e8aba7f4bc4f7a2761cca43e"}, "mark": {"type": "rule", "color": "#333333", "strokeWidth": 3}, "encoding": {"y": {"type": "quantitative", "field": "lifeExp"}}}], "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-e288d201d411085ed0c88f3916d88499": [{"country": "China", "continent": "Asia", "year": 1952, "lifeExp": 44.0, "pop": 556263527, "gdpPercap": 400.44861099999997}, {"country": "China", "continent": "Asia", "year": 1957, "lifeExp": 50.54896, "pop": 637408000, "gdpPercap": 575.9870009}, {"country": "China", "continent": "Asia", "year": 1962, "lifeExp": 44.50136, "pop": 665770000, "gdpPercap": 487.6740183}, {"country": "China", "continent": "Asia", "year": 1967, "lifeExp": 58.381119999999996, "pop": 754550000, "gdpPercap": 612.7056934}, {"country": "China", "continent": "Asia", "year": 1972, "lifeExp": 63.118880000000004, "pop": 862030000, "gdpPercap": 676.9000921}, {"country": "China", "continent": "Asia", "year": 1977, "lifeExp": 63.96736, "pop": 943455000, "gdpPercap": 741.2374699}, {"country": "China", "continent": "Asia", "year": 1982, "lifeExp": 65.525, "pop": 1000281000, "gdpPercap": 962.4213804999999}, {"country": "China", "continent": "Asia", "year": 1987, "lifeExp": 67.274, "pop": 1084035000, "gdpPercap": 1378.904018}, {"country": "China", "continent": "Asia", "year": 1992, "lifeExp": 68.69, "pop": 1164970000, "gdpPercap": 1655.784158}, {"country": "China", "continent": "Asia", "year": 1997, "lifeExp": 70.426, "pop": 1230075000, "gdpPercap": 2289.234136}, {"country": "China", "continent": "Asia", "year": 2002, "lifeExp": 72.028, "pop": 1280400000, "gdpPercap": 3119.280896}, {"country": "China", "continent": "Asia", "year": 2007, "lifeExp": 72.961, "pop": 1318683096, "gdpPercap": 4959.1148539999995}, {"country": "United States", "continent": "Americas", "year": 1952, "lifeExp": 68.44, "pop": 157553000, "gdpPercap": 13990.482080000002}, {"country": "United States", "continent": "Americas", "year": 1957, "lifeExp": 69.49, "pop": 171984000, "gdpPercap": 14847.12712}, {"country": "United States", "continent": "Americas", "year": 1962, "lifeExp": 70.21, "pop": 186538000, "gdpPercap": 16173.145859999999}, {"country": "United States", "continent": "Americas", "year": 1967, "lifeExp": 70.76, "pop": 198712000, "gdpPercap": 19530.365569999998}, {"country": "United States", "continent": "Americas", "year": 1972, "lifeExp": 71.34, "pop": 209896000, "gdpPercap": 21806.03594}, {"country": "United States", "continent": "Americas", "year": 1977, "lifeExp": 73.38, "pop": 220239000, "gdpPercap": 24072.63213}, {"country": "United States", "continent": "Americas", "year": 1982, "lifeExp": 74.65, "pop": 232187835, "gdpPercap": 25009.55914}, {"country": "United States", "continent": "Americas", "year": 1987, "lifeExp": 75.02, "pop": 242803533, "gdpPercap": 29884.350410000003}, {"country": "United States", "continent": "Americas", "year": 1992, "lifeExp": 76.09, "pop": 256894189, "gdpPercap": 32003.93224}, {"country": "United States", "continent": "Americas", "year": 1997, "lifeExp": 76.81, "pop": 272911760, "gdpPercap": 35767.43303}, {"country": "United States", "continent": "Americas", "year": 2002, "lifeExp": 77.31, "pop": 287675526, "gdpPercap": 39097.09955}, {"country": "United States", "continent": "Americas", "year": 2007, "lifeExp": 78.242, "pop": 301139947, "gdpPercap": 42951.65309}], "data-b72d08f8e8aba7f4bc4f7a2761cca43e": [{"lifeExp": 0}]}}, {"mode": "vega-lite"});
</script>
</div>
</div>
</section>
</section>
<section id="make-a-bar-chart" class="level1">
<h1>Make a bar chart</h1>
</section>
<section id="ggplot-2" class="level1">
<h1>ggplot</h1>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;">#Prepare data</span></span>
<span id="cb23-2">bar_df <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> continent <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Africa"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;">#Make plot</span></span>
<span id="cb23-8">bars <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(bar_df, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> country, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-9">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat=</span><span class="st" style="color: #20794D;">"identity"</span>, </span>
<span id="cb23-10">           <span class="at" style="color: #657422;">position=</span><span class="st" style="color: #20794D;">"identity"</span>, </span>
<span id="cb23-11">           <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"#1380A1"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-12">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">colour=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-13">  <span class="fu" style="color: #4758AB;">bbc_style</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-14">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"Reunion is highest"</span>,</span>
<span id="cb23-15">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Highest African life expectancy, 2007"</span>)</span></code></pre></div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:32.968678Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:32.959703Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">## hide</span></span>
<span id="cb24-2">bar_df <span class="op" style="color: #5E5E5E;">=</span> gapminder.query(<span class="st" style="color: #20794D;">' year == 2007 &amp; continent == "Africa" '</span>).nlargest(<span class="dv" style="color: #AD0000;">5</span>, <span class="st" style="color: #20794D;">'lifeExp'</span>)</span></code></pre></div>
</div>
<section id="plotnine-2" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-2">plotnine</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:33.564082Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:33.337689Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">bars_ggplot <span class="op" style="color: #5E5E5E;">=</span> (ggplot(bar_df, aes(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'country'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>)) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb25-2">  geom_bar(stat<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"identity"</span>,</span>
<span id="cb25-3">           position<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"identity"</span>,</span>
<span id="cb25-4">           fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#1380A1"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb25-5">  geom_hline(yintercept<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, colour<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;">#   bbc_style() +</span></span>
<span id="cb25-7">  labs(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Reunion is highest"</span>,</span>
<span id="cb25-8">       subtitle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Highest African life expectancy, 2007"</span>))</span>
<span id="cb25-9"></span>
<span id="cb25-10">bars_ggplot</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>&lt;ggplot: (-9223371941310355340)&gt;</code></pre>
</div>
</div>
</section>
<section id="altair-2" class="level2">
<h2 class="anchored" data-anchor-id="altair-2">altair</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:33.738619Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:33.714683Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">bars_altair <span class="op" style="color: #5E5E5E;">=</span> (alt.Chart(bar_df).mark_bar().encode(</span>
<span id="cb27-2">x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'country'</span>,</span>
<span id="cb27-3">y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>,</span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;"># color='country'</span></span>
<span id="cb27-5">)</span>
<span id="cb27-6">.properties(title<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'text'</span>: <span class="st" style="color: #20794D;">'Reunion is highest'</span>,</span>
<span id="cb27-7">                   <span class="st" style="color: #20794D;">'subtitle'</span>: <span class="st" style="color: #20794D;">'Highest African life expectancy, 2007'</span>})</span>
<span id="cb27-8">) </span>
<span id="cb27-9"></span>
<span id="cb27-10">bars_altair</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">

<div id="altair-viz-5dcd7b1199264c8794f7faa0c2a52471"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-5dcd7b1199264c8794f7faa0c2a52471") {
      outputDiv = document.getElementById("altair-viz-5dcd7b1199264c8794f7faa0c2a52471");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "data": {"name": "data-2c873659a10eb72379a7cf9f200ef3ca"}, "mark": "bar", "encoding": {"x": {"type": "nominal", "field": "country"}, "y": {"type": "quantitative", "field": "lifeExp"}}, "title": {"text": "Reunion is highest", "subtitle": "Highest African life expectancy, 2007"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-2c873659a10eb72379a7cf9f200ef3ca": [{"country": "Reunion", "continent": "Africa", "year": 2007, "lifeExp": 76.442, "pop": 798094, "gdpPercap": 7670.122558}, {"country": "Libya", "continent": "Africa", "year": 2007, "lifeExp": 73.952, "pop": 6036914, "gdpPercap": 12057.49928}, {"country": "Tunisia", "continent": "Africa", "year": 2007, "lifeExp": 73.923, "pop": 10276158, "gdpPercap": 7092.923025}, {"country": "Mauritius", "continent": "Africa", "year": 2007, "lifeExp": 72.801, "pop": 1250882, "gdpPercap": 10956.99112}, {"country": "Algeria", "continent": "Africa", "year": 2007, "lifeExp": 72.301, "pop": 33333216, "gdpPercap": 6223.367465}]}}, {"mode": "vega-lite"});
</script>
</div>
</div>
</section>
</section>
<section id="make-a-stacked-bar-chart" class="level1">
<h1>Make a stacked bar chart</h1>
<section id="data-preprocessing" class="level2">
<h2 class="anchored" data-anchor-id="data-preprocessing">Data preprocessing</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:34.356962Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:34.323053Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">## collapse-hide</span></span>
<span id="cb28-2">stacked_bar_df <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb28-3">    gapminder.query(<span class="st" style="color: #20794D;">' year == 2007'</span>)</span>
<span id="cb28-4">    .assign(</span>
<span id="cb28-5">        lifeExpGrouped<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> x: pd.cut(</span>
<span id="cb28-6">            x[<span class="st" style="color: #20794D;">'lifeExp'</span>],</span>
<span id="cb28-7">            bins<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">65</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">90</span>],</span>
<span id="cb28-8">            labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"under 50"</span>, <span class="st" style="color: #20794D;">"50-65"</span>, <span class="st" style="color: #20794D;">"65-80"</span>, <span class="st" style="color: #20794D;">"80+"</span>]))</span>
<span id="cb28-9">    .groupby(</span>
<span id="cb28-10">        [<span class="st" style="color: #20794D;">'continent'</span>, <span class="st" style="color: #20794D;">'lifeExpGrouped'</span>], as_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb28-11">    .agg({<span class="st" style="color: #20794D;">'pop'</span>: <span class="st" style="color: #20794D;">'sum'</span>})</span>
<span id="cb28-12">    .rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'pop'</span>: <span class="st" style="color: #20794D;">'continentPop'</span>})</span>
<span id="cb28-13">    .reset_index()</span>
<span id="cb28-14">)</span>
<span id="cb28-15">stacked_bar_df[<span class="st" style="color: #20794D;">'lifeExpGrouped'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Categorical(stacked_bar_df[<span class="st" style="color: #20794D;">'lifeExpGrouped'</span>], ordered<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb28-16"></span>
<span id="cb28-17">stacked_bar_df.head(<span class="dv" style="color: #AD0000;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>continent</th>
      <th>lifeExpGrouped</th>
      <th>continentPop</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Africa</td>
      <td>under 50</td>
      <td>376100713.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Africa</td>
      <td>50-65</td>
      <td>386811458.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Africa</td>
      <td>65-80</td>
      <td>166627521.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Africa</td>
      <td>80+</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Americas</td>
      <td>under 50</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Americas</td>
      <td>50-65</td>
      <td>8502814.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="ggplot-3" class="level2">
<h2 class="anchored" data-anchor-id="ggplot-3">ggplot</h2>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;">#prepare data</span></span>
<span id="cb29-2">stacked_df <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lifeExpGrouped =</span> <span class="fu" style="color: #4758AB;">cut</span>(lifeExp, </span>
<span id="cb29-5">                    <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">65</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">90</span>),</span>
<span id="cb29-6">                    <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Under 50"</span>, <span class="st" style="color: #20794D;">"50-65"</span>, <span class="st" style="color: #20794D;">"65-80"</span>, <span class="st" style="color: #20794D;">"80+"</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-7">  <span class="fu" style="color: #4758AB;">group_by</span>(continent, lifeExpGrouped) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-8">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">continentPop =</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">as.numeric</span>(pop)))</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;">#set order of stacks by changing factor levels</span></span>
<span id="cb29-11">stacked_df<span class="sc" style="color: #5E5E5E;">$</span>lifeExpGrouped <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">factor</span>(stacked_df<span class="sc" style="color: #5E5E5E;">$</span>lifeExpGrouped, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">rev</span>(<span class="fu" style="color: #4758AB;">levels</span>(stacked_df<span class="sc" style="color: #5E5E5E;">$</span>lifeExpGrouped)))</span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;">#create plot</span></span>
<span id="cb29-14">stacked_bars <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data =</span> stacked_df, </span>
<span id="cb29-15">                       <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> continent,</span>
<span id="cb29-16">                           <span class="at" style="color: #657422;">y =</span> continentPop,</span>
<span id="cb29-17">                           <span class="at" style="color: #657422;">fill =</span> lifeExpGrouped)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-18">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, </span>
<span id="cb29-19">           <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"fill"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-20">  <span class="fu" style="color: #4758AB;">bbc_style</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-21">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span>percent) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-22">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_d</span>(<span class="at" style="color: #657422;">direction =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-23">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"#333333"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-24">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"How life expectancy varies"</span>,</span>
<span id="cb29-25">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"% of population by life expectancy band, 2007"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-26">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>, </span>
<span id="cb29-27">        <span class="at" style="color: #657422;">legend.justification =</span> <span class="st" style="color: #20794D;">"left"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-28">  <span class="fu" style="color: #4758AB;">guides</span>(<span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">guide_legend</span>(<span class="at" style="color: #657422;">reverse =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
</section>
<section id="plotnine-3" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-3">plotnine</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:38.515855Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:38.204690Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># create plot</span></span>
<span id="cb30-2">stacked_bar_ggplot <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb30-3">    ggplot(stacked_bar_df,</span>
<span id="cb30-4">           aes(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'continent'</span>,</span>
<span id="cb30-5">               y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'continentPop'</span>,</span>
<span id="cb30-6">               fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExpGrouped'</span>)</span>
<span id="cb30-7">           ) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb30-8">    geom_bar(stat<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"identity"</span>,</span>
<span id="cb30-9">             position<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"fill"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb30-10">    <span class="co" style="color: #5E5E5E;">#   bbc_style() +</span></span>
<span id="cb30-11">    scale_y_continuous(labels<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> l: [<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d%%</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (v <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> l]) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb30-12">    scale_fill_cmap_d(direction<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">+</span>  <span class="co" style="color: #5E5E5E;"># scale_fill_viridis_d</span></span>
<span id="cb30-13">    geom_hline(yintercept<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, colour<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb30-14">    labs(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"How life expectancy varies"</span>,</span>
<span id="cb30-15">         subtitle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">% o</span><span class="st" style="color: #20794D;">f population by life expectancy band, 2007"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb30-16"></span>
<span id="cb30-17">    guides(fill<span class="op" style="color: #5E5E5E;">=</span>guide_legend(reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)))</span>
<span id="cb30-18"></span>
<span id="cb30-19">stacked_bar_ggplot</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\CHANNO.OOCLDM\AppData\Local\Continuum\anaconda3\lib\site-packages\plotnine\scales\scale.py:91: PlotnineWarning: scale_fill_cmap_d could not recognise parameter `direction`
  warn(msg.format(self.__class__.__name__, k), PlotnineWarning)
C:\Users\CHANNO.OOCLDM\AppData\Local\Continuum\anaconda3\lib\site-packages\plotnine\layer.py:433: PlotnineWarning: position_stack : Removed 7 rows containing missing values.
  data = self.position.setup_data(self.data, params)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>&lt;ggplot: (-9223371941310320660)&gt;</code></pre>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:38.869906Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:38.517898Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># create plot</span></span>
<span id="cb33-2">stacked_bar_ggplot <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb33-3">    ggplot(stacked_bar_df,</span>
<span id="cb33-4">           aes(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'continent'</span>,</span>
<span id="cb33-5">               y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'continentPop'</span>,</span>
<span id="cb33-6">               fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExpGrouped'</span>)</span>
<span id="cb33-7">           ) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb33-8">    geom_bar(stat<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"identity"</span>,</span>
<span id="cb33-9">             position<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"fill"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb33-10">    <span class="co" style="color: #5E5E5E;">#   bbc_style() +</span></span>
<span id="cb33-11">    scale_y_continuous(labels<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> l: [<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d%%</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (v <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> l]) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb33-12">    scale_fill_cmap_d(direction<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">+</span>  <span class="co" style="color: #5E5E5E;"># scale_fill_viridis_d</span></span>
<span id="cb33-13">    geom_hline(yintercept<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, colour<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb33-14">    labs(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"How life expectancy varies"</span>,</span>
<span id="cb33-15">         subtitle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">% o</span><span class="st" style="color: #20794D;">f population by life expectancy band, 2007"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb33-16"></span>
<span id="cb33-17">    guides(fill<span class="op" style="color: #5E5E5E;">=</span>guide_legend(reverse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)))</span>
<span id="cb33-18"></span>
<span id="cb33-19">stacked_bar_ggplot</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\CHANNO.OOCLDM\AppData\Local\Continuum\anaconda3\lib\site-packages\plotnine\scales\scale.py:91: PlotnineWarning: scale_fill_cmap_d could not recognise parameter `direction`
  warn(msg.format(self.__class__.__name__, k), PlotnineWarning)
C:\Users\CHANNO.OOCLDM\AppData\Local\Continuum\anaconda3\lib\site-packages\plotnine\layer.py:433: PlotnineWarning: position_stack : Removed 7 rows containing missing values.
  data = self.position.setup_data(self.data, params)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>&lt;ggplot: (-9223371941310406808)&gt;</code></pre>
</div>
</div>
</section>
<section id="altair-3" class="level2">
<h2 class="anchored" data-anchor-id="altair-3">altair</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:38.900824Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:38.870903Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">stacked_bar_altair <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb36-2">    alt.Chart(stacked_bar_df)</span>
<span id="cb36-3">    .mark_bar()</span>
<span id="cb36-4">    .encode(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'continent'</span>,</span>
<span id="cb36-5">            y<span class="op" style="color: #5E5E5E;">=</span>alt.Y(<span class="st" style="color: #20794D;">'continentPop'</span>, stack<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'normalize'</span>,</span>
<span id="cb36-6">                    axis<span class="op" style="color: #5E5E5E;">=</span>alt.Axis(<span class="bu" style="color: null;">format</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'%'</span>)),</span>
<span id="cb36-7">            fill<span class="op" style="color: #5E5E5E;">=</span>alt.Fill(<span class="st" style="color: #20794D;">'lifeExpGrouped'</span>, scale<span class="op" style="color: #5E5E5E;">=</span>alt.Scale(scheme<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'viridis'</span>)))</span>
<span id="cb36-8">    .properties(title<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'text'</span>: <span class="st" style="color: #20794D;">'How life expectancy varies'</span>,</span>
<span id="cb36-9">                       <span class="st" style="color: #20794D;">'subtitle'</span>: <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">% o</span><span class="st" style="color: #20794D;">f population by life expectancy band, 2007'</span>}</span>
<span id="cb36-10">                )</span>
<span id="cb36-11">)</span>
<span id="cb36-12"></span>
<span id="cb36-13">overlay <span class="op" style="color: #5E5E5E;">=</span> overlay <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'continentPop'</span>: [<span class="dv" style="color: #AD0000;">0</span>]})</span>
<span id="cb36-14">hline <span class="op" style="color: #5E5E5E;">=</span> alt.Chart(overlay).mark_rule(</span>
<span id="cb36-15">    color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'#333333'</span>, strokeWidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).encode(y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'continentPop:Q'</span>)</span>
<span id="cb36-16"></span>
<span id="cb36-17"></span>
<span id="cb36-18">stacked_bar_altair <span class="op" style="color: #5E5E5E;">+</span> hline</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">

<div id="altair-viz-dfba4f1dcf31401d825b0c1c0d5d2edf"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-dfba4f1dcf31401d825b0c1c0d5d2edf") {
      outputDiv = document.getElementById("altair-viz-dfba4f1dcf31401d825b0c1c0d5d2edf");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"data": {"name": "data-144d424e1e9fff33be59e9736a4970cd"}, "mark": "bar", "encoding": {"fill": {"type": "nominal", "field": "lifeExpGrouped", "scale": {"scheme": "viridis"}}, "x": {"type": "nominal", "field": "continent"}, "y": {"type": "quantitative", "axis": {"format": "%"}, "field": "continentPop", "stack": "normalize"}}, "title": {"text": "How life expectancy varies", "subtitle": "% of population by life expectancy band, 2007"}}, {"data": {"name": "data-d45d92cd6de2edfd11b04060325cd948"}, "mark": {"type": "rule", "color": "#333333", "strokeWidth": 2}, "encoding": {"y": {"type": "quantitative", "field": "continentPop"}}}], "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-144d424e1e9fff33be59e9736a4970cd": [{"continent": "Africa", "lifeExpGrouped": "under 50", "continentPop": 376100713.0}, {"continent": "Africa", "lifeExpGrouped": "50-65", "continentPop": 386811458.0}, {"continent": "Africa", "lifeExpGrouped": "65-80", "continentPop": 166627521.0}, {"continent": "Africa", "lifeExpGrouped": "80+", "continentPop": null}, {"continent": "Americas", "lifeExpGrouped": "under 50", "continentPop": null}, {"continent": "Americas", "lifeExpGrouped": "50-65", "continentPop": 8502814.0}, {"continent": "Americas", "lifeExpGrouped": "65-80", "continentPop": 856978229.0}, {"continent": "Americas", "lifeExpGrouped": "80+", "continentPop": 33390141.0}, {"continent": "Asia", "lifeExpGrouped": "under 50", "continentPop": 31889923.0}, {"continent": "Asia", "lifeExpGrouped": "50-65", "continentPop": 1401351679.0}, {"continent": "Asia", "lifeExpGrouped": "65-80", "continentPop": 2237837162.0}, {"continent": "Asia", "lifeExpGrouped": "80+", "continentPop": 140875063.0}, {"continent": "Europe", "lifeExpGrouped": "under 50", "continentPop": null}, {"continent": "Europe", "lifeExpGrouped": "50-65", "continentPop": null}, {"continent": "Europe", "lifeExpGrouped": "65-80", "continentPop": 404903083.0}, {"continent": "Europe", "lifeExpGrouped": "80+", "continentPop": 181195446.0}, {"continent": "Oceania", "lifeExpGrouped": "under 50", "continentPop": null}, {"continent": "Oceania", "lifeExpGrouped": "50-65", "continentPop": null}, {"continent": "Oceania", "lifeExpGrouped": "65-80", "continentPop": null}, {"continent": "Oceania", "lifeExpGrouped": "80+", "continentPop": 24549947.0}], "data-d45d92cd6de2edfd11b04060325cd948": [{"continentPop": 0}]}}, {"mode": "vega-lite"});
</script>
</div>
</div>
</section>
</section>
<section id="make-a-grouped-bar-chart" class="level1">
<h1>Make a grouped bar chart</h1>
<section id="ggplot-4" class="level2">
<h2 class="anchored" data-anchor-id="ggplot-4">ggplot</h2>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;">#Prepare data</span></span>
<span id="cb37-2">grouped_bar_df <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1967</span> <span class="sc" style="color: #5E5E5E;">|</span> year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-4">  <span class="fu" style="color: #4758AB;">select</span>(country, year, lifeExp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-5">  <span class="fu" style="color: #4758AB;">spread</span>(year, lifeExp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">gap =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">2007</span><span class="st" style="color: #20794D;">`</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">1967</span><span class="st" style="color: #20794D;">`</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-7">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(gap)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-8">  <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-9">  <span class="fu" style="color: #4758AB;">gather</span>(<span class="at" style="color: #657422;">key =</span> year, </span>
<span id="cb37-10">         <span class="at" style="color: #657422;">value =</span> lifeExp,</span>
<span id="cb37-11">         <span class="sc" style="color: #5E5E5E;">-</span>country,</span>
<span id="cb37-12">         <span class="sc" style="color: #5E5E5E;">-</span>gap) </span>
<span id="cb37-13">  </span>
<span id="cb37-14"><span class="co" style="color: #5E5E5E;">#Make plot</span></span>
<span id="cb37-15">grouped_bars <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(grouped_bar_df, </span>
<span id="cb37-16">                       <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> country, </span>
<span id="cb37-17">                           <span class="at" style="color: #657422;">y =</span> lifeExp, </span>
<span id="cb37-18">                           <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(year))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-19">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat=</span><span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">position=</span><span class="st" style="color: #20794D;">"dodge"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-20">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">colour=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-21">  <span class="fu" style="color: #4758AB;">bbc_style</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-22">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#1380A1"</span>, <span class="st" style="color: #20794D;">"#FAAB18"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-23">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"We're living longer"</span>,</span>
<span id="cb37-24">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Biggest life expectancy rise, 1967-2007"</span>)</span></code></pre></div>
</section>
<section id="plotnine-4" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-4">plotnine</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:40.739893Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:40.458648Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># Make plot</span></span>
<span id="cb38-2">grouped_bars_ggplot <span class="op" style="color: #5E5E5E;">=</span> (ggplot(grouped_bar_df,</span>
<span id="cb38-3">                       aes(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'country'</span>,</span>
<span id="cb38-4">                           y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>,</span>
<span id="cb38-5">                           fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'year'</span>)) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb38-6">                geom_bar(stat<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"identity"</span>, position<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"dodge"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb38-7">                geom_hline(yintercept<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, colour<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;">#                 bbc_style() +</span></span>
<span id="cb38-9">                scale_fill_manual(values<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">"#1380A1"</span>, <span class="st" style="color: #20794D;">"#FAAB18"</span>)) <span class="op" style="color: #5E5E5E;">+</span></span>
<span id="cb38-10">                labs(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"We're living longer"</span>,</span>
<span id="cb38-11">                     subtitle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Biggest life expectancy rise, 1967-2007"</span>))</span>
<span id="cb38-12"></span>
<span id="cb38-13">grouped_bars_ggplot</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>&lt;ggplot: (-9223371941310352504)&gt;</code></pre>
</div>
</div>
</section>
<section id="altair-4" class="level2">
<h2 class="anchored" data-anchor-id="altair-4">altair</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:41.203650Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:41.180711Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">grouped_bars_altair <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb40-2">    alt.Chart(grouped_bar_df)</span>
<span id="cb40-3">    .mark_bar()</span>
<span id="cb40-4">    .encode(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'year:N'</span>,</span>
<span id="cb40-5">            y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lifeExp'</span>,</span>
<span id="cb40-6">color<span class="op" style="color: #5E5E5E;">=</span>alt.Color(<span class="st" style="color: #20794D;">'year:N'</span>, scale<span class="op" style="color: #5E5E5E;">=</span>alt.Scale(<span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"#1380A1"</span>, <span class="st" style="color: #20794D;">"#FAAB18"</span>])),</span>
<span id="cb40-7">           column<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'country:N'</span>)</span>
<span id="cb40-8">    .properties(title<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'text'</span>: <span class="st" style="color: #20794D;">"We're living longe"</span>,</span>
<span id="cb40-9">                       <span class="st" style="color: #20794D;">'subtitle'</span>: <span class="st" style="color: #20794D;">'Biggest life expectancy rise, 1967-2007'</span>}</span>
<span id="cb40-10">                )</span>
<span id="cb40-11">)</span>
<span id="cb40-12"></span>
<span id="cb40-13">grouped_bars_altair</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">

<div id="altair-viz-529c3d6b33d24d93bd75a5a9cf89b58d"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-529c3d6b33d24d93bd75a5a9cf89b58d") {
      outputDiv = document.getElementById("altair-viz-529c3d6b33d24d93bd75a5a9cf89b58d");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "data": {"name": "data-23e0747d191a42a58e9c5764138c1bc9"}, "mark": "bar", "encoding": {"color": {"type": "nominal", "field": "year", "scale": {"range": ["#1380A1", "#FAAB18"]}}, "column": {"type": "nominal", "field": "country"}, "x": {"type": "nominal", "field": "year"}, "y": {"type": "quantitative", "field": "lifeExp"}}, "title": {"text": "We're living longe", "subtitle": "Biggest life expectancy rise, 1967-2007"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-23e0747d191a42a58e9c5764138c1bc9": [{"country": "Oman", "gap": 28.652, "year": 1967, "lifeExp": 46.988}, {"country": "Vietnam", "gap": 26.410999999999994, "year": 1967, "lifeExp": 47.838}, {"country": "Yemen, Rep.", "gap": 25.714, "year": 1967, "lifeExp": 36.984}, {"country": "Indonesia", "gap": 24.686000000000007, "year": 1967, "lifeExp": 45.964}, {"country": "Libya", "gap": 23.725, "year": 1967, "lifeExp": 50.227}, {"country": "Oman", "gap": 28.652, "year": 2007, "lifeExp": 75.64}, {"country": "Vietnam", "gap": 26.410999999999994, "year": 2007, "lifeExp": 74.249}, {"country": "Yemen, Rep.", "gap": 25.714, "year": 2007, "lifeExp": 62.698}, {"country": "Indonesia", "gap": 24.686000000000007, "year": 2007, "lifeExp": 70.65}, {"country": "Libya", "gap": 23.725, "year": 2007, "lifeExp": 73.952}]}}, {"mode": "vega-lite"});
</script>
</div>
</div>
</section>
</section>
<section id="make-changes-to-the-legend" class="level1">
<h1>Make changes to the legend</h1>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:47:41.907762Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:47:41.903773Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;">## hide</span></span></code></pre></div>
</div>
<section id="plotnine-5" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-5">plotnine</h2>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:49:11.071229Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:49:10.795949Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Remove the Legend</span></span>
<span id="cb42-2">multiline <span class="op" style="color: #5E5E5E;">+</span> guides(colour<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-27-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>&lt;ggplot: (-9223371941310211164)&gt;</code></pre>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-21T09:51:28.929953Z&quot;,&quot;start_time&quot;:&quot;2020-04-21T09:51:28.648708Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">multiline <span class="op" style="color: #5E5E5E;">+</span> theme(legend_position <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"none"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>&lt;ggplot: (-9223371941308840576)&gt;</code></pre>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-22T06:02:24.449547Z&quot;,&quot;start_time&quot;:&quot;2020-04-22T06:02:24.434586Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;">from</span> plotnine <span class="im" style="color: #00769E;">import</span> unit</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>ImportError: cannot import name 'unit' from 'plotnine' (C:\Users\CHANNO.OOCLDM\AppData\Local\Continuum\anaconda3\lib\site-packages\plotnine\__init__.py)</code></pre>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2020-04-22T06:05:50.146757Z&quot;,&quot;start_time&quot;:&quot;2020-04-22T06:05:49.876480Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># Change position of the legend</span></span>
<span id="cb48-2">x<span class="op" style="color: #5E5E5E;">=</span>multiline <span class="op" style="color: #5E5E5E;">+</span> theme(</span>
<span id="cb48-3">  axis_ticks_major_x <span class="op" style="color: #5E5E5E;">=</span> element_line(color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"#333333"</span>), </span>
<span id="cb48-4">  axis_ticks_length <span class="op" style="color: #5E5E5E;">=</span>  <span class="fl" style="color: #AD0000;">0.26</span>)</span>
<span id="cb48-5"></span>
<span id="cb48-6">x</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-13-Recreating-the-BBC-graphs-in-Python-plotnine-altair_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>&lt;ggplot: (-9223371941310025320)&gt;</code></pre>
</div>
</div>
</section>
<section id="altair-5" class="level2">
<h2 class="anchored" data-anchor-id="altair-5">altair</h2>
</section>
</section>
<section id="make-changes-to-the-axes" class="level1">
<h1>Make changes to the axes</h1>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;">## hide</span></span></code></pre></div>
</div>
<section id="ggplot-5" class="level2">
<h2 class="anchored" data-anchor-id="ggplot-5">ggplot</h2>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"></code></pre></div>
</section>
<section id="plotnine-6" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-6">plotnine</h2>
</section>
<section id="altair-6" class="level2">
<h2 class="anchored" data-anchor-id="altair-6">altair</h2>
</section>
</section>
<section id="add-annotations" class="level1">
<h1>Add annotations</h1>
<div class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;">## hide</span></span></code></pre></div>
</div>
<section id="ggplot-6" class="level2">
<h2 class="anchored" data-anchor-id="ggplot-6">ggplot</h2>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"></code></pre></div>
</section>
<section id="plotnine-7" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-7">plotnine</h2>
</section>
<section id="altair-7" class="level2">
<h2 class="anchored" data-anchor-id="altair-7">altair</h2>
</section>
</section>
<section id="work-with-small-multiples" class="level1">
<h1>Work with small multiples</h1>
<div class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;">## hide</span></span></code></pre></div>
</div>
<section id="ggplot-7" class="level2">
<h2 class="anchored" data-anchor-id="ggplot-7">ggplot</h2>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"></code></pre></div>
</section>
<section id="plotnine-8" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-8">plotnine</h2>
</section>
<section id="altair-8" class="level2">
<h2 class="anchored" data-anchor-id="altair-8">altair</h2>
</section>
</section>
<section id="do-something-else-entirely" class="level1">
<h1>Do something else entirely</h1>
<div class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;">## hide</span></span></code></pre></div>
</div>
<section id="ggplot-8" class="level2">
<h2 class="anchored" data-anchor-id="ggplot-8">ggplot</h2>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"></code></pre></div>
</section>
<section id="plotnine-9" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-9">plotnine</h2>
</section>
<section id="altair-9" class="level2">
<h2 class="anchored" data-anchor-id="altair-9">altair</h2>
</section>
</section>
<section id="make-a-dumbbell-chart" class="level1">
<h1>Make a dumbbell chart</h1>
<section id="ggplot-9" class="level2">
<h2 class="anchored" data-anchor-id="ggplot-9">ggplot</h2>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="co" style="color: #5E5E5E;">#Prepare data</span></span>
<span id="cb58-2">dumbbell_df <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1967</span> <span class="sc" style="color: #5E5E5E;">|</span> year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-4">  <span class="fu" style="color: #4758AB;">select</span>(country, year, lifeExp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-5">  <span class="fu" style="color: #4758AB;">spread</span>(year, lifeExp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">gap =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">2007</span><span class="st" style="color: #20794D;">`</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">1967</span><span class="st" style="color: #20794D;">`</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-7">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(gap)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-8">  <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb58-9"></span>
<span id="cb58-10"><span class="fu" style="color: #4758AB;">ggplot</span>(hist_df, <span class="fu" style="color: #4758AB;">aes</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb58-11">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">binwidth =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"#1380A1"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb58-12">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">colour=</span><span class="st" style="color: #20794D;">"#333333"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb58-13">  <span class="fu" style="color: #4758AB;">bbc_style</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb58-14">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">35</span>, <span class="dv" style="color: #AD0000;">95</span>),</span>
<span id="cb58-15">                     <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">90</span>, <span class="at" style="color: #657422;">by =</span> <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb58-16">                     <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"40"</span>, <span class="st" style="color: #20794D;">"50"</span>, <span class="st" style="color: #20794D;">"60"</span>, <span class="st" style="color: #20794D;">"70"</span>, <span class="st" style="color: #20794D;">"80"</span>, <span class="st" style="color: #20794D;">"90 years"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb58-17">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"How life expectancy varies"</span>,</span>
<span id="cb58-18">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Distribution of life expectancy in 2007"</span>)</span></code></pre></div>
</section>
<section id="plotnine-10" class="level2">
<h2 class="anchored" data-anchor-id="plotnine-10">plotnine</h2>
<p>Not available with <code>plotnine</code>.</p>
</section>
<section id="altair-10" class="level2">
<h2 class="anchored" data-anchor-id="altair-10">altair</h2>
<div class="cell" data-execution_count="139">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">dumbbell_chart_altair <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb59-2">alt.Chart(dumbbell_chart_df).</span>
<span id="cb59-3">    mark_rule()</span>
<span id="cb59-4">)</span>
<span id="cb59-5"></span>
<span id="cb59-6">dumbbell_chart_altair</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="139">
<pre><code>()</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2020-04-13-recreating-the-bbc-graphs-in-python-plotnine-altair.html</guid>
  <pubDate>Sun, 12 Apr 2020 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Making Powerpoint Ready Chart with matplotlib</title>
  <link>https://noklam.github.io/blog/posts/2020-04-10-presentation-ready-chart.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/posts/nb_img/powerpoint-ready-chart.png" title="Over-exaggerated title" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Large Font Size Title</figcaption><p></p>
</figure>
</div>
<p>In reality, you probably don’t need a title as big as this one. But using library defautls often is not the best choice.</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> make_scatter_plot():</span>
<span id="cb1-2">    num_points <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb1-3">    gradient <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb1-4">    x <span class="op" style="color: #5E5E5E;">=</span> np.array(<span class="bu" style="color: null;">range</span>(num_points))</span>
<span id="cb1-5">    y <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(num_points) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> x <span class="op" style="color: #5E5E5E;">*</span> gradient</span>
<span id="cb1-6">    fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb1-7">    ax.scatter(x, y)</span>
<span id="cb1-8">    ax.set_title(<span class="st" style="color: #20794D;">'A Simple Scatter Plot'</span>)</span>
<span id="cb1-9">    ax.set_xlabel(<span class="st" style="color: #20794D;">'x'</span>)</span>
<span id="cb1-10">    ax.set_ylabel(<span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb1-11">    plt.show()</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;">def</span> make_line_plot():</span>
<span id="cb1-14">    num_points <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb1-15">    gradient <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb1-16">    x <span class="op" style="color: #5E5E5E;">=</span> np.array(<span class="bu" style="color: null;">range</span>(num_points))</span>
<span id="cb1-17">    y <span class="op" style="color: #5E5E5E;">=</span> np.random.randn(num_points) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> x <span class="op" style="color: #5E5E5E;">*</span> gradient</span>
<span id="cb1-18">    fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb1-19">    ax.plot(x, y, <span class="st" style="color: #20794D;">'-'</span>)</span>
<span id="cb1-20">    ax.set_title(<span class="st" style="color: #20794D;">'A Simple Line Chart'</span>)</span>
<span id="cb1-21">    ax.set_xlabel(<span class="st" style="color: #20794D;">'x'</span>)</span>
<span id="cb1-22">    ax.set_ylabel(<span class="st" style="color: #20794D;">'y'</span>)</span>
<span id="cb1-23">    plt.show()</span></code></pre></div>
</details>
</div>
<section id="the-problem-of-library-defaults" class="level1">
<h1>The Problem of library defaults</h1>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">make_scatter_plot()</span>
<span id="cb2-2">make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Your insight is as best as your audience understand. According to <a href="https://www.anaconda.com/state-of-data-science-2021">Anaconda State of the Data Science 2021</a>, data scientist spend almost one third of their time for data visualization, report and presentation. Human perception is largely based on <strong>visual</strong>, a easy-to-read chart is much more likely to sell your idea with a custom matplotlib pyplot chart. <img src="https://noklam.github.io/blog/posts/nb_img/data_scientist_at_work.png" class="img-fluid" alt="Data Scientist at Work from"></p>
<p>There is nothing wrong with <code>matplotlib</code>, it is custom for a user sit in front of a monitor. When it comes to presentation, you really should make some adjustment for your audience. If your organization is big enough, you may also consider to create a theme that shared across the organisation to style it consistently, <a href="https://github.com/quantumblacklabs/qbstyles">qbstyle</a> is one of the examples.</p>
<p>For typical data practitioner, it’s easy to start with the following tips.</p>
</section>
<section id="apply-matplotlib-theme" class="level1">
<h1>Apply matplotlib theme</h1>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;">with</span> plt.style.context(<span class="st" style="color: #20794D;">'ggplot'</span>): <span class="co" style="color: #5E5E5E;"># Or plt.style.use('presentation') for global setting</span></span>
<span id="cb3-2">    make_scatter_plot()</span>
<span id="cb3-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Much better right?</p>
<p>There is nothing wrong with the chart if you are viewing it in front of your monitor. However, this is not PowerPoint ready as the font size are too small for a presentation. Adjusting font size manually is a painful process, instead, you could have preset theme to automate this process.</p>
</section>
<section id="make-powerpoint-ready-charts" class="level1">
<h1>Make PowerPoint-ready charts</h1>
<p>Luckily, there is some easy way to prepare PowerPoint-ready charts. I created a presentation.mplstyle file as follow. This is not a perfect theme, but it’s a good starting point and you can finetune the parameters to build your custom theme.</p>
<p>Custom <code>presentation</code> theme</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">axes.titlesize : <span class="dv" style="color: #AD0000;">24</span></span>
<span id="cb4-2">axes.labelsize : <span class="dv" style="color: #AD0000;">24</span></span>
<span id="cb4-3">axes.location: <span class="st" style="color: #20794D;">'left'</span></span>
<span id="cb4-4">lines.linewidth : <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb4-5">lines.markersize : <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-6">xtick.labelsize : <span class="dv" style="color: #AD0000;">18</span></span>
<span id="cb4-7">ytick.labelsize : <span class="dv" style="color: #AD0000;">18</span></span>
<span id="cb4-8">figure.figsize : <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">6</span></span>
<span id="cb4-9">figure.titlesize: <span class="dv" style="color: #AD0000;">24</span></span></code></pre></div>
<p>Once we have the <code>presentation</code> theme ready, we can start composing it with the <code>ggplot</code> to build charts.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>You need to create a <code>presentation.mplstyle</code> file and copy it to a location that <code>matplotlib</code> can find. You can follow the steps below to create your own <code>presentation.mplstyle</code></p>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;">with</span> plt.style.context([<span class="st" style="color: #20794D;">'presentation'</span>, <span class="st" style="color: #20794D;">'ggplot'</span>]):</span>
<span id="cb5-2">    make_scatter_plot()</span>
<span id="cb5-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>If you are careful enough, you will notice the font size of the title is not correct. This is because <code>ggplot</code> theme overwrite my theme. To make it right, you just need to switch the order so that your theme will overwrite conflict settings.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;">with</span> plt.style.context([<span class="st" style="color: #20794D;">'ggplot'</span>, <span class="st" style="color: #20794D;">'presentation'</span>]):</span>
<span id="cb6-2">    make_scatter_plot()</span>
<span id="cb6-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>I actually disable the grid in my <code>presentation</code> theme, which conflicts with <code>fivethirtyeight</code> configuration. If conflict configs exist, it resolved base on your order. See the same plot with ‘presentation’,‘fivethirtyeight’ in reverse order.</p>
<p>To give you a sense how this affect your presenation, I put it into a Powerpoint, see if you feel the difference.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/nb_img/ppt_low_res_01.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ppt_low_res_01.png</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/nb_img/ppt_high_res_02.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ppt_high_res_02.png</figcaption><p></p>
</figure>
</div>
<section id="avoid-low-resolution-chart" class="level2">
<h2 class="anchored" data-anchor-id="avoid-low-resolution-chart">Avoid Low Resolution Chart</h2>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Believe it or not, a low resolution chart looks much less conviencing. Taking screenshot with larger charts helps you to preserve the resolution.</p>
</div>
</div>
<ul>
<li>Resolution of the chart is much better</li>
<li>More obvious Title &amp; Label (Try take a few step back from your monitor, see if you can read it)</li>
</ul>
</section>
</section>
<section id="define-once-use-everywhere" class="level1">
<h1>Define Once, Use Everywhere</h1>
<p>It could be troublesome if you need to define the same file over and over in different computer/environment. You can actually use a URL. I have put my own theme in GitHub so I can always access it from anywhere.</p>
<p>https://raw.githubusercontent.com/noklam/mediumnok/master/_demo/python-viz/presentation.mplstyle</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">my_style <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://raw.githubusercontent.com/noklam/blog/master/_demo/python-viz/presentation.mplstyle'</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;">with</span> plt.style.context([<span class="st" style="color: #20794D;">'ggplot'</span>, my_style]):</span>
<span id="cb7-4">    make_scatter_plot()</span>
<span id="cb7-5">    make_line_plot()</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I hope this blog helps you to prepare Powerpoint-ready charts better, happy coding!</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2020-04-10-presentation-ready-chart.html</guid>
  <pubDate>Thu, 09 Apr 2020 23:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/posts/images/powerpoint-ready-chart.png" medium="image" type="image/png"/>
</item>
<item>
  <title>data augmentation - Understand MixUp and Beta Distribution</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/posts/2020-02-09-MixUp-and-Beta-Distribution.html</link>
  <description><![CDATA[ 



<p>GitHub: https://github.com/noklam/notadatascientist/tree/master/demo/mixup-beta</p>
<section id="understand-mixup-augmentation-beta-distribution" class="level1">
<h1>Understand Mixup Augmentation &amp; Beta Distribution</h1>
<p>Implementation In the original article, the authors suggested three things:</p>
<ol type="1">
<li>Create two separate dataloaders and draw a batch from each at every iteration to mix them up</li>
<li>Draw a t value following a beta distribution with a parameter alpha (0.4 is suggested in their article)</li>
<li>Mix up the two batches with the same value t.</li>
<li>Use one-hot encoded targets</li>
</ol>
<p>Source: https://forums.fast.ai/t/mixup-data-augmentation/22764 (Sylvain Gugger)</p>
<section id="beta-distribution" class="level2">
<h2 class="anchored" data-anchor-id="beta-distribution">Beta Distribution</h2>
<p>Beta distribution is control by two parameters, α and β with interval [0, 1], which make it useful for Mixup. Mixup is basically a superposition of two image with a parameter t. Instead of using a dog image, with Mixup, you may end up have a image which is 0.7 dog + 0.3 cat</p>
<p>To get some sense of what a beta distribution is, let plot beta distribution with different alpha and beta to see its effect</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> math</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> tensor</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># PyTorch has a log-gamma but not a gamma, so we'll create one</span></span>
<span id="cb2-2">Γ <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">lambda</span> x: x.lgamma().exp()</span>
<span id="cb2-3">facts <span class="op" style="color: #5E5E5E;">=</span> [math.factorial(i) <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">7</span>)]</span>
<span id="cb2-4"></span>
<span id="cb2-5">plt.plot(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">7</span>), facts, <span class="st" style="color: #20794D;">'ro'</span>)</span>
<span id="cb2-6">plt.plot(torch.linspace(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">6</span>), Γ(torch.linspace(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">6</span>)<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb2-7">plt.legend([<span class="st" style="color: #20794D;">'factorial'</span>,<span class="st" style="color: #20794D;">'Γ'</span>])<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/assets/output_5_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="when-α-β" class="level1">
<h1>When α != β</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">_,ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb3-2">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="fl" style="color: #AD0000;">0.01</span>,<span class="fl" style="color: #AD0000;">0.99</span>, <span class="dv" style="color: #AD0000;">100000</span>)</span>
<span id="cb3-3">a_ls <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">5.0</span>,<span class="fl" style="color: #AD0000;">1.0</span>,<span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">1.0</span>]</span>
<span id="cb3-4">b_ls <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">1.0</span>,<span class="fl" style="color: #AD0000;">5.0</span>,<span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">1.0</span>]</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(a_ls, b_ls):</span>
<span id="cb3-7">    a<span class="op" style="color: #5E5E5E;">=</span>tensor(a,dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">float</span>)</span>
<span id="cb3-8">    b<span class="op" style="color: #5E5E5E;">=</span>tensor(b,dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">float</span>)</span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">#     y = (x.pow(α-1) * (1-x).pow(α-1)) / (gamma_func(α ** 2) / gamma_func(α))</span></span>
<span id="cb3-10">    y <span class="op" style="color: #5E5E5E;">=</span> (x<span class="op" style="color: #5E5E5E;">**</span>(a<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">*</span> (<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>x)<span class="op" style="color: #5E5E5E;">**</span>(b<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)) <span class="op" style="color: #5E5E5E;">/</span> (Γ(a)<span class="op" style="color: #5E5E5E;">*</span>Γ(b) <span class="op" style="color: #5E5E5E;">/</span> Γ(a<span class="op" style="color: #5E5E5E;">+</span>b))</span>
<span id="cb3-11">    ax.plot(x,y)</span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;">#     ax.set_title(f"α={a.numpy()[0]:.1}")</span></span>
<span id="cb3-13">    ax.set_title(<span class="st" style="color: #20794D;">'Beta distribution when α != β '</span>)</span>
<span id="cb3-14">    ax.legend([<span class="ss" style="color: #20794D;">f'α = </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">float</span>(a)<span class="sc" style="color: #5E5E5E;">:.2}</span><span class="ss" style="color: #20794D;">, β = </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">float</span>(b)<span class="sc" style="color: #5E5E5E;">:.2}</span><span class="ss" style="color: #20794D;">'</span> <span class="cf" style="color: #003B4F;">for</span> a,b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(a_ls, b_ls)])</span></code></pre></div>
<pre><code>C:\ProgramData\Anaconda3\envs\fastai2\lib\site-packages\IPython\core\pylabtools.py:132: UserWarning: Creating legend with loc="best" can be slow with large amounts of data.
  fig.canvas.print_figure(bytes_io, **kw)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/assets/output_7_1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p>A few observations from this graph. * α and β control the curve symmetrically, the blue line is symmetric with the orange line. * when α and β = 1, it reduce to uniform distribution * when α = β, the distribution is a symmetric distribution</p>
</section>
<section id="when-α-β-1" class="level1">
<h1>When α != β</h1>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">_,ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb5-2">x <span class="op" style="color: #5E5E5E;">=</span> torch.linspace(<span class="fl" style="color: #AD0000;">0.01</span>,<span class="fl" style="color: #AD0000;">0.99</span>, <span class="dv" style="color: #AD0000;">100000</span>)</span>
<span id="cb5-3">a_ls <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.9</span>]</span>
<span id="cb5-4">b_ls <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.9</span>]</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(a_ls, b_ls):</span>
<span id="cb5-7">    a<span class="op" style="color: #5E5E5E;">=</span>tensor(a,dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">float</span>)</span>
<span id="cb5-8">    b<span class="op" style="color: #5E5E5E;">=</span>tensor(b,dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">float</span>)</span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;">#     y = (x.pow(α-1) * (1-x).pow(α-1)) / (gamma_func(α ** 2) / gamma_func(α))</span></span>
<span id="cb5-10">    y <span class="op" style="color: #5E5E5E;">=</span> (x<span class="op" style="color: #5E5E5E;">**</span>(a<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">*</span> (<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>x)<span class="op" style="color: #5E5E5E;">**</span>(b<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)) <span class="op" style="color: #5E5E5E;">/</span> (Γ(a)<span class="op" style="color: #5E5E5E;">*</span>Γ(b) <span class="op" style="color: #5E5E5E;">/</span> Γ(a<span class="op" style="color: #5E5E5E;">+</span>b))</span>
<span id="cb5-11">    ax.plot(x,y)</span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;">#     ax.set_title(f"α={a.numpy()[0]:.1}")</span></span>
<span id="cb5-13">    ax.set_title(<span class="st" style="color: #20794D;">'Beta distribution when α = β '</span>)</span>
<span id="cb5-14">    ax.legend([<span class="ss" style="color: #20794D;">f'α = </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">float</span>(a)<span class="sc" style="color: #5E5E5E;">:.2}</span><span class="ss" style="color: #20794D;">, β = </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">float</span>(b)<span class="sc" style="color: #5E5E5E;">:.2}</span><span class="ss" style="color: #20794D;">'</span> <span class="cf" style="color: #003B4F;">for</span> a,b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(a_ls, b_ls)])</span></code></pre></div>
<pre><code>C:\ProgramData\Anaconda3\envs\fastai2\lib\site-packages\IPython\core\pylabtools.py:132: UserWarning: Creating legend with loc="best" can be slow with large amounts of data.
  fig.canvas.print_figure(bytes_io, **kw)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/assets/output_10_1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p>As we remember, when α = β =1, it is an uniform distribution. When α = β , when α is small, most density is concentrated around 0 and 1, and when α increase, the distribution get more evenly distributed.</p>
<p>The default for α suggested by the paper is 0.4</p>


</section>

 ]]></description>
  <category>ML</category>
  <guid>https://noklam.github.io/blog/posts/2020-02-09-MixUp-and-Beta-Distribution.html</guid>
  <pubDate>Sun, 09 Feb 2020 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/posts/assets/output_5_0.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Hydra - Config Composition for Machine Learning Project</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/posts/2020-02-08-Config-Composition-with-Hydra-for-Machine-Learning-Experiments.html</link>
  <description><![CDATA[ 



<p>GitHub: https://github.com/noklam/notadatascientist/tree/master/demo/hydra-example</p>
<p>Machine learning project involves large number of hyperparmeters. In many case you could have multiple config, e.g.&nbsp;differnet dataset, database connection, train/test mode. <strong>hydra</strong> provide a simple Command Line Interface that is useful for composing different experiment configs. In essence, it compose different files to a large config setting. It offers you the common Object Oriented Programming with YAML file. Allow you to have clear structure of configurations.</p>
<p>Assume you have a config.yaml like this, where run_mode and hyperparmeter are separate folder to hold different choice of parameters. You can set defaults for them with the following structure.</p>
<section id="folder-structure" class="level2">
<h2 class="anchored" data-anchor-id="folder-structure">Folder Structure</h2>
<pre><code>config.yaml
demo.py
run_mode
  - train.yaml
  - test.yaml
hyperparmeter
  - base.yaml</code></pre>
</section>
<section id="config.yaml" class="level2">
<h2 class="anchored" data-anchor-id="config.yaml">config.yaml</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;">defaults</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">run_mode</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> train</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">hyperparameter</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> base</span></span></code></pre></div>
<p>The benefit of using such approach is that it makes comparsion of experiments much easier. Instead of going through the parameters list, you only focus on the argument(the difference). It helps organize machine learning results and ease a lot of pain in tracking the model performance.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> hydra</span>
<span id="cb3-2"><span class="im" style="color: #00769E;">from</span> omegaconf <span class="im" style="color: #00769E;">import</span> DictConfig</span>
<span id="cb3-3"><span class="at" style="color: #657422;">@hydra.main</span>(config_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"config.yaml"</span>)</span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">def</span> my_app(cfg : DictConfig) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-5">    <span class="bu" style="color: null;">print</span>(cfg.pretty())</span>
<span id="cb3-6"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb3-7">    my_app()</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">python demo.py </span></code></pre></div>
<pre><code>gamma: 0.01
learning_rate: 0.01
run_mode: train
week: 8</code></pre>
<p>For example, with a simple example with 4 parameters only, you can simply run the experiment with default</p>
</section>
<section id="override-default-parameters" class="level1">
<h1>Override default parameters</h1>
<p>You can easily overrite the learning rate with an argument, it would be very clear that learning rate is the only changing parameter with this approach</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">python demo.py learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span></span></code></pre></div>
<pre><code>gamma: 0.01
learning_rate: 0.1
run_mode: train
week: 8</code></pre>
<p>In somecase, you may only need to test a model instead of changing it.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">python demo.py learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span> run_mode<span class="op" style="color: #5E5E5E;">=</span>test</span></code></pre></div>
<pre><code>gamma: 0.01
learning_rate: 0.1
run_mode: test
week: 8
    </code></pre>
<p>It also safeguard your experiment if you pass in some parameters that is not exist</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">!</span>python demo.py typo<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span></span></code></pre></div>
<pre><code>Traceback (most recent call last):
  File "demo.py", line 7, in &lt;module&gt;
    my_app()
 "C:\ProgramData\Anaconda3\lib\site-packages\omegaconf\dictconfig.py", line 41, in __setitem__
    "Accessing unknown key in a struct : {}".format(self.get_full_key(key))
KeyError: 'Accessing unknown key in a struct : typo'</code></pre>
</section>
<section id="multirun-combination-of-parameters" class="level1">
<h1>–Multirun, Combination of parameters</h1>
<p>In case you want to gridsearch paramters, which is very common in machine learning, you can use an additional argument <strong>multirun</strong> to do that easily.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">!</span>python demo.py <span class="op" style="color: #5E5E5E;">--</span>multirun learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>,<span class="fl" style="color: #AD0000;">0.01</span>,<span class="fl" style="color: #AD0000;">0.001</span> gamma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>,<span class="fl" style="color: #AD0000;">0.01</span></span></code></pre></div>
<pre><code>[2020-02-08 19:28:46,095][HYDRA] Sweep output dir : multirun/2020-02-08/19-28-46
[2020-02-08 19:28:46,102][HYDRA] Launching 6 jobs locally
[2020-02-08 19:28:46,103][HYDRA]    #0 : learning_rate=0.1 gamma=0.1
gamma: 0.1
learning_rate: 0.1
run_mode: train
week: 8

[2020-02-08 19:28:46,192][HYDRA]    #1 : learning_rate=0.1 gamma=0.01
gamma: 0.01
learning_rate: 0.1
run_mode: train
week: 8

... SKIPPED</code></pre>


</section>

 ]]></description>
  <category>python</category>
  <category>ML</category>
  <guid>https://noklam.github.io/blog/posts/2020-02-08-Config-Composition-with-Hydra-for-Machine-Learning-Experiments.html</guid>
  <pubDate>Sat, 08 Feb 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
