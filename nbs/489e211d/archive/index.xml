<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>noklam.github.io</title>
<link>https://noklam.github.io/archive/index.html</link>
<atom:link href="https://noklam.github.io/archive/index.xml" rel="self" type="application/rss+xml"/>
<description>Quarto Blog</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Tue, 08 Nov 2022 00:00:00 GMT</lastBuildDate>
<item>
  <title>Demo of debugging Kedro pipeline with noetebook</title>
  <link>https://noklam.github.io/archive/posts/2022-11-08-kedro-debugging.html</link>
  <description><![CDATA[ 



<section id="steps-to-debug-kedro-pipeline-in-a-notebook" class="level1">
<h1>Steps to debug Kedro pipeline in a notebook</h1>
<ol type="1">
<li>Read from stack trace - find out the line of code that produce the error</li>
<li>Find which node this function belongs to</li>
<li>Trying to rerun the pipeline just before this node</li>
<li>If it’s not a persisted dataset, you need to change it in <code>catalog.yml</code>, and re-run the pipeline, error is thrown again</li>
<li><code>session</code> has already been used once, so if you call session again it will throw error. (so he had a wrapper function that recreate <code>session</code> and do something similar to <code>session.run</code></li>
<li>Create a new session or <code>%reload_kedro</code>?</li>
<li>Now <code>catalog.load</code> that persisted dataset, i.e.&nbsp;<code>func(catalog.load("some_data"))</code></li>
<li>Copy the source code of <code>func</code> to notebook, it would work if the function itself is the node function, but if it is some function buried deep down, that’s a lot more copy-pasting and change of import maybe.</li>
<li>Change the source code and make it work in the notebook</li>
<li>Rerun the pipeline to ensure everything works</li>
</ol>
</section>
<section id="running-session-as-usual" class="level1">
<h1>Running Session as Usual</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">%</span>reload_kedro</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:44:22] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Resolved project path as:                                              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#132" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">132</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #800080; text-decoration-color: #800080">/Users/Nok_Lam_Chan/dev/kedro_gallery/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">jupyter-debug-demo.</span>              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         To set a different path, run <span style="color: #008000; text-decoration-color: #008000">'%reload_kedro &lt;project_root&gt;'</span>            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:44:24] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter_debug_demo                                       <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#101" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">101</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#102" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">102</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Registered line magic <span style="color: #008000; text-decoration-color: #008000">'run_viz'</span>                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#108" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">108</span></a>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">session</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">kedro.framework.session.session.KedroSession</span><span style="color: #000000; text-decoration-color: #000000"> object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7fc47a1a0be0</span><span style="font-weight: bold">&gt;</span>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pipelines</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'__default__'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Pipeline</span><span style="font-weight: bold">([</span>
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Node</span><span style="font-weight: bold">(</span>split_data, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'example_iris_data'</span>, <span style="color: #008000; text-decoration-color: #008000">'parameters'</span><span style="font-weight: bold">]</span>, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'X_train'</span>, <span style="color: #008000; text-decoration-color: #008000">'X_test'</span>, <span style="color: #008000; text-decoration-color: #008000">'y_train'</span>, <span style="color: #008000; text-decoration-color: #008000">'y_test'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'split'</span><span style="font-weight: bold">)</span>,
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Node</span><span style="font-weight: bold">(</span>make_predictions, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'X_train'</span>, <span style="color: #008000; text-decoration-color: #008000">'X_test'</span>, <span style="color: #008000; text-decoration-color: #008000">'y_train'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span>, <span style="color: #008000; text-decoration-color: #008000">'make_predictions'</span><span style="font-weight: bold">)</span>,
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Node</span><span style="font-weight: bold">(</span>report_accuracy, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'y_pred'</span>, <span style="color: #008000; text-decoration-color: #008000">'y_test'</span><span style="font-weight: bold">]</span>, <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, <span style="color: #008000; text-decoration-color: #008000">'report_accuracy'</span><span style="font-weight: bold">)</span>
<span style="font-weight: bold">])}</span>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">session.run()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter-debug-demo                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">session.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py#340" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">340</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:44:25] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'example_iris_data'</span> <span style="font-weight: bold">(</span>CSVDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'parameters'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                  <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: split: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">split_data</span><span style="font-weight: bold">([</span>example_iris_data,parameters<span style="font-weight: bold">])</span> -&gt;         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="font-weight: bold">[</span>X_train,X_test,y_train,y_test<span style="font-weight: bold">]</span>                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: make_predictions: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">make_predictions</span><span style="font-weight: bold">([</span>X_train,X_test,y_train<span style="font-weight: bold">])</span> <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         -&gt; <span style="font-weight: bold">[</span>y_pred<span style="font-weight: bold">]</span>                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>1</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: report_accuracy: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">report_accuracy</span><span style="font-weight: bold">([</span>y_pred,y_test<span style="font-weight: bold">])</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">ERROR   </span> Node <span style="color: #008000; text-decoration-color: #008000">'report_accuracy: report_accuracy([y_pred,y_test]) -&gt; None'</span> failed    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#352" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">352</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         with error:                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         Simulate some bug here                                                     <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #800000; text-decoration-color: #800000">WARNING </span> There are <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> nodes that have not run.                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py#202" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">202</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         You can resume the pipeline run from the nearest nodes with persisted    <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         inputs by adding the following argument to your previous command:        <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>           --from-nodes <span style="color: #008000; text-decoration-color: #008000">"report_accuracy"</span>                                         <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">╭─────────────────────────────── </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ────────────────────────────────╮</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">833844929.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: 1&gt;</span> <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/833844929.py'</span>                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">session.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">404</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">401 │   │   </span>)                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">402 │   │   </span>                                                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">403 │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>404 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   │   </span>run_result = runner.run(                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">405 │   │   │   │   </span>filtered_pipeline, catalog, hook_manager, session_id                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">406 │   │   │   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">407 │   │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_called = <span style="color: #0000ff; text-decoration-color: #0000ff">True</span>                                                        <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">88</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                                <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 85 │   │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.info(                                                             <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 86 │   │   │   │   </span><span style="color: #808000; text-decoration-color: #808000">"Asynchronous mode is enabled for loading and saving data"</span>                 <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 87 │   │   │   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span> 88 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run(pipeline, catalog, hook_manager, session_id)                             <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 89 │   │   </span>                                                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 90 │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.info(<span style="color: #808000; text-decoration-color: #808000">"Pipeline execution completed successfully."</span>)                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 91 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">sequential_runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">70</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">67 │   │   </span>                                                                                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">68 │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">for</span> exec_index, node <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> <span style="color: #00ffff; text-decoration-color: #00ffff">enumerate</span>(nodes):                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">69 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                            <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>70 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   │   │   </span>run_node(node, catalog, hook_manager, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._is_async, session_id)           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">71 │   │   │   │   </span>done_nodes.add(node)                                                        <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">72 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span>:                                                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">73 │   │   │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._suggest_resume_scenario(pipeline, done_nodes, catalog)                <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">304</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run_node</span>                          <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">301 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> is_async:                                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">302 │   │   </span>node = _run_node_async(node, catalog, hook_manager, session_id)                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">303 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">else</span>:                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>304 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span>node = _run_node_sequential(node, catalog, hook_manager, session_id)               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">305 │   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">306 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">for</span> name <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> node.confirms:                                                             <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">307 │   │   </span>catalog.confirm(name)                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">398</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run_node_sequential</span>              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">395 │   </span>)                                                                                      <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">396 │   </span>inputs.update(additional_inputs)                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">397 │   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>398 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   </span>outputs = _call_node_run(                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">399 │   │   </span>node, catalog, inputs, is_async, hook_manager, session_id=session_id               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">400 │   </span>)                                                                                      <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">401 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">366</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_call_node_run</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">363 │   │   │   </span>is_async=is_async,                                                             <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">364 │   │   │   </span>session_id=session_id,                                                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">365 │   │   </span>)                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>366 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> exc                                                                          <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">367 │   </span>hook_manager.hook.after_node_run(                                                      <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">368 │   │   </span>node=node,                                                                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">369 │   │   </span>catalog=catalog,                                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">356</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_call_node_run</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">353 </span>) -&gt; Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any]:                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">354 │   # pylint: disable=too-many-arguments</span>                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">355 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>356 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span>outputs = node.run(inputs)                                                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">357 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span> <span style="color: #0000ff; text-decoration-color: #0000ff">as</span> exc:                                                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">358 │   │   </span>hook_manager.hook.on_node_error(                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">359 │   │   │   </span>error=exc,                                                                     <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">353</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">350 │   │   # purposely catch all exceptions</span>                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">351 │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span> <span style="color: #0000ff; text-decoration-color: #0000ff">as</span> exc:                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">352 │   │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.error(<span style="color: #808000; text-decoration-color: #808000">"Node '%s' failed with error: \n%s"</span>, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>), <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>(exc))   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>353 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> exc                                                                      <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">354 │   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">355 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">def</span> <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_no_inputs</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>, inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any]):                                 <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">356 │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> inputs:                                                                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">344</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">341 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>):                                            <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">342 │   │   │   │   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_one_input(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">list</span>):                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>344 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   │   │   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_list(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                        <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">345 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">dict</span>):                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">346 │   │   │   │   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_dict(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                        <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">347 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">384</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_list</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">381 │   │   │   │   </span><span style="color: #808000; text-decoration-color: #808000">f"{</span><span style="color: #00ffff; text-decoration-color: #00ffff">sorted</span>(inputs.keys())<span style="color: #808000; text-decoration-color: #808000">}."</span>                                                <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382 │   │   │   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">383 │   │   # Ensure the function gets the inputs in the correct order</span>                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>384 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">return</span> <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._func(*(inputs[item] <span style="color: #0000ff; text-decoration-color: #0000ff">for</span> item <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> node_inputs))                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">385 │   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">386 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">def</span> <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_dict</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>, inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any], node_inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>]):         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">387 │   │   # Node inputs and provided run inputs should completely overlap</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/dev/kedro_gallery/jupyter-debug-demo/src/jupyter_debug_demo/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">nodes.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">74</span> in   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #00ff00; text-decoration-color: #00ff00">report_accuracy</span>                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">71 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">│   │   </span><span style="color: #808000; text-decoration-color: #808000">y_pred: Predicted target.</span>                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">72 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">│   │   </span><span style="color: #808000; text-decoration-color: #808000">y_test: True target.</span>                                                                <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">73 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">│   </span><span style="color: #808000; text-decoration-color: #808000">"""</span>                                                                                     <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>74 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> <span style="color: #00ffff; text-decoration-color: #00ffff">ValueError</span>(<span style="color: #808000; text-decoration-color: #808000">"Simulate some bug here"</span>)                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">75 │   </span>accuracy = (y_pred == y_test).sum() / <span style="color: #00ffff; text-decoration-color: #00ffff">len</span>(y_test)                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">76 │   </span>logger = logging.getLogger(<span style="color: #ff0000; text-decoration-color: #ff0000">__name__</span>)                                                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">77 │   </span>logger.info(<span style="color: #808000; text-decoration-color: #808000">"Model has accuracy of %.3f on test data."</span>, accuracy)                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">ValueError: </span>Simulate some bug here
</pre>
</div>
</div>
<ol type="1">
<li><p>Read from stack trace - find out the line of code that produce the error</p></li>
<li><p>Find which node this function belongs to</p></li>
<li><p>Trying to rerun the pipeline just before this node</p></li>
<li><p>If it’s not a persisted dataset, you need to change it in <code>catalog.yml</code>, and re-run the pipeline, error is thrown again</p></li>
<li><p><code>session</code> has already been used once, so if you call session again it will throw error. (so he had a wrapper function that recreate <code>session</code> and do something similar to <code>session.run</code></p></li>
<li><p>Create a new session or <code>%reload_kedro</code> and re-run?</p></li>
</ol>
<p>This is not efficient because in interactive workflow, these intermdiate variables is likely store in the catalog already.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;">%</span>reload_kedro</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:46:49] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Resolved project path as:                                              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#132" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">132</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #800080; text-decoration-color: #800080">/Users/Nok_Lam_Chan/dev/kedro_gallery/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">jupyter-debug-demo.</span>              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         To set a different path, run <span style="color: #008000; text-decoration-color: #008000">'%reload_kedro &lt;project_root&gt;'</span>            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:46:50] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter_debug_demo                                       <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#101" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">101</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#102" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">102</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Registered line magic <span style="color: #008000; text-decoration-color: #008000">'run_viz'</span>                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#108" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">108</span></a>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">session.run()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:46:53] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter-debug-demo                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">session.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py#340" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">340</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:46:54] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'example_iris_data'</span> <span style="font-weight: bold">(</span>CSVDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'parameters'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                  <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: split: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">split_data</span><span style="font-weight: bold">([</span>example_iris_data,parameters<span style="font-weight: bold">])</span> -&gt;         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="font-weight: bold">[</span>X_train,X_test,y_train,y_test<span style="font-weight: bold">]</span>                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: make_predictions: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">make_predictions</span><span style="font-weight: bold">([</span>X_train,X_test,y_train<span style="font-weight: bold">])</span> <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         -&gt; <span style="font-weight: bold">[</span>y_pred<span style="font-weight: bold">]</span>                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>1</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: report_accuracy: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">report_accuracy</span><span style="font-weight: bold">([</span>y_pred,y_test<span style="font-weight: bold">])</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">ERROR   </span> Node <span style="color: #008000; text-decoration-color: #008000">'report_accuracy: report_accuracy([y_pred,y_test]) -&gt; None'</span> failed    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#352" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">352</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         with error:                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         Simulate some bug here                                                     <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #800000; text-decoration-color: #800000">WARNING </span> There are <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> nodes that have not run.                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py#202" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">202</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         You can resume the pipeline run from the nearest nodes with persisted    <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         inputs by adding the following argument to your previous command:        <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>           --from-nodes <span style="color: #008000; text-decoration-color: #008000">"report_accuracy"</span>                                         <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">╭─────────────────────────────── </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ────────────────────────────────╮</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">833844929.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: 1&gt;</span> <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/833844929.py'</span>                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">session.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">404</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">401 │   │   </span>)                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">402 │   │   </span>                                                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">403 │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>404 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   │   </span>run_result = runner.run(                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">405 │   │   │   │   </span>filtered_pipeline, catalog, hook_manager, session_id                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">406 │   │   │   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">407 │   │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_called = <span style="color: #0000ff; text-decoration-color: #0000ff">True</span>                                                        <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">88</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                                <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 85 │   │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.info(                                                             <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 86 │   │   │   │   </span><span style="color: #808000; text-decoration-color: #808000">"Asynchronous mode is enabled for loading and saving data"</span>                 <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 87 │   │   │   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span> 88 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run(pipeline, catalog, hook_manager, session_id)                             <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 89 │   │   </span>                                                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 90 │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.info(<span style="color: #808000; text-decoration-color: #808000">"Pipeline execution completed successfully."</span>)                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 91 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">sequential_runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">70</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">67 │   │   </span>                                                                                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">68 │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">for</span> exec_index, node <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> <span style="color: #00ffff; text-decoration-color: #00ffff">enumerate</span>(nodes):                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">69 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                            <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>70 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   │   │   </span>run_node(node, catalog, hook_manager, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._is_async, session_id)           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">71 │   │   │   │   </span>done_nodes.add(node)                                                        <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">72 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span>:                                                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">73 │   │   │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._suggest_resume_scenario(pipeline, done_nodes, catalog)                <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">304</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run_node</span>                          <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">301 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> is_async:                                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">302 │   │   </span>node = _run_node_async(node, catalog, hook_manager, session_id)                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">303 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">else</span>:                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>304 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span>node = _run_node_sequential(node, catalog, hook_manager, session_id)               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">305 │   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">306 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">for</span> name <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> node.confirms:                                                             <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">307 │   │   </span>catalog.confirm(name)                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">398</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run_node_sequential</span>              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">395 │   </span>)                                                                                      <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">396 │   </span>inputs.update(additional_inputs)                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">397 │   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>398 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   </span>outputs = _call_node_run(                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">399 │   │   </span>node, catalog, inputs, is_async, hook_manager, session_id=session_id               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">400 │   </span>)                                                                                      <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">401 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">366</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_call_node_run</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">363 │   │   │   </span>is_async=is_async,                                                             <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">364 │   │   │   </span>session_id=session_id,                                                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">365 │   │   </span>)                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>366 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> exc                                                                          <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">367 │   </span>hook_manager.hook.after_node_run(                                                      <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">368 │   │   </span>node=node,                                                                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">369 │   │   </span>catalog=catalog,                                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">356</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_call_node_run</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">353 </span>) -&gt; Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any]:                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">354 │   # pylint: disable=too-many-arguments</span>                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">355 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>356 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span>outputs = node.run(inputs)                                                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">357 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span> <span style="color: #0000ff; text-decoration-color: #0000ff">as</span> exc:                                                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">358 │   │   </span>hook_manager.hook.on_node_error(                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">359 │   │   │   </span>error=exc,                                                                     <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">353</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">350 │   │   # purposely catch all exceptions</span>                                                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">351 │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span> <span style="color: #0000ff; text-decoration-color: #0000ff">as</span> exc:                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">352 │   │   │   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.error(<span style="color: #808000; text-decoration-color: #808000">"Node '%s' failed with error: \n%s"</span>, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>), <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>(exc))   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>353 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> exc                                                                      <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">354 │   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">355 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">def</span> <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_no_inputs</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>, inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any]):                                 <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">356 │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> inputs:                                                                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">344</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">341 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>):                                            <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">342 │   │   │   │   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_one_input(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">list</span>):                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>344 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   │   │   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_list(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                        <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">345 │   │   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">dict</span>):                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">346 │   │   │   │   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_dict(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                        <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">347 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">384</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_list</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">381 │   │   │   │   </span><span style="color: #808000; text-decoration-color: #808000">f"{</span><span style="color: #00ffff; text-decoration-color: #00ffff">sorted</span>(inputs.keys())<span style="color: #808000; text-decoration-color: #808000">}."</span>                                                <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382 │   │   │   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">383 │   │   # Ensure the function gets the inputs in the correct order</span>                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>384 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">return</span> <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._func(*(inputs[item] <span style="color: #0000ff; text-decoration-color: #0000ff">for</span> item <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> node_inputs))                         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">385 │   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">386 │   </span><span style="color: #0000ff; text-decoration-color: #0000ff">def</span> <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_dict</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>, inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any], node_inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>]):         <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">387 │   │   # Node inputs and provided run inputs should completely overlap</span>                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/dev/kedro_gallery/jupyter-debug-demo/src/jupyter_debug_demo/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">nodes.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">74</span> in   <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #00ff00; text-decoration-color: #00ff00">report_accuracy</span>                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">71 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">│   │   </span><span style="color: #808000; text-decoration-color: #808000">y_pred: Predicted target.</span>                                                           <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">72 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">│   │   </span><span style="color: #808000; text-decoration-color: #808000">y_test: True target.</span>                                                                <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">73 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">│   </span><span style="color: #808000; text-decoration-color: #808000">"""</span>                                                                                     <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000">❱ </span>74 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> <span style="color: #00ffff; text-decoration-color: #00ffff">ValueError</span>(<span style="color: #808000; text-decoration-color: #808000">"Simulate some bug here"</span>)                                              <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">75 │   </span>accuracy = (y_pred == y_test).sum() / <span style="color: #00ffff; text-decoration-color: #00ffff">len</span>(y_test)                                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">76 │   </span>logger = logging.getLogger(<span style="color: #ff0000; text-decoration-color: #ff0000">__name__</span>)                                                    <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">77 │   </span>logger.info(<span style="color: #808000; text-decoration-color: #808000">"Model has accuracy of %.3f on test data."</span>, accuracy)                       <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">ValueError: </span>Simulate some bug here
</pre>
</div>
</div>
<ol start="7" type="1">
<li>Now <code>catalog.load</code> that persisted dataset, i.e.&nbsp;<code>func(catalog.load("some_data"))</code></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">y_pred <span class="op" style="color: #5E5E5E;">=</span> catalog.load(<span class="st" style="color: #20794D;">"y_pred"</span>)</span>
<span id="cb9-2">y_test <span class="op" style="color: #5E5E5E;">=</span> catalog.load(<span class="st" style="color: #20794D;">"y_test"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:47:19] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">catalog.datasets.y_pred.load().head()  <span class="co" style="color: #5E5E5E;"># This is the alternative way to use auto-discovery which can be improved</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>     setosa
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>     setosa
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>     setosa
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">20</span>    setosa
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">21</span>    setosa
Name: species, dtype: object
</pre>
</div>
</div>
<ol start="8" type="1">
<li>Copy the source code of <code>func</code> to notebook, it would work if the function itself is the node function, but if it is some function buried deep down, that’s a lot more copy-pasting and change of import maybe.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> report_accuracy(y_pred: pd.Series, y_test: pd.Series):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;">"""Calculates and logs the accuracy.</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">        y_pred: Predicted target.</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;">        y_test: True target.</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb11-8">    <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(<span class="st" style="color: #20794D;">"Simulate some bug here"</span>)</span>
<span id="cb11-9">    accuracy <span class="op" style="color: #5E5E5E;">=</span> (y_pred <span class="op" style="color: #5E5E5E;">==</span> y_test).<span class="bu" style="color: null;">sum</span>() <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(y_test)</span>
<span id="cb11-10">    logger <span class="op" style="color: #5E5E5E;">=</span> logging.getLogger(<span class="va" style="color: #111111;">__name__</span>)</span>
<span id="cb11-11">    logger.info(<span class="st" style="color: #20794D;">"Model has accuracy of </span><span class="sc" style="color: #5E5E5E;">%.3f</span><span class="st" style="color: #20794D;"> on test data."</span>, accuracy)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">╭─────────────────────────────── </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ────────────────────────────────╮</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">1415042900.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: </span>  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #00ff00; text-decoration-color: #00ff00">1&gt;</span>                                                                                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/1415042900.py'</span>                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">NameError: </span>name <span style="color: #008000; text-decoration-color: #008000">'pd'</span> is not defined
</pre>
</div>
</div>
<p>This won’t work immediately work, a couple of copy&amp;paste is needed</p>
<ul>
<li>manual copy the imports</li>
<li>Remove the function now - copy the source code as a cell instead</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb12-2"><span class="im" style="color: #00769E;">import</span> logging</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(<span class="st" style="color: #20794D;">"Simulate some bug here"</span>)</span>
<span id="cb13-2">accuracy <span class="op" style="color: #5E5E5E;">=</span> (y_pred <span class="op" style="color: #5E5E5E;">==</span> y_test).<span class="bu" style="color: null;">sum</span>() <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(y_test)</span>
<span id="cb13-3">logger <span class="op" style="color: #5E5E5E;">=</span> logging.getLogger(<span class="va" style="color: #111111;">__name__</span>)</span>
<span id="cb13-4">logger.info(<span class="st" style="color: #20794D;">"Model has accuracy of </span><span class="sc" style="color: #5E5E5E;">%.3f</span><span class="st" style="color: #20794D;"> on test data."</span>, accuracy)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">╭─────────────────────────────── </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ────────────────────────────────╮</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">2816569123.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: </span>  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #00ff00; text-decoration-color: #00ff00">1&gt;</span>                                                                                               <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">│</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/2816569123.py'</span>                  <span style="color: #800000; text-decoration-color: #800000">│</span>
<span style="color: #800000; text-decoration-color: #800000">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">ValueError: </span>Simulate some bug here
</pre>
</div>
</div>
<p>Assume we know that the first line is buggy, let’s remove it</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># raise ValueError("Simulate some bug here")</span></span>
<span id="cb14-2">accuracy <span class="op" style="color: #5E5E5E;">=</span> (y_pred <span class="op" style="color: #5E5E5E;">==</span> y_test).<span class="bu" style="color: null;">sum</span>() <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(y_test)</span>
<span id="cb14-3">logger <span class="op" style="color: #5E5E5E;">=</span> logging.getLogger(<span class="va" style="color: #111111;">__name__</span>)</span>
<span id="cb14-4">logger.info(<span class="st" style="color: #20794D;">"Model has accuracy of </span><span class="sc" style="color: #5E5E5E;">%.3f</span><span class="st" style="color: #20794D;"> on test data."</span>, accuracy)</span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;"># It now works - lets copy this block back into the function and rerun</span></span></code></pre></div>
</div>
<ol start="9" type="1">
<li>Change the source code and make it work in the notebook</li>
<li>Rerun the pipeline to ensure everything works</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="op" style="color: #5E5E5E;">%</span>reload_kedro</span>
<span id="cb15-2">session.run()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:50:48] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Resolved project path as:                                              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#132" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">132</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #800080; text-decoration-color: #800080">/Users/Nok_Lam_Chan/dev/kedro_gallery/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">jupyter-debug-demo.</span>              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         To set a different path, run <span style="color: #008000; text-decoration-color: #008000">'%reload_kedro &lt;project_root&gt;'</span>            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:50:49] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter_debug_demo                                       <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#101" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">101</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#102" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">102</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Registered line magic <span style="color: #008000; text-decoration-color: #008000">'run_viz'</span>                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#108" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">108</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter-debug-demo                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">session.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py#340" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">340</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:50:50] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'example_iris_data'</span> <span style="font-weight: bold">(</span>CSVDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'parameters'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                  <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: split: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">split_data</span><span style="font-weight: bold">([</span>example_iris_data,parameters<span style="font-weight: bold">])</span> -&gt;         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="font-weight: bold">[</span>X_train,X_test,y_train,y_test<span style="font-weight: bold">]</span>                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: make_predictions: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">make_predictions</span><span style="font-weight: bold">([</span>X_train,X_test,y_train<span style="font-weight: bold">])</span> <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         -&gt; <span style="font-weight: bold">[</span>y_pred<span style="font-weight: bold">]</span>                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>1</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: report_accuracy: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">report_accuracy</span><span style="font-weight: bold">([</span>y_pred,y_test<span style="font-weight: bold">])</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Model has accuracy of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.933</span> on test data.                                  <a href="file:///Users/Nok_Lam_Chan/dev/kedro_gallery/jupyter-debug-demo/src/jupyter_debug_demo/nodes.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">nodes.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/dev/kedro_gallery/jupyter-debug-demo/src/jupyter_debug_demo/nodes.py#77" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">77</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Pipeline execution completed successfully.                                <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py#90" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">90</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{}</span>
</pre>
</div>
</div>
<p>It works now!</p>
<p>Debugging with interactive session is not uncommon - compare to IDE/breakpoint. * You can make plots and see the data * You can intercept the variable and continue with the program - espeically useful when it is computation intensive.</p>
<p>See <a href="https://github.com/kedro-org/kedro/issues/1832#issuecomment-1242499748">more comments from Antony</a></p>
<p>More to optimize 1st PoC * <code>%load_node</code> - populate all neccessary data where the node throws error * When pipeline fail - raise something like <code>%load_node debug=True</code> - the traceback should have information about which node the error is coming from. * Is there anything we can use viz? Sometimes I get question from people can kedro-viz help with debugging too.</p>
<p>More to optimize: * What if the error is not in the node function but somewhere deeper in the call stack? * Handle case when the inputs are not in catalog - how to recompute the necessary inputs? Potentially we can use the backtracking to do it in a more efficient way.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/archive/posts/2022-11-08-kedro-debugging.html</guid>
  <pubDate>Tue, 08 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Quick implementation of Kedro DebugRunner</title>
  <link>https://noklam.github.io/archive/posts/kedro-debug-runner.html</link>
  <description><![CDATA[ 



<section id="core" class="level1">
<h1>core</h1>
<blockquote class="blockquote">
<p>Fill in a module description here</p>
</blockquote>
<p>::: {.cell 0=‘h’ 1=‘i’ 2=‘d’ 3=‘e’}</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">%</span>load_ext autoreload</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">%</span>autoreload <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> nbdev.showdoc <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<p>:::</p>
<p>::: {.cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> Counter</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">from</span> itertools <span class="im" style="color: #00769E;">import</span> chain</span>
<span id="cb2-3"><span class="im" style="color: #00769E;">from</span> typing <span class="im" style="color: #00769E;">import</span> Any, Dict, Iterable, List, Set</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;">from</span> kedro.framework.hooks.manager <span class="im" style="color: #00769E;">import</span> _NullPluginManager</span>
<span id="cb2-6"><span class="im" style="color: #00769E;">from</span> kedro.io <span class="im" style="color: #00769E;">import</span> AbstractDataSet, DataCatalog, MemoryDataSet</span>
<span id="cb2-7"><span class="im" style="color: #00769E;">from</span> kedro.pipeline <span class="im" style="color: #00769E;">import</span> Pipeline</span>
<span id="cb2-8"><span class="im" style="color: #00769E;">from</span> kedro.pipeline.node <span class="im" style="color: #00769E;">import</span> Node</span>
<span id="cb2-9"><span class="im" style="color: #00769E;">from</span> kedro.runner <span class="im" style="color: #00769E;">import</span> SequentialRunner</span>
<span id="cb2-10"><span class="im" style="color: #00769E;">from</span> kedro.runner.runner <span class="im" style="color: #00769E;">import</span> AbstractRunner, run_node</span>
<span id="cb2-11"><span class="im" style="color: #00769E;">from</span> pluggy <span class="im" style="color: #00769E;">import</span> PluginManager</span>
<span id="cb2-12"></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;">class</span> DebugRunner(SequentialRunner):</span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;">def</span> run(</span>
<span id="cb2-16">        <span class="va" style="color: #111111;">self</span>,</span>
<span id="cb2-17">        pipeline: Pipeline,</span>
<span id="cb2-18">        catalog: DataCatalog,</span>
<span id="cb2-19">        dataset_names: List[<span class="bu" style="color: null;">str</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb2-20">        hook_manager: PluginManager <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb2-21">        session_id: <span class="bu" style="color: null;">str</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb2-22">    ) <span class="op" style="color: #5E5E5E;">-&gt;</span> Dict[<span class="bu" style="color: null;">str</span>, Any]:</span>
<span id="cb2-23">        <span class="co" style="color: #5E5E5E;">"""Run the ``Pipeline`` using the datasets provided by ``catalog``</span></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;">        and save results back to the same objects.</span></span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;">        Args:</span></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;">            pipeline: The ``Pipeline`` to run.</span></span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;">            catalog: The ``DataCatalog`` from which to fetch data.</span></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;">            hook_manager: The ``PluginManager`` to activate hooks.</span></span>
<span id="cb2-30"><span class="co" style="color: #5E5E5E;">            session_id: The id of the session.</span></span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;">        Raises:</span></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;">            ValueError: Raised when ``Pipeline`` inputs cannot be satisfied.</span></span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="co" style="color: #5E5E5E;">        Returns:</span></span>
<span id="cb2-36"><span class="co" style="color: #5E5E5E;">            Any node outputs that cannot be processed by the ``DataCatalog``.</span></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;">            These are returned in a dictionary, where the keys are defined</span></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;">            by the node outputs.</span></span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb2-41">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> dataset_names:</span>
<span id="cb2-42">            dataset_names <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb2-43">        hook_manager <span class="op" style="color: #5E5E5E;">=</span> hook_manager <span class="kw" style="color: #003B4F;">or</span> _NullPluginManager()</span>
<span id="cb2-44">        catalog <span class="op" style="color: #5E5E5E;">=</span> catalog.shallow_copy()</span>
<span id="cb2-45"></span>
<span id="cb2-46">        unsatisfied <span class="op" style="color: #5E5E5E;">=</span> pipeline.inputs() <span class="op" style="color: #5E5E5E;">-</span> <span class="bu" style="color: null;">set</span>(catalog.<span class="bu" style="color: null;">list</span>())</span>
<span id="cb2-47">        <span class="cf" style="color: #003B4F;">if</span> unsatisfied:</span>
<span id="cb2-48">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(</span>
<span id="cb2-49">                <span class="ss" style="color: #20794D;">f"Pipeline input(s) </span><span class="sc" style="color: #5E5E5E;">{</span>unsatisfied<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> not found in the DataCatalog"</span></span>
<span id="cb2-50">            )</span>
<span id="cb2-51"></span>
<span id="cb2-52">        free_outputs <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb2-53">            pipeline.outputs()</span>
<span id="cb2-54">        )  <span class="co" style="color: #5E5E5E;"># Return everything regardless if it it's in catalog</span></span>
<span id="cb2-55">        unregistered_ds <span class="op" style="color: #5E5E5E;">=</span> pipeline.data_sets() <span class="op" style="color: #5E5E5E;">-</span> <span class="bu" style="color: null;">set</span>(catalog.<span class="bu" style="color: null;">list</span>())</span>
<span id="cb2-56">        <span class="cf" style="color: #003B4F;">for</span> ds_name <span class="kw" style="color: #003B4F;">in</span> unregistered_ds:</span>
<span id="cb2-57">            catalog.add(ds_name, <span class="va" style="color: #111111;">self</span>.create_default_data_set(ds_name))</span>
<span id="cb2-58"></span>
<span id="cb2-59">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>._is_async:</span>
<span id="cb2-60">            <span class="va" style="color: #111111;">self</span>._logger.info(</span>
<span id="cb2-61">                <span class="st" style="color: #20794D;">"Asynchronous mode is enabled for loading and saving data"</span></span>
<span id="cb2-62">            )</span>
<span id="cb2-63">        <span class="va" style="color: #111111;">self</span>._run(pipeline, catalog, dataset_names, hook_manager, session_id)</span>
<span id="cb2-64"></span>
<span id="cb2-65">        <span class="va" style="color: #111111;">self</span>._logger.info(<span class="st" style="color: #20794D;">"Pipeline execution completed successfully."</span>)</span>
<span id="cb2-66">        </span>
<span id="cb2-67">        free_outputs <span class="op" style="color: #5E5E5E;">=</span> free_outputs <span class="op" style="color: #5E5E5E;">|</span> <span class="bu" style="color: null;">set</span>(dataset_names)  <span class="co" style="color: #5E5E5E;"># Union</span></span>
<span id="cb2-68"></span>
<span id="cb2-69">        <span class="cf" style="color: #003B4F;">return</span> {ds_name: catalog.load(ds_name) <span class="cf" style="color: #003B4F;">for</span> ds_name <span class="kw" style="color: #003B4F;">in</span> free_outputs}</span>
<span id="cb2-70"></span>
<span id="cb2-71">    <span class="kw" style="color: #003B4F;">def</span> _run(</span>
<span id="cb2-72">        <span class="va" style="color: #111111;">self</span>,</span>
<span id="cb2-73">        pipeline: Pipeline,</span>
<span id="cb2-74">        catalog: DataCatalog,</span>
<span id="cb2-75">        dataset_names: List[<span class="bu" style="color: null;">str</span>],</span>
<span id="cb2-76">        hook_manager: PluginManager,</span>
<span id="cb2-77">        session_id: <span class="bu" style="color: null;">str</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb2-78">    ) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-79">        <span class="co" style="color: #5E5E5E;">"""The method implementing sequential pipeline running.</span></span>
<span id="cb2-80"></span>
<span id="cb2-81"><span class="co" style="color: #5E5E5E;">        Args:</span></span>
<span id="cb2-82"><span class="co" style="color: #5E5E5E;">            pipeline: The ``Pipeline`` to run.</span></span>
<span id="cb2-83"><span class="co" style="color: #5E5E5E;">            catalog: The ``DataCatalog`` from which to fetch data.</span></span>
<span id="cb2-84"><span class="co" style="color: #5E5E5E;">            hook_manager: The ``PluginManager`` to activate hooks.</span></span>
<span id="cb2-85"><span class="co" style="color: #5E5E5E;">            session_id: The id of the session.</span></span>
<span id="cb2-86"></span>
<span id="cb2-87"><span class="co" style="color: #5E5E5E;">        Raises:</span></span>
<span id="cb2-88"><span class="co" style="color: #5E5E5E;">            Exception: in case of any downstream node failure.</span></span>
<span id="cb2-89"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb2-90">        nodes <span class="op" style="color: #5E5E5E;">=</span> pipeline.nodes</span>
<span id="cb2-91">        done_nodes <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>()</span>
<span id="cb2-92"></span>
<span id="cb2-93">        load_counts <span class="op" style="color: #5E5E5E;">=</span> Counter(chain.from_iterable(n.inputs <span class="cf" style="color: #003B4F;">for</span> n <span class="kw" style="color: #003B4F;">in</span> nodes))</span>
<span id="cb2-94"></span>
<span id="cb2-95">        <span class="cf" style="color: #003B4F;">for</span> exec_index, node <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(nodes):</span>
<span id="cb2-96">            <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb2-97">                run_node(node, catalog, hook_manager, <span class="va" style="color: #111111;">self</span>._is_async, session_id)</span>
<span id="cb2-98">                done_nodes.add(node)</span>
<span id="cb2-99">            <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">Exception</span>:</span>
<span id="cb2-100">                <span class="va" style="color: #111111;">self</span>._suggest_resume_scenario(pipeline, done_nodes, catalog)</span>
<span id="cb2-101">                <span class="cf" style="color: #003B4F;">raise</span></span>
<span id="cb2-102"></span>
<span id="cb2-103">            <span class="co" style="color: #5E5E5E;"># decrement load counts and release any data sets we've finished with</span></span>
<span id="cb2-104">            <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.inputs:</span>
<span id="cb2-105">                load_counts[data_set] <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-106">                <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.inputs():</span>
<span id="cb2-107">                    <span class="cf" style="color: #003B4F;">if</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> dataset_names:</span>
<span id="cb2-108">                        catalog.release(data_set)</span>
<span id="cb2-109">            <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.outputs:</span>
<span id="cb2-110">                <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.outputs():</span>
<span id="cb2-111">                    <span class="cf" style="color: #003B4F;">if</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> dataset_names:</span>
<span id="cb2-112">                        catalog.release(data_set)</span>
<span id="cb2-113"></span>
<span id="cb2-114">            <span class="va" style="color: #111111;">self</span>._logger.info(</span>
<span id="cb2-115">                <span class="st" style="color: #20794D;">"Completed </span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> out of </span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> tasks"</span>, exec_index <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="bu" style="color: null;">len</span>(nodes)</span>
<span id="cb2-116">            )</span></code></pre></div>
<p>:::</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># `DebugRunner` has to be used in a different way since `session.run` don't support additional argument, so we are going to use a lower level approach and construct `Runner` and `Pipeline` and `DataCatalog` ourselves.</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># Testing Kedro Project: https://github.com/noklam/kedro_gallery/tree/master/kedro-debug-runner-demo</span></span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;">%</span>load_ext kedro.ipython</span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;">%</span>reload_kedro <span class="op" style="color: #5E5E5E;">~/</span>dev<span class="op" style="color: #5E5E5E;">/</span>kedro_gallery<span class="op" style="color: #5E5E5E;">/</span>kedro<span class="op" style="color: #5E5E5E;">-</span>debug<span class="op" style="color: #5E5E5E;">-</span>runner<span class="op" style="color: #5E5E5E;">-</span>demo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The kedro.ipython extension is already loaded. To reload it, use:
  %reload_ext kedro.ipython
[10/06/22 14:45:20] INFO     Updated path to Kedro project:       __init__.py:54
                             /Users/Nok_Lam_Chan/dev/kedro_galler               
                             y/kedro-debug-runner-demo                          
[10/06/22 14:45:22] INFO     Kedro project                        __init__.py:77
                             kedro_debug_runner_demo                            
                    INFO     Defined global variable 'context',   __init__.py:78
                             'session', 'catalog' and 'pipelines'               </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">%</span>reload_kedro <span class="op" style="color: #5E5E5E;">~/</span>dev<span class="op" style="color: #5E5E5E;">/</span>kedro_gallery<span class="op" style="color: #5E5E5E;">/</span>kedro<span class="op" style="color: #5E5E5E;">-</span>debug<span class="op" style="color: #5E5E5E;">-</span>runner<span class="op" style="color: #5E5E5E;">-</span>demo</span>
<span id="cb5-2">runner <span class="op" style="color: #5E5E5E;">=</span> DebugRunner()</span>
<span id="cb5-3">default_pipeline <span class="op" style="color: #5E5E5E;">=</span> pipelines[<span class="st" style="color: #20794D;">"__default__"</span>]</span>
<span id="cb5-4">run_1 <span class="op" style="color: #5E5E5E;">=</span> runner.run(default_pipeline, catalog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                    INFO     Updated path to Kedro project:       __init__.py:54
                             /Users/Nok_Lam_Chan/dev/kedro_galler               
                             y/kedro-debug-runner-demo                          
[10/06/22 14:45:24] INFO     Kedro project                        __init__.py:77
                             kedro_debug_runner_demo                            
                    INFO     Defined global variable 'context',   __init__.py:78
                             'session', 'catalog' and 'pipelines'               
                    INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">runner <span class="op" style="color: #5E5E5E;">=</span> DebugRunner()</span>
<span id="cb7-2">default_pipeline <span class="op" style="color: #5E5E5E;">=</span> pipelines[<span class="st" style="color: #20794D;">"__default__"</span>]</span>
<span id="cb7-3">run_2 <span class="op" style="color: #5E5E5E;">=</span> runner.run(default_pipeline, catalog, dataset_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"example_iris_data"</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10/06/22 14:45:27] INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              
                    INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">runner <span class="op" style="color: #5E5E5E;">=</span> DebugRunner()</span>
<span id="cb9-2">default_pipeline <span class="op" style="color: #5E5E5E;">=</span> pipelines[<span class="st" style="color: #20794D;">"__default__"</span>]</span>
<span id="cb9-3">run_3 <span class="op" style="color: #5E5E5E;">=</span> runner.run(default_pipeline, catalog, dataset_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"X_train"</span>]) <span class="co" style="color: #5E5E5E;"># Input datasets</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10/06/22 14:46:01] INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">run_1</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">run_2</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'example_iris_data':      sepal_length  sepal_width  petal_length  petal_width    species
 0             5.1          3.5           1.4          0.2     setosa
 1             4.9          3.0           1.4          0.2     setosa
 2             4.7          3.2           1.3          0.2     setosa
 3             4.6          3.1           1.5          0.2     setosa
 4             5.0          3.6           1.4          0.2     setosa
 ..            ...          ...           ...          ...        ...
 145           6.7          3.0           5.2          2.3  virginica
 146           6.3          2.5           5.0          1.9  virginica
 147           6.5          3.0           5.2          2.0  virginica
 148           6.2          3.4           5.4          2.3  virginica
 149           5.9          3.0           5.1          1.8  virginica
 
 [150 rows x 5 columns]}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">run_3</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'X_train':      sepal_length  sepal_width  petal_length  petal_width
 47            4.6          3.2           1.4          0.2
 3             4.6          3.1           1.5          0.2
 31            5.4          3.4           1.5          0.4
 25            5.0          3.0           1.6          0.2
 15            5.7          4.4           1.5          0.4
 ..            ...          ...           ...          ...
 28            5.2          3.4           1.4          0.2
 78            6.0          2.9           4.5          1.5
 146           6.3          2.5           5.0          1.9
 49            5.0          3.3           1.4          0.2
 94            5.6          2.7           4.2          1.3
 
 [120 rows x 4 columns]}</code></pre>
</div>
</div>
<p>::: {.cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">class</span> GreedySequentialRunner(SequentialRunner):</span>
<span id="cb17-2">    <span class="kw" style="color: #003B4F;">def</span> run(</span>
<span id="cb17-3">        <span class="va" style="color: #111111;">self</span>,</span>
<span id="cb17-4">        pipeline: Pipeline,</span>
<span id="cb17-5">        catalog: DataCatalog,</span>
<span id="cb17-6">        hook_manager: PluginManager <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb17-7">        session_id: <span class="bu" style="color: null;">str</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb17-8">    ) <span class="op" style="color: #5E5E5E;">-&gt;</span> Dict[<span class="bu" style="color: null;">str</span>, Any]:</span>
<span id="cb17-9">        <span class="co" style="color: #5E5E5E;">"""Run the ``Pipeline`` using the datasets provided by ``catalog``</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;">        and save results back to the same objects.</span></span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;">        Args:</span></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;">            pipeline: The ``Pipeline`` to run.</span></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;">            catalog: The ``DataCatalog`` from which to fetch data.</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;">            hook_manager: The ``PluginManager`` to activate hooks.</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;">            session_id: The id of the session.</span></span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;">        Raises:</span></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;">            ValueError: Raised when ``Pipeline`` inputs cannot be satisfied.</span></span>
<span id="cb17-20"></span>
<span id="cb17-21"><span class="co" style="color: #5E5E5E;">        Returns:</span></span>
<span id="cb17-22"><span class="co" style="color: #5E5E5E;">            Any node outputs that cannot be processed by the ``DataCatalog``.</span></span>
<span id="cb17-23"><span class="co" style="color: #5E5E5E;">            These are returned in a dictionary, where the keys are defined</span></span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;">            by the node outputs.</span></span>
<span id="cb17-25"></span>
<span id="cb17-26"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb17-27"></span>
<span id="cb17-28">        hook_manager <span class="op" style="color: #5E5E5E;">=</span> hook_manager <span class="kw" style="color: #003B4F;">or</span> _NullPluginManager()</span>
<span id="cb17-29">        catalog <span class="op" style="color: #5E5E5E;">=</span> catalog.shallow_copy()</span>
<span id="cb17-30"></span>
<span id="cb17-31">        unsatisfied <span class="op" style="color: #5E5E5E;">=</span> pipeline.inputs() <span class="op" style="color: #5E5E5E;">-</span> <span class="bu" style="color: null;">set</span>(catalog.<span class="bu" style="color: null;">list</span>())</span>
<span id="cb17-32">        <span class="cf" style="color: #003B4F;">if</span> unsatisfied:</span>
<span id="cb17-33">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(</span>
<span id="cb17-34">                <span class="ss" style="color: #20794D;">f"Pipeline input(s) </span><span class="sc" style="color: #5E5E5E;">{</span>unsatisfied<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> not found in the DataCatalog"</span></span>
<span id="cb17-35">            )</span>
<span id="cb17-36"></span>
<span id="cb17-37">        free_outputs <span class="op" style="color: #5E5E5E;">=</span> pipeline.outputs() <span class="co" style="color: #5E5E5E;"># Return everything regardless if it it's in catalog</span></span>
<span id="cb17-38">        unregistered_ds <span class="op" style="color: #5E5E5E;">=</span> pipeline.data_sets() <span class="op" style="color: #5E5E5E;">-</span> <span class="bu" style="color: null;">set</span>(catalog.<span class="bu" style="color: null;">list</span>())</span>
<span id="cb17-39">        <span class="cf" style="color: #003B4F;">for</span> ds_name <span class="kw" style="color: #003B4F;">in</span> unregistered_ds:</span>
<span id="cb17-40">            catalog.add(ds_name, <span class="va" style="color: #111111;">self</span>.create_default_data_set(ds_name))</span>
<span id="cb17-41"></span>
<span id="cb17-42">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>._is_async:</span>
<span id="cb17-43">            <span class="va" style="color: #111111;">self</span>._logger.info(</span>
<span id="cb17-44">                <span class="st" style="color: #20794D;">"Asynchronous mode is enabled for loading and saving data"</span></span>
<span id="cb17-45">            )</span>
<span id="cb17-46">        <span class="va" style="color: #111111;">self</span>._run(pipeline, catalog, hook_manager, session_id)</span>
<span id="cb17-47"></span>
<span id="cb17-48">        <span class="va" style="color: #111111;">self</span>._logger.info(<span class="st" style="color: #20794D;">"Pipeline execution completed successfully."</span>)</span>
<span id="cb17-49"></span>
<span id="cb17-50">        <span class="cf" style="color: #003B4F;">return</span> {ds_name: catalog.load(ds_name) <span class="cf" style="color: #003B4F;">for</span> ds_name <span class="kw" style="color: #003B4F;">in</span> free_outputs}</span></code></pre></div>
<p>:::</p>
<p>::: {.cell 0=‘h’ 1=‘i’ 2=‘d’ 3=‘e’}</p>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> nbdev<span class="op" style="color: #5E5E5E;">;</span> nbdev.nbdev_export()</span></code></pre></div>
<p>:::</p>


</section>

 ]]></description>
  <category>europython</category>
  <guid>https://noklam.github.io/archive/posts/kedro-debug-runner.html</guid>
  <pubDate>Tue, 01 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>EuroPython 2022 - Conference Notes &amp; Summary</title>
  <link>https://noklam.github.io/archive/posts/2022-07-11-europython2022-summary.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/archive/posts/images/europython_welcome.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">EuroPython2022</figcaption><p></p>
</figure>
</div>
<p>Schedule: https://ep2022.europython.eu/schedule/</p>
<p>Session that I attended: #europython</p>
<ul>
<li>Properties testing with Hypothesis</li>
<li>TDD Development with Pytest</li>
<li>Python Object under the hood</li>
<li>Norvig’s lispy - beautiful and illuminating Python code</li>
<li>Introduction to Apache TVM</li>
<li>From pip to poetry - Python ways of packagin and publishing</li>
<li>Czech Drourght monitoring system - from manual work to global drought monitoring and mahcine learning with Python Protocol in Python</li>
<li>Dance with shadows - stub mock and patch</li>
<li>What Happen when you import a library in Python</li>
<li>Music and code - good presentation</li>
<li>Dodging AI Dystopia</li>
<li>Make CPython Faster - Mark Shannon</li>
<li>Use animated charts to present &amp; share your findings with ipyvizzu</li>
<li>DOCUMENTATION AS SECRET WEAPON</li>
<li>JWST - James Webb Telescope</li>
<li>Jupyter Under the hood architecture</li>
<li>Python thread safety parallelism without GIL</li>
<li>CPython Internals - implementation with a pipe operator</li>
<li>Hydra configuration with experiment</li>
</ul>
<section id="bulletproof-python-property-based-testing-with-hypothesis" class="level2">
<h2 class="anchored" data-anchor-id="bulletproof-python-property-based-testing-with-hypothesis">Bulletproof Python – Property-Based Testing with Hypothesis</h2>
<p>The term <strong>property based testing</strong> isn’t too important. In a nutshell <code>hypothesis</code> is a python library that help you to write (better) tests by modifying your workflow.</p>
<ol type="1">
<li><del>Prepare mock data</del> Provide a specification of data, let <code>hypothesis</code> do the work</li>
<li>Perform some operation</li>
<li>Assert the result with expected value</li>
</ol>
<p>The rationale behind this is</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>** People write code don’t come up with good test. **</p>
</div>
</div>
<p>For example, you can generate integers with <code>hypotesis.strategies.integers</code>, it does something smart under the hood so it’s not just random number but more meaningful test. For example, you usually want to test for zero, negative number, positive number, large number. <code>hypoethsis</code> try to maximize the variety of tests and you just need to give it a specification.</p>
<p>You can also generate more sophisticated data, for example, a tuple of two integers, where the second integer has to be larger than the first one.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="at" style="color: #657422;">@st.composite</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;">def</span> list_and_index(draw, elements<span class="op" style="color: #5E5E5E;">=</span>st.integers()):</span>
<span id="cb1-4">&nbsp; &nbsp; first <span class="op" style="color: #5E5E5E;">=</span> draw(elements)</span>
<span id="cb1-5">&nbsp; &nbsp; second <span class="op" style="color: #5E5E5E;">=</span> draw(st.integers(min_value<span class="op" style="color: #5E5E5E;">=</span>first <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb1-6">&nbsp; &nbsp; <span class="cf" style="color: #003B4F;">return</span> (first, second)</span></code></pre></div>
<p>Think of it as your virtual QA buddy.</p>
</section>
<section id="tdd-development-with-pytest" class="level2">
<h2 class="anchored" data-anchor-id="tdd-development-with-pytest">TDD Development with pytest</h2>
<p>Workflow for TDD 1. Pick one bug/missing feature 2. Write a test that fails 3. Minimal amount of code that pass - (even hard coded!) 4. Refactor</p>
<p>There are good questions asked * In case of you don’t know what’s the expected answer, how do you write test that fails meaningfully?</p>
<p>I jump out of the session because of a call, so not too many comments about this session. In general I like the idea of TDD but struggle to apply the textbook version of TDD as examples are often much simpler than the real application.</p>
<p>Few key points * Tests as specification about your program (What it does and what not) * Understand why you test fail and pass. * Tests are also good source of documentation.</p>
<p>Thinking about test first also force you to think more about the design, you almost start from pseudocode (you function doesn’t even exist!).</p>
</section>
<section id="python-objects-under-the-hood" class="level1">
<h1>Python objects Under the hood</h1>
<p>Covers a lot about Python’s magic method * <code>__init__</code> add <code>__new__</code> * <code>__add__</code> and <code>__radd__</code> * <code>super()</code> * <code>__str__</code> and <code>__repr__</code> * <code>__next__</code> and <code>__iter__</code> * Why <code>__new__</code> is needed? * We need to create immutable object * Object creation start with <code>__new__</code> which create an instance -&gt; <code>__init__</code> to customize the attributes * We need <code>__new__</code> to create a new immutable object * But how’s python actually achieve immutable tuple? Unanswered</p>
<p><a href="https://mail.python.org/pipermail/tutor/2008-April/061426.html">[Tutor] When to use <strong>new</strong> vs.&nbsp;<strong>init</strong> ?</a> &gt; <strong>new</strong> is the first step of instance creation. It’s called first, and is responsible for returning a new instance of your class. In contrast, <strong>init</strong> doesn’t return anything; it’s only responsible for initializing the instance after it’s been created.</p>
</section>
<section id="norvigs-lispy-beautiful-and-illuminating-python-code" class="level1">
<h1>Norvig’s lispy: beautiful and illuminating Python code</h1>
<p>This is an interesting exercise to implement an <code>Lisp</code> interpreter in <code>Python</code>. I am not from CS background so this is brand new to me, and uncover some of the details that how programming language actually works. It involves parsing text into <code>tokens</code> and evaluate them with some grammar which can be represented as AST.</p>
<p>This is the AST for the example <code>(define double (lambda (n) (* n 2)))</code> drawn as a tree <a href="https://github.com/fluentpython/lispy/tree/main/workshops/europython2022">reference</a>:</p>
<pre><code>                              '*'  'n'   2  
                        'n'    └────┼────┘  
                         │          │  
           'lambda'     [ ]        [ ]  
               └─────────┼──────────┘  
                         │  
'define'   'double'     [ ]  
    └─────────┼──────────┘  
              │  
             [ ]  </code></pre>
<p>The speaker also introduce <code>ChainMap</code>, which I am not aware of before.</p>
<div class="cell" data-execution_count="128">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> ChainMap</span>
<span id="cb3-2">a <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'a'</span>:<span class="dv" style="color: #AD0000;">1</span>}</span>
<span id="cb3-3">b <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'b'</span>: <span class="dv" style="color: #AD0000;">2</span>}</span>
<span id="cb3-4">c <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'b'</span>: <span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">'c'</span>:<span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">chainmap <span class="op" style="color: #5E5E5E;">=</span> ChainMap(a,b,c)</span></code></pre></div>
</div>
<p>A <code>ChainMap</code> stores multiple dictionaries, instead of merging them they are all stored in the object. Take a guess which `chainmap[‘a’], chainmap[‘b’] are?</p>
<div class="cell" data-execution_count="129">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">chainmap[<span class="st" style="color: #20794D;">'a'</span>], chainmap[<span class="st" style="color: #20794D;">'b'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="129">
<pre><code>(1, 2)</code></pre>
</div>
</div>
<p>It pretty much behaves like a normal Python dictionary, except that when the same key exists in more than one of the dictionary, the one that is in the front of the argument list has higher priority.</p>
<section id="introduction-to-apache-tvm" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-apache-tvm">Introduction to Apache TVM</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/archive/posts/europython/tvm.svg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Apache TVM</figcaption><p></p>
</figure>
</div>
<ul>
<li>Apache TVM is a framework that try to squeeze extra performance from specialized hardware.</li>
</ul>
<p>In practice, the workflow roughly go like this 1. Trained a model with your favored libraries (PyTorch/Tensorflow etc) 2. Use TVM to compile and tune -&gt; After this you get a compiled module as output 3. Use TVM python API for inference</p>
<p>The performance gains are mainly from hardware architecture that can give better performance, TVM did some architecture search and try to find the optimal one.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Maybe one side benefit of this is it does not need the deep learning pipeline dependecenies since you just need the TVM Python API and the model file for inference.</p>
</div>
</div>
</section>
</section>
<section id="typing.protocol-in-python-available-in-python-3.8" class="level1">
<h1><code>typing.Protocol</code> in Python (Available in Python 3.8+)</h1>
<p>Since the introduction of type hints, it has been a popular python feature and a lot more static analysis tools is added into the Python ecosystem. The most popular static analysis tool in Python is <code>mypy</code>.</p>
<p><code>Protocol</code> is a way of strcutural subtyping, it’s best to understand it with an Example.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">class</span> Dog:</span>
<span id="cb6-2">    ...</span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">class</span> Cat:</span>
<span id="cb6-4">    ...</span>
<span id="cb6-5">    </span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;">def</span> eat_bread(Union[Dog, Cat]):</span>
<span id="cb6-7">    do_somthing()</span></code></pre></div>
<p>Imagine if you are importing the <code>eat_bread</code> function and you want to extend it with a new animal type. There are no way you can do it unless you go into the source code of the library and change the argument.</p>
<p><code>Protocol</code> solve this problem in a way that I think it’s quite similar to <code>traits</code>, which is quite common in languages like <code>Scala</code>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">class</span> EatsBread(Protocol):</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;">def</span> eat_bread(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-3">        ...</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">def</span> feed_bread(animal: EatsBread):</span>
<span id="cb7-6">    animal.eat_bread()</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;">class</span> Duck:</span>
<span id="cb7-9">    <span class="kw" style="color: #003B4F;">def</span> eat_bread(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-10">        ...</span>
<span id="cb7-11"></span>
<span id="cb7-12">feed_bread(Duck())  <span class="co" style="color: #5E5E5E;"># &lt;-- OK</span></span></code></pre></div>
<p>Python is a dynamic typing language, which is flexible with duck typing. In essence, if something can <code>swim</code> and <code>quack</code>, it’s close enough to be consider as a duck. We only care about what the <code>class</code> can do, not the type of the class. So in this case, <code>Duck</code> has a method of <code>eat_bread</code>, and it maches the <code>Protocol</code> method and the static analysis tool will not have problem with it. As a result, we don’t need to extend the <code>class</code> or add a new class to <code>Union</code> everytime we extend a new class.</p>
</section>
<section id="what-happened-when-you-import-a-python-library" class="level1">
<h1>What Happened when you import a Python Library?</h1>
<p>This is an interesting talk as I recently had a bug that related to this exactly. It was a bug that due to different mechanism of <code>multiprocess</code>, In Windows and some versions of Mac, it used a <code>spawn process</code>, in Linux it is <code>fork process</code>. The main difference is that <code>spawn process</code> will re-import all the Python modules in the new process and cause some issues. In short, it’s not a good idea to have side-effect when importing a library, always put that into a <code>__name__ == __main__</code> block.</p>
<ul>
<li><code>modules</code> are python object -&gt; you can do something like <code>import random; type(random)</code></li>
<li>Whenever you import a module, a module object is created with a name, optionally you can alias it with <code>import module as xyz</code></li>
<li>sys.modules is the Python VM that keep track of the imported library as a <code>dict</code>
<ul>
<li>Since it is a dict, where the key is the name of the module and value as the module object</li>
<li>If the module is imported more than 1 time, the <code>sys.modules</code> is smart enough to skip the import since the key already exist. It will just use the <code>module</code> object instead.</li>
</ul></li>
</ul>
<section id="how-many-modules-imported-in-python-by-default" class="level2">
<h2 class="anchored" data-anchor-id="how-many-modules-imported-in-python-by-default">How many modules imported in Python by default?</h2>
<ul>
<li>Python Shell - 79</li>
<li>IPython - 646!</li>
<li>Jupyter - 1020!!!</li>
</ul>
<p>It’s quite surprising how many libraries are imported by default, and this explains why it takes some time whenever you do <code>ipython</code> on a shell, as the Python Interpreter is busy reading all the files and evalute it.</p>
<p>Some other interesting notes: * Python use a <code>Finder</code> and <code>Loader</code> to import modules * <code>sys.path</code> is the order that Python Interpreter search for modules, and the first match wins (This is important if you have duplicate namespace or if you do namespace package) * Don’t do <code>sys.path.append</code> although you will find this very common if you do a Stackoverflow search, use environment variable <code>PYTHONPATH=some_path</code> instead</p>
</section>
</section>
<section id="make-cpython-faster" class="level1">
<h1>Make CPython Faster</h1>
<p>The talk was delivered by Mark Shannon. The pace of the talk is quite fast and I couldn’t understand the details, but I think it is a good source of food for thought. Some keypoints * Memory access is slow * Dependent memory read is slower - 2 read is 2x slower because it has to be executed in sequence How to make Python 3.11 faster? * Lazy debugging info creation * (Almost) Zero Cost exceptions * In the try-block - push address to stack of the exception handler * with the expense of more memory - performance is improved in general case, but more expensive when exeception is raised</p>
</section>
<section id="jupyter-under-the-hood" class="level1">
<h1>Jupyter Under the hood</h1>
<ul>
<li>ZMQ as the network Protocol</li>
<li>Dealer socker &amp; router Socket</li>
<li>3 types of channels
<ul>
<li>shell</li>
<li>IO pub</li>
<li>STDIN</li>
</ul></li>
</ul>
</section>
<section id="hydra-configuration-for-experiments" class="level1">
<h1>Hydra configuration for experiments</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">`hydra` <span class="kw" style="color: #003B4F;">is</span> a Python Library that support configuration <span class="cf" style="color: #003B4F;">with</span> many advance features, which built on top of `OmegaConf`.</span>
<span id="cb8-2">Features include:</span>
<span id="cb8-3"><span class="op" style="color: #5E5E5E;">*</span> `instantiate` <span class="op" style="color: #5E5E5E;">-</span> dependency injection <span class="cf" style="color: #003B4F;">with</span> configuration <span class="op" style="color: #5E5E5E;">-</span> <span class="cf" style="color: #003B4F;">for</span> example you can do a partial instantiate</span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;">*</span> Type checking</span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;">*</span> Tab completion <span class="cf" style="color: #003B4F;">for</span> configuration</span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;">*</span> Multi<span class="op" style="color: #5E5E5E;">-</span>run </span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;">*</span> Supports plugins</span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;">*</span> Split configurations <span class="kw" style="color: #003B4F;">in</span> multiple YAML files</span>
<span id="cb8-9">    <span class="op" style="color: #5E5E5E;">*</span> The structure of files largely resemble how a Python modules works. i.e. module.sub_module.xxx</span>
<span id="cb8-10">    </span>
<span id="cb8-11"></span>
<span id="cb8-12">Some downsides:</span>
<span id="cb8-13"><span class="op" style="color: #5E5E5E;">*</span> It use Singleton <span class="kw" style="color: #003B4F;">and</span> cause some problem</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>europython</category>
  <guid>https://noklam.github.io/archive/posts/2022-07-11-europython2022-summary.html</guid>
  <pubDate>Sun, 10 Jul 2022 23:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/archive/posts/images/europython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Testing with Mocking</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2022-05-30-mocking-with-pytest-patch.html</link>
  <description><![CDATA[ 



<section id="what-is-mocking" class="level1">
<h1>What is Mocking?</h1>
</section>
<section id="pytest-mock" class="level1">
<h1>pytest-mock</h1>
<p>One of the mainstream mocking library is the standard one from <code>unittest</code>, there are also pytest plugin <code>pytest-mock</code> which wraps on <code>unittest</code>.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">%</span>load_ext ipython_pytest</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">%%</span>pytest</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">def</span> test_sum():</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;">assert</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpiih077gv
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.06s ==============================</code></pre>
</div>
</div>
<p>Mocking is important for a few reasons. * You want to have fast unittest (within second) * You don’t want to put loading or have any side-effect to your actual servers/database (e.g.&nbsp;mock writing to a database)</p>
</section>
<section id="mock-and-magicmock" class="level1">
<h1><code>Mock</code> and <code>MagicMock</code></h1>
<p>There are two main mock object you can used with the standard <code>unittest</code> library from <code>unittest.mock</code>.</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> unittest.mock <span class="im" style="color: #00769E;">import</span> Mock, MagicMock, patch</span></code></pre></div>
</div>
<section id="mock" class="level2">
<h2 class="anchored" data-anchor-id="mock">Mock</h2>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">mock <span class="op" style="color: #5E5E5E;">=</span> Mock()</span></code></pre></div>
</div>
<p>With the <code>Mock</code> object, you can treat it like a magic object that have any attributes or methods.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">mock.super_method(), mock.attribute_that_does_not_exist_at_all</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(&lt;Mock name='mock.super_method()' id='1587554283232'&gt;,
 &lt;Mock name='mock.attribute_that_does_not_exist_at_all' id='1587554282512'&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;">str</span>(mock)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>"&lt;Mock id='1587554282848'&gt;"</code></pre>
</div>
</div>
</section>
<section id="magicmock" class="level2">
<h2 class="anchored" data-anchor-id="magicmock">MagicMock</h2>
<p>The “magic” comes from the magic methods of python object, for example, when you add two object together, it is calling the <code>__add__</code> magic method under the hook.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">mock <span class="op" style="color: #5E5E5E;">+</span> mock</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: unsupported operand type(s) for +: 'Mock' and 'Mock'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">magic_mock <span class="op" style="color: #5E5E5E;">=</span> MagicMock()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">magic_mock <span class="op" style="color: #5E5E5E;">+</span> magic_mock</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>&lt;MagicMock name='mock.__add__()' id='1587563722784'&gt;</code></pre>
</div>
</div>
<p>With <code>MagicMock</code>, you get these magic methods for free, this is why adding two mock will not throw an error but adding two <code>Mock</code> will result in a <code>TypeError</code></p>
<p>Let say we want to mock the <code>pandas.read_csv</code> function, because we don’t actually want it to read a data, but just return some mock data whenever it is called. It’s easier to explain with an example.</p>
</section>
</section>
<section id="mocking-with-real-library" class="level1">
<h1>Mocking with real library</h1>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="op" style="color: #5E5E5E;">%%</span>pytest</span>
<span id="cb15-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb15-5">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"fake_data"</span>)</span>
<span id="cb15-6">    <span class="cf" style="color: #003B4F;">assert</span> pd.read_csv(<span class="st" style="color: #20794D;">"some_data"</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpka9zv6ev
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.09s ==============================</code></pre>
</div>
</div>
<p>In reality, you should get a <code>Dataframe</code> object, but here we mock the return value to return a <code>str</code>, and you can see the test actually pass.</p>
<section id="mocker.patch-with-createtrue" class="level2">
<h2 class="anchored" data-anchor-id="mocker.patch-with-createtrue"><code>mocker.patch</code> with <code>create=True</code></h2>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;">%%</span>pytest</span>
<span id="cb17-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb17-5">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_special_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"fake_data"</span>, create<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb17-6">    <span class="cf" style="color: #003B4F;">assert</span> pd.read_special_csv(<span class="st" style="color: #20794D;">"some_data"</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpzbddlxxg
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py F                                                         [100%]

================================== FAILURES ===================================
________________________________ test_read_csv ________________________________

mocker = &lt;pytest_mock.plugin.MockFixture object at 0x00000171B28B1820&gt;

    def test_read_csv(mocker):  # mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.
&gt;       mocker.patch("pandas.read_special_csv", return_value = "fake_data", create=False)

_ipytesttmp.py:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\..\miniconda3\lib\site-packages\pytest_mock\plugin.py:193: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
..\..\..\..\miniconda3\lib\site-packages\pytest_mock\plugin.py:157: in _start_patch
    mocked = p.start()
..\..\..\..\miniconda3\lib\unittest\mock.py:1529: in start
    result = self.__enter__()
..\..\..\..\miniconda3\lib\unittest\mock.py:1393: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;unittest.mock._patch object at 0x00000171B28B10D0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'pandas' from 'c:\\users\\lrcno\\miniconda3\\lib\\site-packages\\pandas\\__init__.py'&gt; does not have the attribute 'read_special_csv'

..\..\..\..\miniconda3\lib\unittest\mock.py:1366: AttributeError
=========================== short test summary info ===========================
FAILED _ipytesttmp.py::test_read_csv - AttributeError: &lt;module 'pandas' from ...
============================== 1 failed in 0.43s ==============================</code></pre>
</div>
</div>
<p>Now we fail the test because <code>pandas.read_special_csv</code> does not exist. However, with <code>create=True</code> you can make the test pass again. Normally you won’t want to do this, but it is an option that available.</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;">%%</span>pytest</span>
<span id="cb19-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb19-5">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_special_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"fake_data"</span>, create<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;">assert</span> pd.read_special_csv(<span class="st" style="color: #20794D;">"some_data"</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmphqbckliw
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.10s ==============================</code></pre>
</div>
</div>
<p>More often, you would want your mock resemble your real object, which means it has the same attributes and method, but it should fails when the method being called isn’t valid. You may specify the <code>return_value</code> with the mock type</p>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;">%%</span>pytest <span class="op" style="color: #5E5E5E;">-</span>vvv</span>
<span id="cb21-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb21-3"><span class="im" style="color: #00769E;">from</span> unittest.mock <span class="im" style="color: #00769E;">import</span> Mock</span>
<span id="cb21-4"><span class="im" style="color: #00769E;">import</span> pytest</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="kw" style="color: #003B4F;">def</span> test_read_csv_valid_method(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb21-7">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> Mock(pd.DataFrame))</span>
<span id="cb21-8">    df <span class="op" style="color: #5E5E5E;">=</span>  pd.read_csv(<span class="st" style="color: #20794D;">"some_data"</span>)</span>
<span id="cb21-9">    df.mean()  <span class="co" style="color: #5E5E5E;"># A DataFrame method</span></span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;">def</span> test_read_csv_invalid_method(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb21-12">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> Mock(pd.DataFrame))</span>
<span id="cb21-13">    df <span class="op" style="color: #5E5E5E;">=</span>  pd.read_csv(<span class="st" style="color: #20794D;">"some_data"</span>)</span>
<span id="cb21-14">    <span class="cf" style="color: #003B4F;">with</span> pytest.raises(<span class="pp" style="color: #AD0000;">Exception</span>):</span>
<span id="cb21-15">        df.not_a_dataframe_method()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- c:\users\lrcno\miniconda3\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpyfiqtkoy
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collecting ... collected 2 items

_ipytesttmp.py::test_read_csv_valid_method PASSED                        [ 50%]
_ipytesttmp.py::test_read_csv_invalid_method PASSED                      [100%]

============================== 2 passed in 0.16s ==============================</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/archive/posts/2022-05-30-mocking-with-pytest-patch.html</guid>
  <pubDate>Sun, 29 May 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Journey of understanding Python and programming language</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2022-02-10-journey-of-understanding-python-and-programming-langauge.html</link>
  <description><![CDATA[ 



<p>To be written… # What is Python Interpreter?</p>
<section id="what-is-bytecode" class="level1">
<h1>What is Bytecode?</h1>
</section>
<section id="python-virtual-machine" class="level1">
<h1>Python Virtual Machine</h1>
</section>
<section id="compiler" class="level1">
<h1>Compiler</h1>
</section>
<section id="ebnf-grammar" class="level1">
<h1>EBNF Grammar</h1>
</section>
<section id="llvm" class="level1">
<h1>LLVM</h1>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/archive/posts/2022-02-10-journey-of-understanding-python-and-programming-langauge.html</guid>
  <pubDate>Thu, 10 Feb 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What can we learn from Shipping Crisis as a Data Scientist?</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2021-11-18-what-can-we-learn-from-shipping-crisis-as-a-data-scientist.html</link>
  <description><![CDATA[ 



<p>Even if you are not working in shipping industry, you probably heard about shipping cost is skyrocking for the last year. COVID is clearly the initial disruption, but the story does not end there. Recently, <a href="https://www.wsj.com/video/series/on-the-news/what-america-supply-chain-backlog-looks-like-up-close/388D6F02-5BCD-43AD-A3EE-B945F7373983">Long Beach’s port congestion is at a historcial scale</a>, there are now more than 70+ ships waiting outside the port, the typical number is 1 or 2.</p>
<p>You may think the terminal must be busy as hell, so did I, but it is actualy far from the truth. <a href="https://twitter.com/typesfast/status/1451543776992845834?s=20">In fact, the port is actually paralyzed</a>. The reason surprised me a lot, it is not because of lacking of driver or empty containers, but yard space. Container are being unloaded from ships, then they are being put at the container yard before they go into depot or being stuffed again.</p>
<p>On a high level, it is caused by a negative feedback loop which COVID probably contributed a lot, as it caused a lot of disruption to the supply chain.</p>
<ol type="1">
<li>Port Congestion -&gt; Containers pilled up at container yard since it is waiting to be loaded on ship</li>
<li>Container yard space is taken up by cotnainers, less space is available</li>
<li>A container need to be put on a chassis before it is loaded, but as the container yard is full, empty containers stuck on the chassis and they need to be unloaded before you put a stuffed container.</li>
<li>Less Chassis is available to load stuff, so it further slow down the process</li>
<li>The loop complete and it starts from 1 again</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/archive/posts/images/2021-11-18-23-37-38.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Port Congestion Feedback Loop</figcaption><p></p>
</figure>
</div>
<p>This is a simplified story, you can find more details from this <a href="https://twitter.com/typesfast/status/1451543776992845834?s=20">twitter thread from flexport’s CEO Ryan</a>. There are more constraints that making this load/unload process inefficient, so the whole process is jammed. Think about a restaurant with limited amount of trays, you need to get a tray if you want to get food. But because there are too many customers, it jammed the door . So there are many customers holding an empty tray while many food are waiting to be served.</p>
<p>Ryan point out a very important lesson here, that is, <code>you need to choose your bottleneck, and it should really be the capital intensive assets.</code> Going back to our restaurant’s analogy, chef and space is probably the most expensive assets, so we should try to keep the utilization high. A simple solution is to buy more trays, so that it won’t be jammed. Ofcourse, you can also find a larger space, build a bigger door, but that will cost you more money too.</p>
<p>For shipping, the terminal’s crane should be the most capital intensive, so we should try our best to keep it working 24/7 to digest the terminal queue.</p>
<p>This is a simple idea yet it is powerful and it strikes me hard. As a data scientist, I work on optimization problem. To maximize the output of a system, we can use linear programming. When we are solving this problem, we are asking question like this.</p>
<blockquote class="blockquote">
<p>Given x1 Terminals, x2 drivers, x3 containers, x4 ships, what is the maximize output of this system and <strong>how</strong> do you arrange them to achieve so?</p>
</blockquote>
<p>However, if you are a product/business analyst, a better question may be &gt; What is the output of this system if I add more container yard space?</p>
<p>By changing the input of the system, you may achieve much better result. But as a data scientist, we often stuck in a mode that how do we optimize x metrics with these features. So we may end up spending months and try to schedule ships and driver perfectly to load 10% more container, but you can actually increase loading efficiency by 50% simply by adding more yard space. It feels like cheating as a scientific question, since this is not we asked originally, but this happened a lot in a business context.</p>
<p>We are not trying to find the best algorithm to solve a problem, the algorithm is just <strong>one way</strong> of doing it. We may get surprising result by just tweaking the asked question a little bit.</p>
<p>I am curious about what is the limiting factor in our current supply chain system, and how sensitive it is to the environment. Is forecasting &amp; optimization the right way to do it? Do we actually need a precise forecast or we can have a bit of redundancy (like in this case, having extra yard space which could be a waste but improve the system robustness)? This is questions that we need to ask ourselves constantly, as the true question is often not asked, but explored after lots of iterations. We need to, and we have to ask the right question, and that is an art more elegant than an algorithm in my opinion.</p>
<p>I do not know if Ryan’s word are 100% true, but it reminds me an important lesson. The right solution (question) may be simple, but it may not be obvious. Have we exploited all the simple solution before we went nuts with fancy algorithms?</p>
<p>p.s. Apologised as I don’t have time to proofread but simply try to write down the snapshot of my current mind [2021-11-18]</p>
<section id="reference" class="level1">
<h1>Reference</h1>
<p>{% twitter https://twitter.com/typesfast/status/1451543776992845834?s=20 %} https://twitter.com/typesfast/status/1451543776992845834?s=20 https://www.facebook.com/669645890/posts/10159859049175891/ unroll version: https://threadreaderapp.com/thread/1451543776992845834.html</p>


</section>

 ]]></description>
  <category>product</category>
  <guid>https://noklam.github.io/archive/posts/2021-11-18-what-can-we-learn-from-shipping-crisis-as-a-data-scientist.html</guid>
  <pubDate>Thu, 18 Nov 2021 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/archive/posts/images/2021-11-18-23-37-38.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Python FileNotFoundError or You have a really long file path?</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2021-08-18-python-file-not-found-long-file-path-window.html</link>
  <description><![CDATA[ 



<section id="filenotfounderror-not-so-quick" class="level1">
<h1>FileNotFoundError? Not so quick</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/archive/posts/images/file_not_found/01.jpg" title="The sample file (Left), and a script to read this file (Right)" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">screenshot</figcaption><p></p>
</figure>
</div>
<p>To illustrate the issue, I perpared some fake file. The script is simple, it just read a file with plain text, except that the filename is really long.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/archive/posts/images/file_not_found/02_error.jpg" title="FileNotFoundError" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">error</figcaption><p></p>
</figure>
</div>
<p>Unforuntately, even though the file exists, <code>Python</code> gives me a <code>FileNotFoundError</code>, how come? However long debugging, I found out that this is related to the filename that exist only on Windows.</p>
<p>This <a href="https://stackoverflow.com/questions/36219317/pathname-too-long-to-open">StackOverflow thread</a> explain this issue.</p>
<blockquote class="blockquote">
<p><strong>Maximum Path Length Limitation</strong><br>
In the Windows API (with some exceptions discussed in the following paragraphs), the maximum length for a path is&nbsp;<strong>MAX_PATH</strong>, which is defined as 260 characters. A local path is structured in the following order: drive letter, colon, backslash, name components separated by backslashes, and a terminating null character. For example, the maximum path on drive D is “D:*some 256-character path string*<nul>” where “<nul>” represents the invisible terminating null character for the current system codepage. (The characters &lt; &gt; are used here for visual clarity and cannot be part of a valid path string.)</nul></nul></p>
</blockquote>
</section>
<section id="solution---registry" class="level1">
<h1>Solution - Registry</h1>
<p>Updating your <a href="https://lifehacker.com/windows-10-allows-file-names-longer-than-260-characters-1785201032">Registry</a> can solve this problem.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/archive/posts/images/file_not_found/03_error.jpg" title="The file can be read after updating the registry to enable long file path" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Hello World</figcaption><p></p>
</figure>
</div>
<p>After applying the config, I can finally read the file. :)</p>
</section>
<section id="summary-tldr-version" class="level1">
<h1>Summary (TLDR version)</h1>
<ul>
<li>Window filesystem only allow 256 characters, beyond that you will have trouble to open the file.</li>
<li>Python will not be able to see this file and throw <code>FileNotFoundError</code> (I have no idea, anyone know why is that?)</li>
<li>You can update registry to enable long file path in Window to fix this issue.</li>
</ul>
<p>(Bonus: Window actually has weird behavior for long filepath, you can try to break it with different ways.)</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/archive/posts/2021-08-18-python-file-not-found-long-file-path-window.html</guid>
  <pubDate>Tue, 17 Aug 2021 23:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/archive/posts/images/file_not_found/01.jpg " medium="image"/>
</item>
<item>
  <title>5 Minutes Data Science Design Patterns I - Callback</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2021-07-10-5minutes-data-science-design-pattern-callback.html</link>
  <description><![CDATA[ 



<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>These series are written as a quick introduction to software design for data scientists, something that is lightweight than the Design Pattern Bible - <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a> I wish exists when I first started to learn. Design patterns refer to reusable solutions to some common problems, and some happen to be useful for data science. There is a good chance that someone else has solved your problem before. When used wisely, it helps to reduce the complexity of your code.</p>
</div>
</div>
<section id="so-what-is-callback-after-all" class="level2">
<h2 class="anchored" data-anchor-id="so-what-is-callback-after-all">So, What is Callback after all?</h2>
<p><code>Callback</code> function, or call <strong>after</strong>, simply means a function will be <strong>called after</strong> another function. It is a piece of executable code (function) that passed as an <strong>argument</strong> to another function. <a href="https://stackoverflow.com/questions/824234/what-is-a-callback-function">[1]</a></p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> foo(x, callback<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb1-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'foo!'</span>)</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;">if</span> callback:</span>
<span id="cb1-4">        callback(x)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">foo(<span class="st" style="color: #20794D;">'123'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>foo!</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">foo(<span class="st" style="color: #20794D;">'123'</span>, <span class="bu" style="color: null;">print</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>foo!
123</code></pre>
</div>
</div>
<p>Here I pass the function <code>print</code> as a callback, hence the string <code>123</code> get printed <strong>after</strong> <code>foo!</code>.</p>
</section>
<section id="why-do-i-need-to-use-callback" class="level2">
<h2 class="anchored" data-anchor-id="why-do-i-need-to-use-callback">Why do I need to use Callback?</h2>
<p><strong>Callback</strong> is very common in high-level deep learning libraries, most likely you will find them in the training loop. * <a href="https://docs.fast.ai/callback.core.html">fastai</a> - fastai provide high-level API for PyTorch * <a href="https://keras.io/api/callbacks/">Keras</a> - the high-level API for Tensorflow * <a href="https://github.com/pytorch/ignite">ignite</a> - they use event &amp; handler, which provides more flexibility in their opinion</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># A boring training Loop</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;">def</span> train(x):</span>
<span id="cb6-5">    n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb6-6">    n_batches <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-7">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb6-10">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_batches):</span>
<span id="cb6-11">            loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>  <span class="co" style="color: #5E5E5E;"># Pretend we are training the model</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">x <span class="op" style="color: #5E5E5E;">=</span> np.ones(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb7-2">train(x)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>So, let’s say you now want to print the loss at the end of an epoch. You can just add 1 lines of code.</p>
<section id="the-simple-approach" class="level3">
<h3 class="anchored" data-anchor-id="the-simple-approach">The simple approach</h3>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> train_with_print(x):</span>
<span id="cb8-2">    n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb8-3">    n_batches <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb8-4">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb8-5"></span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_batches):</span>
<span id="cb8-8">            loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="co" style="color: #5E5E5E;"># Pretend we are training the model</span></span>
<span id="cb8-9">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'End of Epoch. Epoch: </span><span class="sc" style="color: #5E5E5E;">{</span>epoch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, Loss: </span><span class="sc" style="color: #5E5E5E;">{</span>loss<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb8-10">    <span class="cf" style="color: #003B4F;">return</span> loss</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">train_with_print(x)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>End of Epoch. Epoch: 0, Loss: 18
End of Epoch. Epoch: 1, Loss: 16
End of Epoch. Epoch: 2, Loss: 14</code></pre>
</div>
</div>
</section>
<section id="callback-approach" class="level3">
<h3 class="anchored" data-anchor-id="callback-approach">Callback approach</h3>
<p>Or you call add a PrintCallback, which does the same thing but with a bit more code.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">class</span> Callback:</span>
<span id="cb11-2">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_start(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-3">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb11-4"></span>
<span id="cb11-5">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-6">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb11-7"></span>
<span id="cb11-8">    <span class="kw" style="color: #003B4F;">def</span> on_batch_start(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-9">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="kw" style="color: #003B4F;">def</span> on_batch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-12">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb11-13"></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="kw" style="color: #003B4F;">class</span> PrintCallback(Callback):</span>
<span id="cb11-16">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-17">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'End of Epoch. Loss: </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb11-18"></span>
<span id="cb11-19"></span>
<span id="cb11-20"><span class="kw" style="color: #003B4F;">def</span> train_with_callback(x, callback<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb11-21">    n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb11-22">    n_batches <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb11-23">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb11-24"></span>
<span id="cb11-25">    <span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb11-26"></span>
<span id="cb11-27">        callback.on_epoch_start(loss)</span>
<span id="cb11-28"></span>
<span id="cb11-29">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_batches):</span>
<span id="cb11-30">            callback.on_batch_start(loss)</span>
<span id="cb11-31">            loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>  <span class="co" style="color: #5E5E5E;"># Pretend we are training the model</span></span>
<span id="cb11-32">            callback.on_batch_end(loss)</span>
<span id="cb11-33"></span>
<span id="cb11-34">        callback.on_epoch_end(loss)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">train_with_callback(x, callback<span class="op" style="color: #5E5E5E;">=</span>PrintCallback())<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>End of Epoch. Loss: 18
End of Epoch. Loss: 16
End of Epoch. Loss: 14</code></pre>
</div>
</div>
<p>Usually, a callback defines a few particular events <code>on_xxx_xxx</code>, which indicate that the function will be executed according to the corresponding condition. So all callbacks will inherit the base class <code>Callback</code>, and override the desired function, here we only implemented the <code>on_epoch_end</code> method because we only want to show the loss at the end.</p>
<p>It may seem awkward to write so many more code to do one simple thing, but there are good reasons. Consider now you need to add more features, how would you do it?</p>
<ul>
<li>ModelCheckpoint</li>
<li>Early Stopping</li>
<li>LearningRateScheduler</li>
</ul>
<p>You can just add code in the loop, but it will start growing into a really giant function. It is impossible to <strong>test</strong> this function because it does 10 things at the same time. In addition, the extra code may not even be related to the training logic, they are just there to save the model or plot a chart. So, it is best to separate the logic. A function should only do 1 thing according to the <a href="https://en.wikipedia.org/wiki/SOLID">Single Responsibility Principle</a>. It helps you to reduce the complexity as it provides a nice abstraction, you are only modifying code within the specific callback you are interested.</p>
</section>
<section id="add-some-more-sauce" class="level3">
<h3 class="anchored" data-anchor-id="add-some-more-sauce">Add some more sauce!</h3>
<p>When using the <strong>Callback</strong> Pattern, I can just implement a few more classes and the training loop is barely touched. Here we introduce a new class <code>Callbacks</code> because we need to execute more than 1 callback, it is used for holding all callbacks and executed them sequentially.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">class</span> Callbacks:</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">    It is the container for callback</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb14-5"></span>
<span id="cb14-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, callbacks):</span>
<span id="cb14-7">        <span class="va" style="color: #111111;">self</span>.callbacks <span class="op" style="color: #5E5E5E;">=</span> callbacks</span>
<span id="cb14-8"></span>
<span id="cb14-9">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_start(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-10">        <span class="cf" style="color: #003B4F;">for</span> callback <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.callbacks:</span>
<span id="cb14-11">            callback.on_epoch_start(x)</span>
<span id="cb14-12"></span>
<span id="cb14-13">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-14">        <span class="cf" style="color: #003B4F;">for</span> callback <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.callbacks:</span>
<span id="cb14-15">            callback.on_epoch_end(x)</span>
<span id="cb14-16"></span>
<span id="cb14-17">    <span class="kw" style="color: #003B4F;">def</span> on_batch_start(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-18">        <span class="cf" style="color: #003B4F;">for</span> callback <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.callbacks:</span>
<span id="cb14-19">            callback.on_batch_start(x)</span>
<span id="cb14-20"></span>
<span id="cb14-21">    <span class="kw" style="color: #003B4F;">def</span> on_batch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-22">        <span class="cf" style="color: #003B4F;">for</span> callback <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.callbacks:</span>
<span id="cb14-23">            callback.on_batch_end(x)</span></code></pre></div>
</div>
<p>Then we implement the new <strong>Callback</strong> one by one, here we only have the pseudocode, but you should get the gist. For example, we only need to save the model at the end of an epoch, thus we implement the method <code>on_epoch_end</code> with a <code>ModelCheckPoint</code> callback.</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">class</span> PrintCallback(Callback):</span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb15-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'[</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(<span class="va" style="color: #111111;">self</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]: End of Epoch. Loss: </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">class</span> ModelCheckPoint(Callback):</span>
<span id="cb15-7">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb15-8">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'[</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(<span class="va" style="color: #111111;">self</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]: Save Model'</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="kw" style="color: #003B4F;">class</span> EarlyStoppingCallback(Callback):</span>
<span id="cb15-12">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb15-13">        <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">16</span>:</span>
<span id="cb15-14">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'[</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(<span class="va" style="color: #111111;">self</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]: Early Stopped'</span>)</span>
<span id="cb15-15"></span>
<span id="cb15-16"></span>
<span id="cb15-17"><span class="kw" style="color: #003B4F;">class</span> LearningRateScheduler(Callback):</span>
<span id="cb15-18">    <span class="kw" style="color: #003B4F;">def</span> on_batch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb15-19">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'    [</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(<span class="va" style="color: #111111;">self</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]: Reduce learning rate'</span>)</span></code></pre></div>
</div>
<p>And we also modify the training loop a bit, the argument now takes a <code>Callbacks</code> which contain zero to many callbacks.</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;">def</span> train_with_callbacks(x, callbacks<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb16-2">    n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb16-3">    n_batches <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb16-4">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb16-5"></span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb16-7"></span>
<span id="cb16-8">        callbacks.on_epoch_start(loss)                             <span class="co" style="color: #5E5E5E;"># on_epoch_start</span></span>
<span id="cb16-9">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_batches):</span>
<span id="cb16-10">            callbacks.on_batch_start(loss)                         <span class="co" style="color: #5E5E5E;"># on_batch_start</span></span>
<span id="cb16-11">            loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>  <span class="co" style="color: #5E5E5E;"># Pretend we are training the model</span></span>
<span id="cb16-12">            callbacks.on_batch_end(loss)                           <span class="co" style="color: #5E5E5E;"># on_batch_end</span></span>
<span id="cb16-13">        callbacks.on_epoch_end(loss)                               <span class="co" style="color: #5E5E5E;"># on_epoch_end</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">callbacks <span class="op" style="color: #5E5E5E;">=</span> Callbacks([PrintCallback(), ModelCheckPoint(),</span>
<span id="cb17-2">                      EarlyStoppingCallback(), LearningRateScheduler()])</span>
<span id="cb17-3">train_with_callbacks(x, callbacks<span class="op" style="color: #5E5E5E;">=</span>callbacks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    [LearningRateScheduler]: Reduce learning rate
    [LearningRateScheduler]: Reduce learning rate
    [LearningRateScheduler]: Reduce learning rate
[PrintCallback]: End of Epoch. Loss: 17
[ModelCheckPoint]: Save Model
    [LearningRateScheduler]: Reduce learning rate
    [LearningRateScheduler]: Reduce learning rate
    [LearningRateScheduler]: Reduce learning rate
[PrintCallback]: End of Epoch. Loss: 14
[ModelCheckPoint]: Save Model
[EarlyStoppingCallback]: Early Stopped</code></pre>
</div>
</div>
<p>Hopefully, it convinces you <strong>Callback</strong> makes the code cleaner and easier to maintain. If you just use plain <code>if-else</code> statements, you may end up with a big chunk of <code>if-else</code> clauses.</p>
<ul>
<li><a href="https://docs.fast.ai/callback.core.html">fastai</a> - fastai provide high-level API for PyTorch</li>
<li><a href="https://keras.io/api/callbacks/">Keras</a> - the high-level API for Tensorflow</li>
<li><a href="https://github.com/pytorch/ignite">ignite</a> - they use event &amp; handler, which provides more flexibility in their opinion</li>
</ul>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<ol type="1">
<li>https://stackoverflow.com/questions/824234/what-is-a-callback-function</li>
</ol>


</section>

 ]]></description>
  <category>python</category>
  <category>design pattern</category>
  <category>software</category>
  <guid>https://noklam.github.io/archive/posts/2021-07-10-5minutes-data-science-design-pattern-callback.html</guid>
  <pubDate>Fri, 09 Jul 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>A logging.config.dictConfig() issue in python</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2021-06-20-logging-config-dict-issue-kedro.html</link>
  <description><![CDATA[ 



<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> logging</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> clearml <span class="im" style="color: #00769E;">import</span> Task</span>
<span id="cb1-3">conf_logging <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"version"</span>:<span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb1-4">                <span class="st" style="color: #20794D;">"formatters"</span>:{</span>
<span id="cb1-5">                      <span class="st" style="color: #20794D;">"simple"</span>:{</span>
<span id="cb1-6">                             <span class="st" style="color: #20794D;">"format"</span>:<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%(asctime)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(name)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(levelname)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(message)s</span><span class="st" style="color: #20794D;">"</span>}</span>
<span id="cb1-7">                      }</span>
<span id="cb1-8">                  }</span>
<span id="cb1-9">t <span class="op" style="color: #5E5E5E;">=</span> Task.init(project_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb1-10">logging.config.dictConfig(conf_logging)</span>
<span id="cb1-11">logging.info(<span class="st" style="color: #20794D;">"INFO!"</span>)</span>
<span id="cb1-12">logging.debug(<span class="st" style="color: #20794D;">"DEBUG!"</span>)</span>
<span id="cb1-13">logging.warning(<span class="st" style="color: #20794D;">"WARN!"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"PRINT!"</span>)</span></code></pre></div>
<p>With this code block, you will find no print() or logging is sent to ClearML logging Console. Turns out <code>kedro</code> use <code>logging.config.dictConfig(conf_logging)</code> as the default and causing this issue.</p>
<p>A quick fix is to add <code>"incremental": True</code> in the config dict. In the <a href="https://docs.python.org/3/library/logging.config.html#:~:text=incremental%20-%20whether%20the%20configuration%20is%20to%20be%20interpreted%20as%20incremental%20to%20the%20existing%20configuration.%20This%20value%20defaults%20to%20False%2C%20which%20means%20that%20the%20specified%20configuration%20replaces%20the%20existing%20configuration%20with%20the%20same%20semantics%20as%20used%20by%20the%20existing%20fileConfig()%20API.">standard documentation</a>, the default is <code>False</code>, which means the configuration will replace existing one, thus removing the <code>clearml</code> handlers, and causing the issue I had.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">conf_logging <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"version"</span>:<span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb2-2">                <span class="st" style="color: #20794D;">"incremental"</span>: <span class="va" style="color: #111111;">True</span></span>
<span id="cb2-3">                <span class="st" style="color: #20794D;">"formatters"</span>:{</span>
<span id="cb2-4">                      <span class="st" style="color: #20794D;">"simple"</span>:{</span>
<span id="cb2-5">                             <span class="st" style="color: #20794D;">"format"</span>:<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%(asctime)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(name)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(levelname)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(message)s</span><span class="st" style="color: #20794D;">"</span>}</span>
<span id="cb2-6">                      }</span>
<span id="cb2-7">                  }</span></code></pre></div>
<!--truncate-->



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/archive/posts/2021-06-20-logging-config-dict-issue-kedro.html</guid>
  <pubDate>Sat, 19 Jun 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Python Internal Series - Global Interpreter Lock (GIL) and Memory Management</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2021-05-29-python-internal-series-python-gil-and-memory.html</link>
  <description><![CDATA[ 



<section id="is-gil-a-bad-design" class="level2">
<h2 class="anchored" data-anchor-id="is-gil-a-bad-design">Is GIL a bad design?</h2>
<p>Most people first learn about GIL because of how it slows down Python program and prevent multi-threading running efficiently, however, the GIL is one of the reason why Python survive 30 years and still growing healthyly.</p>
<p>GIL is nothing like the stereotype people think, legacy, slow. There are multiple benefits GIL provide:</p>
<ul>
<li>It speed ups single thread program.</li>
<li>It is compatible with many C Program thanks to the C API of CPysthon.</li>
</ul>
</section>
<section id="global-interpreter-lock-a.k.a-mutex-lock" class="level2">
<h2 class="anchored" data-anchor-id="global-interpreter-lock-a.k.a-mutex-lock">Global Interpreter Lock a.k.a Mutex Lock</h2>
<p>To start with, GIL is a mutex lock.</p>
</section>
<section id="why-gil-is-needed-in-the-first-place" class="level2">
<h2 class="anchored" data-anchor-id="why-gil-is-needed-in-the-first-place">Why GIL is needed in the first place?</h2>
<p>Memory management. Python use something called “reference counting”, which make it different from many modern programming lanaguage. It is what allow Python programmer to lay back and let Python take care when to release memory. Precisely, it is actually the C program controlling the memory life cycle for Python (Cpython). Cpython is known as the default Python interpreter. It first compiles Python to intermediate bytecode (.pyc files). These bytecode then being interpreted by a virtual machine ane executed. It is worth to mention that other variants of Python exist, i.e.&nbsp;IronPython(C#), Jython(Java), Pypy(Python) and they have different memory management mechanisms.</p>
<section id="python-memory-management---reference-count-garbage-collection-gc" class="level3">
<h3 class="anchored" data-anchor-id="python-memory-management---reference-count-garbage-collection-gc">Python Memory Management - Reference Count &amp; Garbage Collection (gc)</h3>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> sys</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sys.getrefcount(a)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>3</code></pre>
</div>
</div>
<p>Reference counting is a simple idea. The intuition is that if a particular object is not referenced by anything, it can be recycled since it will not be used anymore.</p>
<p>For example, the list <code>[1]</code> is now referenced by the variable <code>a</code>, so the reference count is incremented by 1.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb4-2">a <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb4-3">sys.getrefcount(a)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>2</code></pre>
</div>
</div>
<p>Note that the reference count is 2 instead of 1. 1. The first reference is <code>a = [1]</code> 2. When the variable <code>a</code> is passed to <code>sys.getrefcount(a)</code> as an argument, it also increases the reference count.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">del</span> a</span></code></pre></div>
</div>
<p>When <code>del a</code> is called, the list <code>[1]</code> have 0 reference count, and it is collected by Python automatically behind the scene.</p>
</section>
<section id="lock-deadlock" class="level3">
<h3 class="anchored" data-anchor-id="lock-deadlock">Lock &amp; Deadlock</h3>
</section>
<section id="memory-management" class="level3">
<h3 class="anchored" data-anchor-id="memory-management">Memory Management</h3>
</section>
</section>
<section id="reference" class="level1">
<h1>Reference</h1>
<ul>
<li>https://www.youtube.com/watch?v=KVKufdTphKs&amp;t=731s</li>
<li>https://realpython.com/python-gil/</li>
<li>https://devguide.python.org/garbage_collector/</li>
</ul>


</section>

 ]]></description>
  <category>python-internal</category>
  <guid>https://noklam.github.io/archive/posts/2021-05-29-python-internal-series-python-gil-and-memory.html</guid>
  <pubDate>Fri, 28 May 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Full Stack Deep Learning Notes - Lecture 03 - Recurrent Neural Network</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2021-04-16-full-stack-deep-learning-lecture-03.html</link>
  <description><![CDATA[ 



<section id="lstm" class="level1">
<h1>LSTM</h1>
<p>Reference: https://colah.github.io/posts/2015-08-Understanding-LSTMs/</p>
<p>The diagrams are from Chris Colah’s blog.</p>
<table class="table">
<thead>
<tr class="header">
<th>RNN</th>
<th>LSTM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://noklam.github.io/archive/posts/images/rnn.png" class="img-fluid" alt="RNN"></td>
<td><img src="https://noklam.github.io/archive/posts/images/lstm.png" class="img-fluid" alt="LSTM"></td>
</tr>
</tbody>
</table>
<p><img src="https://noklam.github.io/archive/posts/images/lstm_forget.png" class="img-fluid" alt="forget"> Forget Gate - Control the magnitude of cell state should be kept. Sigmoid range from (0 to 1). If 0, it means we should throw away the state cell, if 1 we keep everything. <img src="https://noklam.github.io/archive/posts/images/lstm_input.png" class="img-fluid" alt="input"> * Input Gate - Control what relevant information can be added from the current step. It takes hidden step from last step and the current input into consideration. <img src="https://noklam.github.io/archive/posts/images/lstm_output.png" class="img-fluid" alt="output"> * Output Gate - finalize the next hidden state</p>
</section>
<section id="google-neurl-machine-translation-gnmt" class="level1">
<h1># Google Neurl Machine Translation (GNMT)</h1>
<p>It more or less follow the attention mechanism described here.</p>
<p>https://blog.floydhub.com/attention-mechanism/#luong-att-step6</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/archive/posts/images/attention_gnmt.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">attention_gnmt</figcaption><p></p>
</figure>
</div>
<p>1.If you take the dot product of 1 encoder vector (at t_i) and decoder, you get a scalar. (Alignment Score) (1,h) * (h,1) -&gt; (1,1) 2. If encoder have 5 time_step, repeat the above steps -&gt; You get a vector with length of 5 (A vector of Alignment Scores) (5,h) <em>(h,1) -&gt; (5,1) 3. Take softmax of the alignments scores -&gt; (attention weights which sum to 1) (5,1) 4. Take dot product of encoders state with attention weights (h, 5) </em> (5, 1) -&gt; (h, 1), where h stands for dimension of hidden state. The result is a “Context Vector” <img src="https://noklam.github.io/archive/posts/images/context_vector.png" class="img-fluid" alt="context"></p>


</section>

 ]]></description>
  <category>fsdl</category>
  <guid>https://noklam.github.io/archive/posts/2021-04-16-full-stack-deep-learning-lecture-03.html</guid>
  <pubDate>Thu, 15 Apr 2021 23:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/archive/posts/images/rnn.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Microsoft Azure - DP100</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2021-03-27-microsoft-azure-dp100.html</link>
  <description><![CDATA[ 



<p>Last Updated: 2021-04-22</p>
<blockquote class="blockquote">
<p>Warning - On Azure website, it states that exam outline will be updated on May 20, 2021. Make sure you check out what’s changed.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>There are 49 questions, some questions have more scores. You need to pass with at least 700/1000 points. For my exam, there are around 10-15% questions that are quite hard, but as long as you score the easy one, you should be able to pass the exam.</p>
<p>There are different type of questions. * Cases Studies - Usually there are some scenarios provided, and you can not go back to previous questions once you answered. For other questions, you can review anytime you want. * Matching - You need to pick a few choice and arrange them in order. i.e.&nbsp;How to create an envioronment tht fulfill the requirements provided. * Multiple Choices - Typical MC - It may ask to to select Azure Machine Learning Service/Azure Machine Learning Studio/Azure Databricks/Azure Kubernetes Service (AKS) - Syntax type questions (there are quite a few of them) - Diagram (Azure ML Designer)</p>
<p>I struggled with the first few questions and scratching my head for a while. Don’t panic if you just can’t remember the answer, take a guess, marked it as <code>review question</code> (You can do this with the UI). At the end, I scored 809/1000.</p>
</section>
<section id="how-to-prepare-for-the-exam" class="level1">
<h1>How to prepare for the exam</h1>
<p>I spent roughly 15 hours to prepare this exam. Half of the time I used on the lab, the other half for reading docs and historical exam questions. Prior to this exam, I have a little bit experience cloud and I work as a Data Scientist, so it gives me some edges for this exam. But you don’t need to have a lot background knowledge, most of the data science concepts tested is very general and you can learnt from the labs.</p>
<section id="official-suggested-materials" class="level2">
<h2 class="anchored" data-anchor-id="official-suggested-materials">Official Suggested Materials</h2>
<ul>
<li>❗ https://docs.microsoft.com/en-us/learn/paths/build-ai-solutions-with-azure-ml-service/ - This should be your main focus, try to finish the labs and read the tutorials. You need to understand the use case of different products and familiar yourself with the syntax of Azure ML SDK etc.</li>
<li>https://docs.microsoft.com/en-us/learn/paths/create-no-code-predictive-models-azure-machine-learning/ - You should at least finish 1 of the lab to get some sense of the UI. It would be included in the exam for sure (2-3 questions maybe)</li>
<li>https://docs.microsoft.com/en-us/learn/paths/create-machine-learn-models/ - I didn’t spend much time on it as most of them are baisc data science concepts. You would need to how to apply different types of models (Regression/Classification/Time Series) &amp; AutoML for given scenario.</li>
</ul>
</section>
</section>
<section id="key-concepts" class="level1">
<h1>Key Concepts</h1>
<p>I am pretty sure these concepts will come up in every exam set, so be prepared.</p>
<ul>
<li>Workspace</li>
<li>DataStore/Blobstore</li>
<li>Compute Target
<ul>
<li>Cluster/VM/ACI <a href="https://docs.microsoft.com/en-us/azure/machine-learning/concept-compute-target">link</a></li>
</ul></li>
</ul>
<section id="compute-target" class="level2">
<h2 class="anchored" data-anchor-id="compute-target">Compute Target</h2>
<p>Machine Learning Studio - single/multi - Development/Experiment - Local Machine/Cloud VM. - Scale up to larger data/distributed - training compute target - Azure Machine Learning compute cluster - Azure Machine Learning compute instance - Deploy Compute Target (You need to able to judge the most appropiate option based on the context.) - Local web service - Azure Kubernetes Service (AKS) - Azure Container Instances - Azure Machine Learning compute clusters (Batch Inference)</p>
</section>
<section id="datastore" class="level2">
<h2 class="anchored" data-anchor-id="datastore">DataStore</h2>
<ul>
<li>Azure Storage (blob and file containers)</li>
<li>Azure Data Lake stores</li>
<li>Azure SQL Database</li>
<li>Azure Databricks file system (DBFS)</li>
</ul>
</section>
</section>
<section id="syntax-type-questions" class="level1">
<h1>Syntax Type Questions</h1>
<p>For me, this are the <em>hard</em> questions. There are at least 10 questions that requires you to remember some syntax. If you did not prepared for this, you will find all options seems to be correct. These are the questions that I encountered in my exam.</p>
<p>Come back to here to check your knowledge after you finish the labs.</p>
<ul>
<li>Run vs mlflow (How to log a metric? What is the syntax with or without mlflow?)
<ul>
<li><code>run = Run.get_context()</code></li>
<li><a href="https://github.com/MicrosoftLearning/DP100/blob/master/03A%20-%20Running%20Experiments.ipynb">mflow</a></li>
</ul></li>
<li>Workspace/Config (how to create a workspace? How to get a reference of a specific workspace? What are the required arguments?) <a href="https://docs.microsoft.com/en-us/learn/modules/intro-to-azure-machine-learning-service/3-azure-ml-tools?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
<li>Training a model and register a model/deploy</li>
<li>AutoML - Think about what you would do if you are using AutoML.
<ul>
<li>How to retrieve the best iteration model provided the experiment name or Run ID?</li>
<li>What are the Early Stopping choices you can use? <a href="https://docs.microsoft.com/en-us/learn/modules/tune-hyperparameters-with-azure-machine-learning/4-early-termination?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
</ul></li>
<li>Pipelines - I didn’t prepare well for this part, there are a few questions related to this topic. Again, familiar yourself with the syntax.
<ul>
<li>How to create/publish/schedule a pipeline, what are the syntax?</li>
<li>Do you publish a pipeline or schedule the pipeline first? <a href="https://docs.microsoft.com/en-us/learn/modules/create-pipelines-in-aml/5-publishing-pipelines?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
<li>How to retrieve a publihsed pipeline? <a href="https://docs.microsoft.com/en-us/learn/modules/create-pipelines-in-aml/7-scheduling-pipelines?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
</ul></li>
<li>How to troubleshoot a service? Where can you find the log? <a href="https://docs.microsoft.com/en-us/learn/modules/register-and-deploy-model-with-amls/4-troubleshoot-deployment?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
<li>Explainer (What are the different use cases for different explainer? What are their limitation?) <a href="https://docs.microsoft.com/en-us/learn/modules/explain-machine-learning-models-with-azure-machine-learning/2-feature-importance?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a>
<ul>
<li>How many Explainers are avaiable? (ans: 3!)</li>
</ul></li>
</ul>
</section>
<section id="example-questiions" class="level1">
<h1>Example Questiions</h1>
<p>You can also leverage the exam simulator, the free demo version will give you access to 19 questions, if you are willing to pay, you can access all 120 questions. Out of the 19 questions, there are around 4~5 similar questions appear in my DP-100 exam. If your goal is to pass this exam</p>
<ul>
<li><a href="https://www.examtopics.com/exams/microsoft/dp-100/view/">Website for DP-100, they are updated frequently</a></li>
<li><a href="https://www.exam-labs.com/dumps/DP-100">Questions</a> - Look for the “Free VCE Files”</li>
<li><a href="https://www.avanset.com/demo.html%20(software%20to%20open%20.vce%20file)">Example Simulator</a></li>
</ul>
<p>Finanlly, good luck to your exam. Try compare and contrast the workflow when you are doing the tutorials. Overall, Azure is well aware with the MLOps trend, the platform makes it quite easy to handle machine learning pipeline and deploy a model. Once you can related it to your daily work, you would find most of the steps are reasonable and easier to remember.</p>


</section>

 ]]></description>
  <category>azure</category>
  <guid>https://noklam.github.io/archive/posts/2021-03-27-microsoft-azure-dp100.html</guid>
  <pubDate>Sat, 27 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Full Stack Deep Learning Notes - Lecture 01</title>
  <link>https://noklam.github.io/archive/posts/2021-03-21-full-stack-deep-learning-lecture-01.html</link>
  <description><![CDATA[ 



<section id="advantages-over-unstructured-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="advantages-over-unstructured-pytorch">Advantages over unstructured PyTorch</h2>
<ul>
<li>Models become hardware agnostic</li>
<li>Code is clear to read because engineering code is abstracted away</li>
<li>Easier to reproduce</li>
<li>Make fewer mistakes because lightning handles the tricky engineering</li>
<li>Keeps all the flexibility (LightningModules are still PyTorch modules), but removes a ton of boilerplate</li>
<li>Lightning has dozens of integrations with popular machine learning tools.</li>
<li><a href="https://github.com/PyTorchLightning/pytorch-lightning/tree/master/tests">Tested rigorously with every new PR</a>. We test every combination of PyTorch and Python supported versions, every OS, multi GPUs and even TPUs.</li>
<li>Minimal running speed overhead (about 300 ms per epoch compared with pure PyTorch).</li>
</ul>
</section>
<section id="basic-trainer" class="level1">
<h1>Basic Trainer</h1>
<p>https://pytorch-lightning.readthedocs.io/en/0.7.3/lightning-module.html</p>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> pytorch_lightning <span class="im" style="color: #00769E;">import</span> Trainer</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> torch.nn <span class="im" style="color: #00769E;">import</span> functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> torchvision.datasets <span class="im" style="color: #00769E;">import</span> MNIST</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torchvision <span class="im" style="color: #00769E;">import</span> transforms</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> pytorch_lightning <span class="im" style="color: #00769E;">as</span> pl</span>
<span id="cb1-11"></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;">class</span> SimpleLightningModel(pl.LightningModule):</span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-15">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb1-16">        <span class="va" style="color: #111111;">self</span>.l1 <span class="op" style="color: #5E5E5E;">=</span> torch.nn.Linear(<span class="dv" style="color: #AD0000;">28</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">28</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;">return</span> torch.relu(<span class="va" style="color: #111111;">self</span>.l1(x.view(x.size(<span class="dv" style="color: #AD0000;">0</span>), <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)))</span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="kw" style="color: #003B4F;">def</span> training_step(<span class="va" style="color: #111111;">self</span>, batch, batch_nb):</span>
<span id="cb1-22">        x, y <span class="op" style="color: #5E5E5E;">=</span> batch</span>
<span id="cb1-23">        loss <span class="op" style="color: #5E5E5E;">=</span> F.cross_entropy(<span class="va" style="color: #111111;">self</span>(x), y)</span>
<span id="cb1-24">        tensorboard_logs <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'train_loss'</span>: loss}</span>
<span id="cb1-25">        <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'loss'</span>: loss, <span class="st" style="color: #20794D;">'log'</span>: tensorboard_logs}</span>
<span id="cb1-26"></span>
<span id="cb1-27">    <span class="kw" style="color: #003B4F;">def</span> configure_optimizers(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-28">        <span class="cf" style="color: #003B4F;">return</span> torch.optim.Adam(<span class="va" style="color: #111111;">self</span>.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.02</span>)</span>
<span id="cb1-29">    </span>
<span id="cb1-30">    </span>
<span id="cb1-31">    </span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">train_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(MNIST(os.getcwd(), train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor()), batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">mnist_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb2-4">trainer <span class="op" style="color: #5E5E5E;">=</span> pl.Trainer(gpus<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, progress_bar_refresh_rate<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>, max_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)    </span>
<span id="cb2-5">trainer.fit(mnist_model, train_loader)  </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>GPU available: False, used: False
TPU available: None, using: 0 TPU cores

  | Name | Type   | Params
--------------------------------
0 | l1   | Linear | 7.9 K 
--------------------------------
7.9 K     Trainable params
0         Non-trainable params
7.9 K     Total params
0.031     Total estimated model params size (MB)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"181d5c74571c4beebe725f7968f9603f","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\pytorch_lightning\utilities\distributed.py:51: UserWarning: The {log:dict keyword} was deprecated in 0.9.1 and will be removed in 1.0.0
Please use self.log(...) inside the lightningModule instead.
# log on a step or aggregate epoch metric to the logger and/or progress bar (inside LightningModule)
self.log('train_loss', loss, on_step=True, on_epoch=True, prog_bar=True)
  warnings.warn(*args, **kwargs)</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\pytorch_lightning\utilities\distributed.py:51: UserWarning: Detected KeyboardInterrupt, attempting graceful shutdown...
  warnings.warn(*args, **kwargs)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>1</code></pre>
</div>
</div>
<p>If you def <code>train_dataloader</code>, <code>Trainer</code> will use it automatically.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> train_dataloader(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;"># REQUIRED</span></span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;">return</span> DataLoader(MNIST(os.getcwd(), train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor()), batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">SimpleLightningModel.train_dataloader  <span class="op" style="color: #5E5E5E;">=</span> train_dataloader</span></code></pre></div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pl_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb10-2">trainer <span class="op" style="color: #5E5E5E;">=</span> Trainer(max_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-3">trainer.fit(pl_model)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>GPU available: False, used: False
TPU available: None, using: 0 TPU cores

  | Name | Type   | Params
--------------------------------
0 | l1   | Linear | 7.9 K 
--------------------------------
7.9 K     Trainable params
0         Non-trainable params
7.9 K     Total params
0.031     Total estimated model params size (MB)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7e32fc914f2f427595370b655aa83233","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>1</code></pre>
</div>
</div>
<p><code>training_step()</code>, <code>train_dataloader()</code>,<code>configure_optimizers()</code> are essential for <code>LightningModule</code>.</p>
<p>Lifecycle The methods in the LightningModule are called in this order:</p>
<ul>
<li><code>__init__</code></li>
<li><code>prepare_data</code></li>
<li><code>configure_optimizers</code></li>
<li><code>train_dataloader</code></li>
</ul>
<p>If you define a validation loop then <code>val_dataloader</code></p>
<p>And if you define a test loop: <code>test_dataloader</code></p>
<p>You will find <code>Trainer.fit()</code> automatically do validation and testing for you.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> validation_step(<span class="va" style="color: #111111;">self</span>, batch, batch_nb):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;"># OPTIONAL</span></span>
<span id="cb14-3">    x, y <span class="op" style="color: #5E5E5E;">=</span> batch</span>
<span id="cb14-4">    y_hat <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>(x)</span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'val_loss'</span>: F.cross_entropy(y_hat, y)}</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="kw" style="color: #003B4F;">def</span> validation_epoch_end(<span class="va" style="color: #111111;">self</span>, outputs):</span>
<span id="cb14-8">    <span class="co" style="color: #5E5E5E;"># OPTIONAL</span></span>
<span id="cb14-9">    avg_loss <span class="op" style="color: #5E5E5E;">=</span> torch.stack([x[<span class="st" style="color: #20794D;">'val_loss'</span>] <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> outputs]).mean()</span>
<span id="cb14-10">    tensorboard_logs <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'val_loss'</span>: avg_loss}</span>
<span id="cb14-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Validation Loss: "</span>, avg_loss)</span>
<span id="cb14-12">    <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'val_loss'</span>: avg_loss, <span class="st" style="color: #20794D;">'log'</span>: tensorboard_logs}</span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="kw" style="color: #003B4F;">def</span> val_dataloader(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;"># OPTIONAL</span></span>
<span id="cb14-16">    <span class="cf" style="color: #003B4F;">return</span> DataLoader(MNIST(os.getcwd(), train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor()), batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">SimpleLightningModel.validation_step <span class="op" style="color: #5E5E5E;">=</span> validation_step</span>
<span id="cb15-2">SimpleLightningModel.validation_epoch_end <span class="op" style="color: #5E5E5E;">=</span> validation_epoch_end</span>
<span id="cb15-3">SimpleLightningModel.val_dataloader <span class="op" style="color: #5E5E5E;">=</span> val_dataloader</span></code></pre></div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="30">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">pl_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb16-2">trainer <span class="op" style="color: #5E5E5E;">=</span> Trainer(max_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb16-3">trainer.fit(pl_model)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>GPU available: False, used: False
TPU available: None, using: 0 TPU cores

  | Name | Type   | Params
--------------------------------
0 | l1   | Linear | 7.9 K 
--------------------------------
7.9 K     Trainable params
0         Non-trainable params
7.9 K     Total params
0.031     Total estimated model params size (MB)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Validation Loss:  tensor(2.3084)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"692b7ce421f842018c01dbc37c9537af","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Validation Loss:  tensor(1.1287)
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\pytorch_lightning\utilities\distributed.py:51: UserWarning: Detected KeyboardInterrupt, attempting graceful shutdown...
  warnings.warn(*args, **kwargs)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>1</code></pre>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you are running the above cell, you will see validation progress bar in action.</p>
</div>
</div>
<p>By using the trainer you automatically get: * Tensorboard logging * Model checkpointing * Training and validation loop * early-stopping</p>
</section>
<section id="pytorch-nn.module-versus-pl.lightningmodule" class="level1">
<h1>Pytorch nn.Module versus pl.LightningModule</h1>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb22-2"><span class="im" style="color: #00769E;">import</span> pytorch_lightning <span class="im" style="color: #00769E;">as</span> pl</span>
<span id="cb22-3"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> nn</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.rand((<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb23-2">x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>tensor([[0.0745, 0.0237, 0.4719, 0.6037, 0.6015, 0.0921, 0.5982, 0.4860, 0.0959,
         0.5204],
        [0.2481, 0.2893, 0.5760, 0.3834, 0.6479, 0.0508, 0.5352, 0.5702, 0.4732,
         0.3867],
        [0.3467, 0.3321, 0.8570, 0.0983, 0.9210, 0.1848, 0.7397, 0.1350, 0.2646,
         0.7202],
        [0.6952, 0.8071, 0.1428, 0.3600, 0.1514, 0.2246, 0.8887, 0.9971, 0.0257,
         0.5519],
        [0.7547, 0.7165, 0.3677, 0.6642, 0.9991, 0.6585, 0.8673, 0.5005, 0.1843,
         0.1360],
        [0.1809, 0.0794, 0.5101, 0.6751, 0.2822, 0.6695, 0.8085, 0.2127, 0.7562,
         0.9859],
        [0.5914, 0.4481, 0.5107, 0.0032, 0.9766, 0.4627, 0.1520, 0.2915, 0.4323,
         0.3833],
        [0.6371, 0.7782, 0.7762, 0.4197, 0.2566, 0.7240, 0.0759, 0.9976, 0.6020,
         0.9528],
        [0.7674, 0.4044, 0.3497, 0.9784, 0.9318, 0.7313, 0.2962, 0.6555, 0.5570,
         0.9998],
        [0.1155, 0.8013, 0.7982, 0.5713, 0.2252, 0.4513, 0.8395, 0.7791, 0.1929,
         0.7707]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;">class</span> SimplePytorchModel(nn.Module):</span>
<span id="cb25-2">    ...</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">torch_model <span class="op" style="color: #5E5E5E;">=</span> SimplePytorchModel()</span>
<span id="cb26-2">torch_model(x)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>NotImplementedError: </code></pre>
</div>
</div>
<p>In python, a <code>NotImplementedError</code> usually appears when you inherit an abstract class, it is a way to tell you that you should implement <code>forward</code> method.</p>
<div class="cell" data-scrolled="true" data-execution_count="40">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">class</span> SimplePytorchModel(nn.Module):</span>
<span id="cb28-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb28-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb28-4">        <span class="va" style="color: #111111;">self</span>.linear <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb28-5">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>,x):</span>
<span id="cb28-6">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.linear(x)</span>
<span id="cb28-7">        </span>
<span id="cb28-8">torch_model <span class="op" style="color: #5E5E5E;">=</span> SimplePytorchModel()</span>
<span id="cb28-9">torch_model(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>tensor([[-0.1243,  0.2997,  0.0861,  0.1849,  0.7241,  0.2632, -0.0680, -0.2111,
         -0.2606,  0.0837],
        [-0.0055,  0.1734,  0.2746,  0.1991,  0.6859,  0.2768,  0.0025, -0.2273,
         -0.1930,  0.2122],
        [-0.1407,  0.2008,  0.3773,  0.0956,  0.9796,  0.1915,  0.2936, -0.0837,
         -0.3146,  0.0808],
        [-0.0511,  0.1153,  0.2846,  0.2106,  0.7390,  0.0737, -0.1066, -0.3968,
         -0.3212,  0.2819],
        [-0.3408,  0.3093,  0.3826,  0.0783,  0.5542,  0.1298, -0.1768, -0.1407,
         -0.4774,  0.1776],
        [-0.1892,  0.2563,  0.1489, -0.0091,  0.4639,  0.1332, -0.0166, -0.3798,
         -0.4021,  0.2960],
        [-0.1463,  0.0375,  0.4741,  0.0881,  0.5674, -0.0446,  0.1802, -0.2256,
         -0.3006,  0.0376],
        [-0.1006, -0.1654,  0.3519,  0.3158,  0.5454, -0.0781,  0.0866, -0.4032,
         -0.5419,  0.2580],
        [-0.4006,  0.3089,  0.3450, -0.1411,  0.4353, -0.0416, -0.1630, -0.4652,
         -0.7266,  0.1949],
        [-0.1350,  0.0554,  0.1492,  0.4462,  0.8991,  0.2545,  0.1237, -0.1321,
         -0.4591,  0.2725]], grad_fn=&lt;AddmmBackward&gt;)</code></pre>
</div>
</div>
<p><code>pl.LightningModule</code> is a higher level class for nn.Module.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;">class</span> SimpleLightningModel(pl.LightningModule):</span>
<span id="cb30-2">    ...</span>
<span id="cb30-3">    </span>
<span id="cb30-4">pl_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb30-5">pl_model(x)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>NotImplementedError: </code></pre>
</div>
</div>
<p>It shouldn’t surprise you the same error pop out again, after all, <code>pl.LightningModule</code> is a high level wrapper for <code>nn.Module</code>. So we need to implement what is the <code>forward</code> method too. We can confirm this with this line.</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="bu" style="color: null;">issubclass</span>(pl.LightningModule, nn.Module)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;">class</span> SimpleLightningModel(pl.LightningModule):</span>
<span id="cb34-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb34-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb34-4">        <span class="va" style="color: #111111;">self</span>.linear <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb34-5">        </span>
<span id="cb34-6">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>,x):</span>
<span id="cb34-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.linear(x)</span>
<span id="cb34-8">    </span>
<span id="cb34-9">pl_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb34-10">pl_model(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>tensor([[-1.9430e-01, -3.2665e-01,  1.5439e-01, -9.5051e-02, -2.6667e-01,
          7.0515e-01,  5.4318e-01,  4.8522e-02,  2.2087e-01,  4.6927e-02],
        [-1.9757e-01, -4.1862e-01,  1.0334e-01, -1.7735e-01, -3.7793e-01,
          7.6570e-01,  5.1128e-01, -5.9839e-04,  2.5192e-01,  9.6547e-02],
        [-2.1917e-01, -3.4533e-01,  1.6259e-01, -3.4603e-02, -5.8233e-01,
          7.6317e-01,  4.2289e-01, -5.8673e-02,  1.8833e-01,  9.4830e-02],
        [ 1.8358e-01, -4.9185e-01,  3.7877e-01, -2.4924e-03,  8.9796e-02,
          8.3502e-01,  6.2751e-01, -8.9419e-02,  5.8510e-01,  4.9892e-01],
        [-4.1500e-01, -5.1444e-01,  3.3273e-01, -1.9838e-01, -2.7256e-01,
          7.2250e-01,  3.3026e-01, -3.0803e-01,  4.8670e-01, -7.5673e-02],
        [-3.1485e-01, -5.7277e-01,  1.1172e-01,  2.0040e-01, -1.3642e-01,
          1.1535e+00,  4.7762e-01,  1.8485e-01, -1.2243e-01, -7.5894e-02],
        [-4.0921e-01, -4.7966e-01,  6.6770e-02, -2.1177e-01, -6.4936e-01,
          6.5091e-01,  1.9740e-01, -2.5598e-01,  6.5671e-02,  1.9597e-01],
        [-9.3814e-02, -6.7715e-01,  1.8347e-01, -2.4216e-01, -2.0083e-01,
          1.1088e+00,  4.1320e-01, -3.5082e-01,  1.6069e-01,  6.4193e-01],
        [-4.7541e-01, -8.7359e-01,  2.3989e-01, -3.2175e-01, -2.7573e-01,
          9.9955e-01,  3.8217e-01, -2.8564e-01,  1.1412e-02,  7.2301e-02],
        [-1.6360e-03, -3.6030e-01,  2.6286e-01,  5.9354e-02,  7.0063e-02,
          1.0381e+00,  5.0484e-01, -8.8854e-02,  3.9800e-01,  3.4168e-01]],
       grad_fn=&lt;AddmmBackward&gt;)</code></pre>
</div>
</div>
</section>
<section id="pytorch-dataloader-versus-pl.datamoudle" class="level1">
<h1>Pytorch Dataloader versus pl.DataMoudle</h1>
<p>A DataModule implements 5 key methods: * prepare_data (things to do on 1 GPU/TPU not on every GPU/TPU in distributed mode, e.g.&nbsp;split data). * setup (things to do on every accelerator in distributed mode, e.g.&nbsp;download data). * train_dataloader the training dataloader. * val_dataloader the val dataloader(s). * test_dataloader the test dataloader(s).</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why do we need to to <code>setup</code>? It’s more a design choice, the benefit of doing so is that the framework takes care how to do distributed training in most efficient way. On the other hand, if you only doing local training on 1 GPU, there is not much benefit of doing so.</p>
</div>
</div>
</section>
<section id="trainer.tune" class="level1">
<h1>Trainer.tune()</h1>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">    <span class="kw" style="color: #003B4F;">def</span> tune(<span class="va" style="color: #111111;">self</span>, model, train_dataloader, val_dataloaders, datamodule):</span>
<span id="cb36-2">        <span class="co" style="color: #5E5E5E;"># Run auto batch size scaling</span></span>
<span id="cb36-3">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.trainer.auto_scale_batch_size:</span>
<span id="cb36-4">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(<span class="va" style="color: #111111;">self</span>.trainer.auto_scale_batch_size, <span class="bu" style="color: null;">bool</span>):</span>
<span id="cb36-5">                <span class="va" style="color: #111111;">self</span>.trainer.auto_scale_batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'power'</span></span>
<span id="cb36-6">            <span class="va" style="color: #111111;">self</span>.scale_batch_size(</span>
<span id="cb36-7">                model,</span>
<span id="cb36-8">                mode<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.trainer.auto_scale_batch_size,</span>
<span id="cb36-9">                train_dataloader<span class="op" style="color: #5E5E5E;">=</span>train_dataloader,</span>
<span id="cb36-10">                val_dataloaders<span class="op" style="color: #5E5E5E;">=</span>val_dataloaders,</span>
<span id="cb36-11">                datamodule<span class="op" style="color: #5E5E5E;">=</span>datamodule,</span>
<span id="cb36-12">            )</span>
<span id="cb36-13"></span>
<span id="cb36-14">        <span class="co" style="color: #5E5E5E;"># Run learning rate finder:</span></span>
<span id="cb36-15">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.trainer.auto_lr_find:</span>
<span id="cb36-16">            <span class="va" style="color: #111111;">self</span>.lr_find(model, update_attr<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<p>The main usage of <code>Trainer.tune()</code> is to automatically find the best learning rate and batch size according to your model.</p>
</section>
<section id="now-back-to-our-lab1-trainingrun_experiment.py" class="level1">
<h1>Now Back to our Lab1 (training/run_experiment.py)</h1>
<p>I slightly modified the script so it can be run inside a notebook instead of using <code>argparse</code>. We change these arguments to variable instead.</p>
<p><code>python3 training/run_experiment.py --model_class=MLP --data_class=MNIST --max_epochs=5 --gpus=1 --fc1=4 --fc2=8</code></p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Add current directory so we can import the library</span></span>
<span id="cb37-2"><span class="im" style="color: #00769E;">import</span> os, sys</span>
<span id="cb37-3">sys.path.append(os.path.join(os.path.dirname(os.getcwd()), <span class="st" style="color: #20794D;">"text_recognizer"</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">parser <span class="op" style="color: #5E5E5E;">=</span> _setup_parser()</span>
<span id="cb38-2">args <span class="op" style="color: #5E5E5E;">=</span> parser.parse_args([</span>
<span id="cb38-3">    <span class="st" style="color: #20794D;">'--model_class'</span>,</span>
<span id="cb38-4">    <span class="st" style="color: #20794D;">'MLP'</span>,</span>
<span id="cb38-5">    <span class="st" style="color: #20794D;">'--data_class'</span>,</span>
<span id="cb38-6">    <span class="st" style="color: #20794D;">'MNIST'</span>,</span>
<span id="cb38-7">    <span class="st" style="color: #20794D;">'--max_epochs'</span>,</span>
<span id="cb38-8">    <span class="st" style="color: #20794D;">'5'</span>,</span>
<span id="cb38-9">    <span class="st" style="color: #20794D;">'--gpus'</span>,</span>
<span id="cb38-10">    <span class="st" style="color: #20794D;">'0'</span>,</span>
<span id="cb38-11">    <span class="st" style="color: #20794D;">'--fc1'</span>,</span>
<span id="cb38-12">    <span class="st" style="color: #20794D;">'4'</span>,</span>
<span id="cb38-13">    <span class="st" style="color: #20794D;">'--fc2'</span>,</span>
<span id="cb38-14">    <span class="st" style="color: #20794D;">'8'</span>,</span>
<span id="cb38-15">    ])</span>
<span id="cb38-16"></span>
<span id="cb38-17">data_class <span class="op" style="color: #5E5E5E;">=</span> _import_class(<span class="ss" style="color: #20794D;">f"text_recognizer.data.</span><span class="sc" style="color: #5E5E5E;">{</span>args<span class="sc" style="color: #5E5E5E;">.</span>data_class<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb38-18">model_class <span class="op" style="color: #5E5E5E;">=</span> _import_class(<span class="ss" style="color: #20794D;">f"text_recognizer.models.</span><span class="sc" style="color: #5E5E5E;">{</span>args<span class="sc" style="color: #5E5E5E;">.</span>model_class<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb38-19"></span>
<span id="cb38-20">data <span class="op" style="color: #5E5E5E;">=</span> data_class(args)</span>
<span id="cb38-21">model <span class="op" style="color: #5E5E5E;">=</span> model_class(data_config<span class="op" style="color: #5E5E5E;">=</span>data.config(), args<span class="op" style="color: #5E5E5E;">=</span>args)</span>
<span id="cb38-22"></span>
<span id="cb38-23"><span class="cf" style="color: #003B4F;">if</span> args.loss <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'ctc'</span>, <span class="st" style="color: #20794D;">'transformer'</span>):</span>
<span id="cb38-24">    lit_model_class <span class="op" style="color: #5E5E5E;">=</span> lit_models.BaseLitModel</span>
<span id="cb38-25"></span>
<span id="cb38-26"><span class="cf" style="color: #003B4F;">if</span> args.load_checkpoint <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb38-27">    lit_model <span class="op" style="color: #5E5E5E;">=</span> lit_model_class.load_from_checkpoint(args.load_checkpoint, args<span class="op" style="color: #5E5E5E;">=</span>args, model<span class="op" style="color: #5E5E5E;">=</span>model)</span>
<span id="cb38-28"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb38-29">    lit_model <span class="op" style="color: #5E5E5E;">=</span> lit_model_class(args<span class="op" style="color: #5E5E5E;">=</span>args, model<span class="op" style="color: #5E5E5E;">=</span>model)</span>
<span id="cb38-30"></span>
<span id="cb38-31">logger <span class="op" style="color: #5E5E5E;">=</span> pl.loggers.TensorBoardLogger(<span class="st" style="color: #20794D;">"training/logs"</span>)</span>
<span id="cb38-32"></span>
<span id="cb38-33">callbacks <span class="op" style="color: #5E5E5E;">=</span> [pl.callbacks.EarlyStopping(monitor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"val_loss"</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"min"</span>, patience<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)]</span>
<span id="cb38-34">args.weights_summary <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"full"</span>  <span class="co" style="color: #5E5E5E;"># Print full summary of the model</span></span>
<span id="cb38-35"></span>
<span id="cb38-36">trainer <span class="op" style="color: #5E5E5E;">=</span> pl.Trainer.from_argparse_args(args, callbacks<span class="op" style="color: #5E5E5E;">=</span>callbacks, logger<span class="op" style="color: #5E5E5E;">=</span>logger, default_root_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"training/logs"</span>)</span>
<span id="cb38-37">trainer.tune(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)  <span class="co" style="color: #5E5E5E;"># If passing --auto_lr_find, this will set learning rate</span></span>
<span id="cb38-38">trainer.fit(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)</span>
<span id="cb38-39">trainer.test(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">trainer.tune(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)  <span class="co" style="color: #5E5E5E;"># If passing --auto_lr_find, this will set learning rate</span></span>
<span id="cb39-2">trainer.fit(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)</span>
<span id="cb39-3">trainer.test(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)</span></code></pre></div>
<ol type="1">
<li>First line try to find the optimal batch size</li>
<li>Second line try to trains 5 epochs</li>
<li>Run test defined in <code>DataModule</code></li>
</ol>


</section>

 ]]></description>
  <category>fsdl</category>
  <guid>https://noklam.github.io/archive/posts/2021-03-21-full-stack-deep-learning-lecture-01.html</guid>
  <pubDate>Sun, 21 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Test as CI</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2021-03-17-pytest-data-test-truncated-error.html</link>
  <description><![CDATA[ 



<p>I am running test with <code>great_expectations</code> that validate data in UAT and production server with CI, so it would be nice if the log can capture this.</p>
<p>I created a custom error class that would do the job, however, <code>pytest</code> truncated my <code>AssertionError</code> since it is quite long.</p>
<p>I am using pytest magic from https://github.com/akaihola/ipython_pytest which allow me to run pytest in a Jupyter notebook cell.</p>
<p>It is quite simple with a few tens of lines.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">%%</span>writefile ipython_pytest.py</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> shlex</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> tempfile</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> IPython.core <span class="im" style="color: #00769E;">import</span> magic</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> pytest <span class="im" style="color: #00769E;">import</span> main <span class="im" style="color: #00769E;">as</span> pytest_main</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12">TEST_MODULE_NAME <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'_ipytesttmp'</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;">def</span> pytest(line, cell):</span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;">with</span> tempfile.TemporaryDirectory() <span class="im" style="color: #00769E;">as</span> root:</span>
<span id="cb1-16">        oldcwd <span class="op" style="color: #5E5E5E;">=</span> os.getcwd()</span>
<span id="cb1-17">        os.chdir(root)</span>
<span id="cb1-18">        tests_module_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">.py'</span>.<span class="bu" style="color: null;">format</span>(TEST_MODULE_NAME)</span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb1-20">            Path(tests_module_path).write_text(cell)</span>
<span id="cb1-21">            args <span class="op" style="color: #5E5E5E;">=</span> shlex.split(line)</span>
<span id="cb1-22">            os.environ[<span class="st" style="color: #20794D;">'COLUMNS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'80'</span></span>
<span id="cb1-23">            pytest_main(args <span class="op" style="color: #5E5E5E;">+</span> [tests_module_path])</span>
<span id="cb1-24">            <span class="cf" style="color: #003B4F;">if</span> TEST_MODULE_NAME <span class="kw" style="color: #003B4F;">in</span> sys.modules:</span>
<span id="cb1-25">                <span class="kw" style="color: #003B4F;">del</span> sys.modules[TEST_MODULE_NAME]</span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb1-27">            os.chdir(oldcwd)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="kw" style="color: #003B4F;">def</span> load_ipython_extension(ipython):</span>
<span id="cb1-30">    magic.register_cell_magic(pytest)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Writing ipython_pytest.py</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># !pip install pytest</span></span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;">%</span>load_ext ipython_pytest</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The ipython_pytest extension is already loaded. To reload it, use:
  %reload_ext ipython_pytest</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">%%</span>pytest</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">def</span> test_long_assertion_error():</span>
<span id="cb5-4">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"placeholder"</span></span>
<span id="cb5-5">    expect <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"abcdefg</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span> <span class="co" style="color: #5E5E5E;"># Long string</span></span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;">assert</span> x <span class="op" style="color: #5E5E5E;">==</span> expect</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.3, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: C:\Users\channo\AppData\Local\Temp\tmpohw9e_9w
collected 1 item

_ipytesttmp.py F                                                         [100%]

================================== FAILURES ===================================
__________________________ test_long_assertion_error __________________________

    def test_long_assertion_error():
        x = "placeholder"
        expect = "abcdefg\n"*20 # Long string
&gt;       assert x == expect
E       AssertionError: assert 'placeholder' == 'abcdefg\nabc...fg\nabcdefg\n'
E         + placeholder
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg...
E         
E         ...Full output truncated (15 lines hidden), use '-vv' to show

_ipytesttmp.py:5: AssertionError
=========================== short test summary info ===========================
FAILED _ipytesttmp.py::test_long_assertion_error - AssertionError: assert 'pl...
============================== 1 failed in 0.06s ==============================</code></pre>
</div>
</div>
<p>You can see that pytest truncated my error with <code>...</code> Here is how I solve ths issue</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">%%</span>pytest <span class="op" style="color: #5E5E5E;">-</span>vv</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;">def</span> test_long_assertion_error():</span>
<span id="cb7-4">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"placeholder"</span></span>
<span id="cb7-5">    expect <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"abcdefg</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span> <span class="co" style="color: #5E5E5E;"># Long string</span></span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;">assert</span> x <span class="op" style="color: #5E5E5E;">==</span> expect</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.3, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- c:\programdata\miniconda3\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\channo\AppData\Local\Temp\tmpyic4vcra
collecting ... collected 1 item

_ipytesttmp.py::test_long_assertion_error FAILED                         [100%]

================================== FAILURES ===================================
__________________________ test_long_assertion_error __________________________

    def test_long_assertion_error():
        x = "placeholder"
        expect = "abcdefg\n"*20 # Long string
&gt;       assert x == expect
E       AssertionError: assert 'placeholder' == ('abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n')
E         + placeholder
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg

_ipytesttmp.py:5: AssertionError
=========================== short test summary info ===========================
FAILED _ipytesttmp.py::test_long_assertion_error - AssertionError: assert 'pl...
============================== 1 failed in 0.06s ==============================</code></pre>
</div>
</div>



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/archive/posts/2021-03-17-pytest-data-test-truncated-error.html</guid>
  <pubDate>Wed, 17 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Create python command line in few lines, and use it anywhere as a standalone tool!</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2020-12-10-typer-create-command-line-and-use-it-anywhere.html</link>
  <description><![CDATA[ 



<p>The <code>Typer</code> documentation has great example explaining how to use it. This is the example copied from their GitHub homepage. https://github.com/tiangolo/typer.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">%%</span>writefile main1.py</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> typer</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">def</span> main(name: <span class="bu" style="color: null;">str</span>):</span>
<span id="cb1-6">    typer.echo(<span class="ss" style="color: #20794D;">f"Hello </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb1-10">    typer.run(main)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting main1.py</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>python main1.py world</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello world</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>python main1.py <span class="op" style="color: #5E5E5E;">--</span><span class="bu" style="color: null;">help</span> </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Usage: main1.py [OPTIONS] NAME

Arguments:
  NAME  [required]

Options:
  --install-completion [bash|zsh|fish|powershell|pwsh]
                                  Install completion for the specified shell.
  --show-completion [bash|zsh|fish|powershell|pwsh]
                                  Show completion for the specified shell, to
                                  copy it or customize the installation.

  --help                          Show this message and exit.</code></pre>
</div>
</div>
<p>Here I write a new file to <code>main1.py</code> and execute it as a command line with just 5 lines of code. It always comes with a help message for free. Let’s see another example.</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">%%</span>writefile main2.py </span>
<span id="cb7-2"><span class="im" style="color: #00769E;">import</span> typer</span>
<span id="cb7-3"></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">def</span> main(name: <span class="bu" style="color: null;">str</span>, age: <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span>, height_meters: <span class="bu" style="color: null;">float</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.89</span>, female: <span class="bu" style="color: null;">bool</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>):</span>
<span id="cb7-6">    typer.echo(<span class="ss" style="color: #20794D;">f"NAME is </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, of type: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(name)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb7-7">    typer.echo(<span class="ss" style="color: #20794D;">f"--age is </span><span class="sc" style="color: #5E5E5E;">{</span>age<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, of type: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(age)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb7-8">    typer.echo(<span class="ss" style="color: #20794D;">f"--height-meters is </span><span class="sc" style="color: #5E5E5E;">{</span>height_meters<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, of type: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(height_meters)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb7-9">    typer.echo(<span class="ss" style="color: #20794D;">f"--female is </span><span class="sc" style="color: #5E5E5E;">{</span>female<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, of type: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(female)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb7-10"></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb7-13">    typer.run(main)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Writing main2.py</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">!</span>python main2.py <span class="op" style="color: #5E5E5E;">--</span><span class="bu" style="color: null;">help</span> </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Usage: main2.py [OPTIONS] NAME

Arguments:
  NAME  [required]

Options:
  --age INTEGER                   [default: 20]
  --height-meters FLOAT           [default: 1.89]
  --female / --no-female          [default: True]
  --install-completion [bash|zsh|fish|powershell|pwsh]
                                  Install completion for the specified shell.
  --show-completion [bash|zsh|fish|powershell|pwsh]
                                  Show completion for the specified shell, to
                                  copy it or customize the installation.

  --help                          Show this message and exit.</code></pre>
</div>
</div>
<p>This time, we can see that the help message even supplement the expected datatype. <code>Typer</code> will validate the type and conevrt it when possible.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">!</span>python main2.py Nok <span class="op" style="color: #5E5E5E;">--</span>age<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NAME is Nok, of type: &lt;class 'str'&gt;
--age is 3, of type: &lt;class 'int'&gt;
--height-meters is 1.89, of type: &lt;class 'float'&gt;
--female is True, of type: &lt;class 'bool'&gt;</code></pre>
</div>
</div>
<p>The command line works file, but it only works in the same directory, and you always have to type the keyword <code>python</code>. With python setuptools, we can actually installed a command line and run it anywhere. It is pretty easy with just 1 trick, let’s go back to the simple Hello command.</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="op" style="color: #5E5E5E;">%%</span>writefile main3.py</span>
<span id="cb13-2"><span class="im" style="color: #00769E;">import</span> typer</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">def</span> hello(name:<span class="bu" style="color: null;">str</span>):</span>
<span id="cb13-5">    typer.echo(<span class="ss" style="color: #20794D;">f"Hello </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb13-6">    </span>
<span id="cb13-7"><span class="kw" style="color: #003B4F;">def</span> main():</span>
<span id="cb13-8">    typer.run(hello)</span>
<span id="cb13-9">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting main3.py</code></pre>
</div>
</div>
<p>Here we made a few changes. 1. The logic is move to a new function named <code>hello</code> 2. We removed the __main__ part, as we will not call this python file directly anymore. 3. <code>typer.run(main)</code> is changed to <code>typer.run(hello)</code> and moved inside the <code>main</code> function.</p>
<section id="console-script" class="level1">
<h1>Console Script</h1>
<p>We will use setuptool to build console script, which may call the function <code>main</code>. The magic is using console script to install a command line interface (It creates a .exe file) that can be run anywhere. We can name our command line instead of using the filename with a pattern of <code>command_name=file:func_name</code>. Here our function <code>main</code> is inside a file <code>main3.py</code>, so we use <code>hello=main3:main</code>.</p>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="op" style="color: #5E5E5E;">%%</span>writefile setup.py</span>
<span id="cb15-2"><span class="im" style="color: #00769E;">from</span> setuptools <span class="im" style="color: #00769E;">import</span> setup, find_packages</span>
<span id="cb15-3"></span>
<span id="cb15-4"></span>
<span id="cb15-5">setup(</span>
<span id="cb15-6">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"my_library"</span>,</span>
<span id="cb15-7">    version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1.0"</span>,</span>
<span id="cb15-8">    packages<span class="op" style="color: #5E5E5E;">=</span>find_packages(),</span>
<span id="cb15-9">        entry_points <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb15-10">        <span class="st" style="color: #20794D;">'console_scripts'</span>: [<span class="st" style="color: #20794D;">'hello=main3:main'</span>]}</span>
<span id="cb15-11">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting setup.py</code></pre>
</div>
</div>
<p>Then we install the console script .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;">!</span>python setup.py develop</span></code></pre></div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">!</span>hello world </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello world</code></pre>
</div>
</div>
<p>We can now call <code>hello</code> anywhere, as it is installed as a executable.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;">!</span>where hello</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>C:\ProgramData\Miniconda3\Scripts\hello.exe</code></pre>
</div>
</div>
<p>It’s time for you to build your own commands. This can be easily extended to support multiple commands. https://github.com/tiangolo/typer</p>


</section>

 ]]></description>
  <category>python</category>
  <category>cli</category>
  <category>typer</category>
  <guid>https://noklam.github.io/archive/posts/2020-12-10-typer-create-command-line-and-use-it-anywhere.html</guid>
  <pubDate>Thu, 10 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Optimizing pandas - Reducing 90% memory footprint - updated version</title>
  <link>https://noklam.github.io/archive/posts/2020-11-10-pandas memory optimization.html</link>
  <description><![CDATA[ 



<section id="todo" class="level1">
<h1>Todo</h1>
<ul class="task-list">
<li><input type="checkbox" disabled="">TWO options to automatically optimize pandas</li>
</ul>
<p>We can check some basic info about the data with pandas <code>.info()</code> function</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">df_gamelogs.info(memory_usage<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'deep'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 171907 entries, 0 to 171906
Columns: 161 entries, date to acquisition_info
dtypes: float64(77), int64(6), object(78)
memory usage: 860.5 MB</code></pre>
</div>
</div>
<p>We can see the data has 171907 rows and 161 columns and 859.4 MB memory. Let’s see how much we can optimize <code>dtype_diet</code>.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">proposed_df <span class="op" style="color: #5E5E5E;">=</span> report_on_dataframe(df_gamelogs, unit<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MB"</span>)</span>
<span id="cb3-2">proposed_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Current dtype</th>
      <th>Proposed dtype</th>
      <th>Current Memory (MB)</th>
      <th>Proposed Memory (MB)</th>
      <th>Ram Usage Improvement (MB)</th>
      <th>Ram Usage Improvement (%)</th>
    </tr>
    <tr>
      <th>Column</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>date</th>
      <td>int64</td>
      <td>int32</td>
      <td>671.574219</td>
      <td>335.818359</td>
      <td>335.755859</td>
      <td>49.995347</td>
    </tr>
    <tr>
      <th>number_of_game</th>
      <td>int64</td>
      <td>int8</td>
      <td>671.574219</td>
      <td>84.001465</td>
      <td>587.572754</td>
      <td>87.491857</td>
    </tr>
    <tr>
      <th>day_of_week</th>
      <td>object</td>
      <td>category</td>
      <td>5036.400391</td>
      <td>84.362793</td>
      <td>4952.037598</td>
      <td>98.324939</td>
    </tr>
    <tr>
      <th>v_name</th>
      <td>object</td>
      <td>category</td>
      <td>5036.400391</td>
      <td>174.776367</td>
      <td>4861.624023</td>
      <td>96.529736</td>
    </tr>
    <tr>
      <th>v_league</th>
      <td>object</td>
      <td>category</td>
      <td>4952.461426</td>
      <td>84.359375</td>
      <td>4868.102051</td>
      <td>98.296617</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>h_player_9_id</th>
      <td>object</td>
      <td>category</td>
      <td>4955.471680</td>
      <td>412.757324</td>
      <td>4542.714355</td>
      <td>91.670675</td>
    </tr>
    <tr>
      <th>h_player_9_name</th>
      <td>object</td>
      <td>category</td>
      <td>5225.463379</td>
      <td>421.197266</td>
      <td>4804.266113</td>
      <td>91.939523</td>
    </tr>
    <tr>
      <th>h_player_9_def_pos</th>
      <td>float64</td>
      <td>float16</td>
      <td>671.574219</td>
      <td>167.940430</td>
      <td>503.633789</td>
      <td>74.993020</td>
    </tr>
    <tr>
      <th>additional_info</th>
      <td>object</td>
      <td>category</td>
      <td>2714.671875</td>
      <td>190.601074</td>
      <td>2524.070801</td>
      <td>92.978854</td>
    </tr>
    <tr>
      <th>acquisition_info</th>
      <td>object</td>
      <td>category</td>
      <td>4749.209961</td>
      <td>84.070801</td>
      <td>4665.139160</td>
      <td>98.229794</td>
    </tr>
  </tbody>
</table>
<p>161 rows × 6 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">new_df <span class="op" style="color: #5E5E5E;">=</span> optimize_dtypes(df_gamelogs, proposed_df) <span class="co" style="color: #5E5E5E;"># Avoid Type conversion error from int64 to int 8 with NA</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Original df memory: </span><span class="sc" style="color: #5E5E5E;">{</span>df_gamelogs<span class="sc" style="color: #5E5E5E;">.</span>memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB'</span>)</span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Propsed df memory: </span><span class="sc" style="color: #5E5E5E;">{</span>new_df<span class="sc" style="color: #5E5E5E;">.</span>memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original df memory: 860.500262260437 MB
Propsed df memory: 79.04368686676025 MB</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># sell_prices.csv.zip Source data: https://www.kaggle.com/c/m5-forecasting-uncertainty/</span></span>
<span id="cb7-2">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'../data/sell_prices.csv.zip'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">proposed_df <span class="op" style="color: #5E5E5E;">=</span> report_on_dataframe(df, unit<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MB"</span>)</span>
<span id="cb8-2">new_df <span class="op" style="color: #5E5E5E;">=</span> optimize_dtypes(df, proposed_df) <span class="co" style="color: #5E5E5E;"># Avoid Type conversion error from int64 to int 8 with NA</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Original df memory: </span><span class="sc" style="color: #5E5E5E;">{</span>df_gamelogs<span class="sc" style="color: #5E5E5E;">.</span>memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB'</span>)</span>
<span id="cb9-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Propsed df memory: </span><span class="sc" style="color: #5E5E5E;">{</span>new_df<span class="sc" style="color: #5E5E5E;">.</span>memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original df memory: 860.500262260437 MB
Propsed df memory: 85.09655094146729 MB</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">## hide</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">## collapse-hide</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/archive/posts/2020-11-10-pandas memory optimization.html</guid>
  <pubDate>Tue, 10 Nov 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Lesson learnt from Kaggle - Bengali Image Classification Competition</title>
  <link>https://noklam.github.io/archive/posts/2020-03-21-10-lessons-learnt-from-kaggle-competition.html</link>
  <description><![CDATA[ 



<p>I have teamed up with a friend to participate in the <a href="https://www.kaggle.com/c/bengaliai-cv19/?utm_medium=email&amp;utm_source=intercom&amp;utm_campaign=bengaliai-email-launch">Bengali Image Classification Competition</a>. We struggled to get a high rank in the Public leaderboard throughout the competition. In the end, the result is a big surprise to everyone as the leaderboard shook a lot.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/archive/posts/https:/github.com/noklam/mediumnok/blob/master/_notebooks/nb_img/bengali_0_public_lb.png?raw=true" title="Public Leaderboard has a much higher score, >0.99 recall!" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Public Leaderboard</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/archive/posts/https:/github.com/noklam/mediumnok/blob/master/_notebooks/nb_img/bengali_1_private_lb.png?raw=true" title="Note that the rank shook for over 1000!" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Public Leaderboard</figcaption><p></p>
</figure>
</div>
<p>The final private score was much lower than the public score. It suggests that most participants are over-fitting Public leaderboard.</p>
<section id="the-classification-task" class="level1">
<h1>The Classification Task</h1>
<p>This is an image classification competition. We need to predict 3 parts of <strong>Bengali</strong> characters <code>root</code>, <code>consonant</code> and <code>vowel</code>. It is a typical classification tasks like the <strong>MNIST</strong> dataset.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/archive/posts/https:/github.com/noklam/mediumnok/blob/master/_notebooks/nb_img/bengali_2_grapheme.png?raw=true" title="Examples of characters" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Grapheme example</figcaption><p></p>
</figure>
</div>
<section id="evaluation-metrics" class="level2">
<h2 class="anchored" data-anchor-id="evaluation-metrics">Evaluation Metrics</h2>
<p>The competition use macro-recall as the evaluation metric. In general, people get &gt;96% recall in training, the tops are even getting &gt;99% recall.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">python</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> sklearn.metrics</span>
<span id="cb1-4"></span>
<span id="cb1-5">scores <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;">for</span> component <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'grapheme_root'</span>, <span class="st" style="color: #20794D;">'consonant_diacritic'</span>, <span class="st" style="color: #20794D;">'vowel_diacritic'</span>]:</span>
<span id="cb1-7">    y_true_subset <span class="op" style="color: #5E5E5E;">=</span> solution[solution[component] <span class="op" style="color: #5E5E5E;">==</span> component][<span class="st" style="color: #20794D;">'target'</span>].values</span>
<span id="cb1-8">    y_pred_subset <span class="op" style="color: #5E5E5E;">=</span> submission[submission[component] <span class="op" style="color: #5E5E5E;">==</span> component][<span class="st" style="color: #20794D;">'target'</span>].values</span>
<span id="cb1-9">    scores.append(sklearn.metrics.recall_score(</span>
<span id="cb1-10">        y_true_subset, y_pred_subset, average<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'macro'</span>))</span>
<span id="cb1-11">final_score <span class="op" style="color: #5E5E5E;">=</span> np.average(scores, weights<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>])</span></code></pre></div>
</details>
</div>
</section>
<section id="model-bigger-still-better" class="level2">
<h2 class="anchored" data-anchor-id="model-bigger-still-better">Model (Bigger still better)</h2>
<p>We start with <code>xresnet50</code>, which is a relatively small model. As we have the assumption that this classification task is a very standard task, therefore the difference of model will not be the most important one. Thus we pick xresnet50 as it has a good performance in terms of accuracy and train relatively fast.</p>
<p>Near the end of the competition, we switch to a larger model <code>se-resnext101</code>. It requires triple training time plus we have to scale down the batch size as it does not fit into the GPU memory. Surprisingly (maybe not surprising to everyone), the bigger model did boost the performance more than I expected with ~0.3-0.5% recall. It is a big improvement as the recall is very high (~0.97), in other words, it reduces <strong>~10%</strong> error solely by just using a better model, not bad!</p>
</section>
<section id="augmentation" class="level2">
<h2 class="anchored" data-anchor-id="augmentation">Augmentation</h2>
<p>There are never “enough” data for deep learning, so we always try our best to collect more data. Since we cannot collect more data, we need data augmentation. We start with rotation + scale. We also find <strong>MixUp</strong> and <strong>CutMix</strong> is very effective to boost the performance. It also gives us roughly <strong>10%</strong> boost initially from 0.96 -&gt; 0.964 recall.</p>
<section id="cutmix-mixup" class="level3">
<h3 class="anchored" data-anchor-id="cutmix-mixup"><a href="https://arxiv.org/abs/1905.04899">CutMix</a> &amp; <a href="https://arxiv.org/pdf/1710.09412.pdf">MixUp</a></h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/archive/posts/https:/github.com/noklam/mediumnok/blob/master/_notebooks/nb_img/bengali_3_data_aug.png?raw=true" title="Augmentation Example" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Example of Augmentation</figcaption><p></p>
</figure>
</div>
<p><em>Mixup</em> is simple, if you know about photography, it is similar to have double exposure of your photos. It overlays two images (cat+dog in this case) by sampling weights. So instead of prediction P(dog) = 1, the new target could become P(dog) = 0.8 and P(cat) = 0.2.</p>
<p><em>CutMix</em> shares a similar idea, instead of overlay 2 images, it crops out a certain ratio of the image and replaces it with another one.</p>
<p>It always surprises me that these augmented data does not make much sense to a human, but it is very effective to improve model accuracy and reduce overfitting empirically.</p>
</section>
</section>
</section>
<section id="logging-of-experiment" class="level1">
<h1>Logging of Experiment</h1>
<p>I normally just log my experiment with a simple CSV and some printing message. This start to get tedious when there are more than 1 people to work. It is important to communicate the results of experiments. I explore <code>Hydra</code> and <code>wandb</code> in this competition and they are very useful.</p>
<section id="hydra" class="level2">
<h2 class="anchored" data-anchor-id="hydra"><a href="https://hydra.cc/">Hydra</a></h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/archive/posts/https:/github.com/noklam/mediumnok/blob/master/_notebooks/nb_img/bengali_4_hydra.png?raw=true" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Hydra for configuration composition</figcaption><p></p>
</figure>
</div>
<p>It is often a good idea to make your experiment configurable. We use <code>Hydra</code> for this purpose and it is useful to compose different configuration group. By making your hyper-paramters configurable, you can define an experiment by configuration files and run multiple experiments. By logging the configuration with the training statistics, it is easy to do cross-models comparison and find out which configuration is useful for your model.</p>
<p>I have written <a href="https://mediumnok.ml/coding/ml/2020/02/08/Config-Composition-with-Hydra-for-Machine-Learning-Experiments.html">an short example</a> for how to use <strong>Hydra</strong>.</p>
</section>
<section id="wandb" class="level2">
<h2 class="anchored" data-anchor-id="wandb"><a href="https://www.wandb.com/">Wandb</a></h2>
<p><strong>wandb</strong> (Weight &amp; Biases) does a few things. It provides built-in functions that automatically log all your model statistics, you can also log your custom metrics with simple functions.</p>
<ul>
<li>Compare the configuration of different experiments to find out the model with the best performance.</li>
<li>Built-in function for logging model weights and gradient for debugging purpose.</li>
<li>Log any metrics that you want</li>
</ul>
<p>All of these combined to make collaboration experience better. It is really important to sync the progress frequently and getting everyone results in a single platform makes these conversations easier.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/archive/posts/https:/github.com/noklam/mediumnok/blob/master/_notebooks/nb_img/bengali_06.jpg?raw=true" title="Screenshot of wandb UI for cross model comparison" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">image.png</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="stochastic-weight-averaging" class="level1">
<h1><a href="https://pytorch.org/blog/stochastic-weight-averaging-in-pytorch/">Stochastic Weight Averaging</a></h1>
<p>This is a simple yet effective technique which gives about 0.3-0.4% boost to my model. In simple words, it takes <strong>snapshots</strong> of the model weights during training and takes an average at the end. It provides a cheap way to do models ensemble while you are only training 1 model. This is important for this competition as it allows me to keep training time short enough to allow feedback within hours and reduce over-fitting.)</p>
</section>
<section id="image.png" class="level1">
<h1><img src="https://noklam.github.io/archive/posts/https:/github.com/noklam/mediumnok/blob/master/_notebooks/nb_img/bengali_5_swa.png?raw=true" title="Stochastic Weight Averaging" class="img-fluid" alt="image.png"></h1>
</section>
<section id="larger-is-better-image-size" class="level1">
<h1>Larger is better (image size)</h1>
<p>We downsample our image size to 128x128 throughout the competition, as it makes the model train faster and we believe most technique should be transferable to larger image size. It is important to keep your feedback loop short enough (hours if not days). You want your training data as small as possible while keeping them transferable to your full dataset. Once we scale our image to full size, it takes almost 20 hours to train a single model, and we only have little chance to tune the hyper-parameters before the competition end.</p>
</section>
<section id="debug-checkpoint" class="level1">
<h1>Debug &amp; Checkpoint</h1>
<p>There was a time we develop our model separately and we didn’t sync our code for a while. We refactor our code during the time and it was a huge mistake. It turns out our pre-refactor code trains much better model and we introduce some unknown bug. It is almost impossible to find out as we change multiple things. It is so hard to debug a neural network and testing it thoroughly is important. Injecting a large amount of code may help you to run an experiment earlier, but you may pay much more time to debug it afterwards.</p>
<p>I think this is applicable even if you are working alone. * Keep your changes small. * Establish a baseline early, always do a regression test after a new feature introduced (especially after code refactoring) * Create checkpoint to rollback anytime, especially if you are not working on it every day.</p>
<p>Implementation is the key of Kaggle competition (in real life too). It does not matter how great your model is, a tiny little bug could have damaged your model silently</p>
</section>
<section id="use-auxiliary-label" class="level1">
<h1>Use auxiliary label</h1>
<p><img src="https://noklam.github.io/archive/posts/https:/github.com/noklam/mediumnok/blob/master/_notebooks/nb_img/bengali_7.png?raw=true" title="The extra grapheme label" class="img-fluid" alt="image.png"> As mentioned earlier, this competition requires to predict the <code>root</code>, <code>vowel</code> and the <code>consonant</code> part. In the training data, they actually provide the <code>grapheme</code> too. Lots of people saying that if you train with the <code>grapheme</code>, it improves the model greatly and get the recall &gt;98% easily.</p>
<p>This is something we could not reproduce throughout the competition, we tried it in the very last minute but it does not seem to improve our model. It turns out lots of people are overfitting the data, as the testing dataset has much more unseen character.</p>
<p>But it is still a great remark that training with labels that is not your final desired output could still be very useful.</p>
</section>
<section id="weight-loss" class="level1">
<h1>Weight loss</h1>
<p>The distribution of the training dataset is very imbalance, but to get a good result, we need to predict every single class accurately (macro recall). To deal with this issue, we choose to use class weights, where a higher weight would be applied to rare samples. We don’t have an ablation study for this, but it seems to help close the gap between accuracy &amp; recall and allows us to train the model slightly better.</p>
</section>
<section id="find-a-teammate" class="level1">
<h1>Find a teammate!</h1>
<p>Lastly, please go and find a teammate if you can. It is very common to start a Kaggle competition, but not so easy to finish them. I have stopped for a month during the competition due to my job. It is really hard to get back to the competition after you stopped for so long. Getting a teammate helps to motivate you and in the end, it is a great learning experience for both of us.</p>
</section>
<section id="pretrain-model" class="level1">
<h1>Pretrain Model</h1>
<p>We also tried to use a pretrained model, as it allows shorter training and gives better performance by transfer learning (Using weights learn from a large dataset to as initial weight). It also gives our model a bit of improvement.</p>
<ul>
<li>Finetune the model head, while keeping other layers freeze (except BatchNorm layer).</li>
<li>Unfreeze the model, train all the layers together.</li>
</ul>
<p>I also tried training the model directly with discriminating learning rate while not freezing any layer at all. It performs similarly to freezing fine-tuning , so I end up just start training the entire model from the beginning.</p>
</section>
<section id="if-the-code-works-dont-touch-it" class="level1">
<h1>If the code works, don’t touch it</h1>
<p>This is probably not a good habit usually, but I suggest not to do it for a competition. We spent lots of time for debugging our code after code refactoring and end up just rolling back to an older commit and cherry-picks new features. In a competition, you don’t have enough time to test everything. You do not need a nice abstract class for all your features, some refactoring to keep your function/class clean is probably needed, but do not overspend your time on it. It is even common to jump between frameworks (you may find other’s Kernel useful), so it is not possible to structure your code perfectly.</p>
<ul>
<li>If someone has create a working submission script, use it!</li>
<li>If someone has create a working pre-processing function, use it!</li>
</ul>
<p>Don’t spend time on trying to optimize these code unless it is necessary, it is often not worth it in a competition context. You should focus on adding new features, trying out new model, testing with new augmentation technique instead.</p>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>This is a great learning experience and refreshes some of my outdated computer vision model knowledge. If you have never joined a competition, find a friend and get started. If you have just finished one, try writing it out and share your experience. 😉</p>


</section>

 ]]></description>
  <category>python</category>
  <category>kaggle</category>
  <guid>https://noklam.github.io/archive/posts/2020-03-21-10-lessons-learnt-from-kaggle-competition.html</guid>
  <pubDate>Sat, 21 Mar 2020 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/archive/posts/images/bengali_00_header.png" medium="image" type="image/png"/>
</item>
<item>
  <title>The missing piece in Python tutorial - What is dispatch why you should care</title>
  <link>https://noklam.github.io/archive/posts/2020-02-22-python-dynamic-dispatch.html</link>
  <description><![CDATA[ 



<p>In python, we often think of it as a dynamic language, and <strong>type</strong> is barely noticed in Python as you can change the type of a variable whenever you want.</p>
<p>Since Python 3.4(PEP443)[https://www.python.org/dev/peps/pep-0443/], <strong>generic function</strong> is added to Python. This add a new feature that I found much of the exsiting tutorial does not cover it. Such feature is common in other language and is very useful to keep your code concise and clean.</p>
<p>In python, you cannot overload a normal function twice for different behavior base on the arguments. For example:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> foo(number:<span class="bu" style="color: null;">int</span> ):</span>
<span id="cb1-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'it is a integer'</span>)</span>
<span id="cb1-3">    </span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">def</span> foo(number: <span class="bu" style="color: null;">float</span>):</span>
<span id="cb1-5">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'it is a float'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">foo(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>it is a float</code></pre>
</div>
</div>
<p>The definition simply get replaced by the second definition. However, with <code>singledispatch</code>, you can define the function behavior base on the type of the argument.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> functools <span class="im" style="color: #00769E;">import</span> singledispatch</span>
<span id="cb4-2"><span class="at" style="color: #657422;">@singledispatch</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">def</span> foo(number ):</span>
<span id="cb4-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(number)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, </span><span class="sc" style="color: #5E5E5E;">{</span>number<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">foo(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'int'&gt;, 1</code></pre>
</div>
</div>
<p>We can now register the function for different argument type.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="at" style="color: #657422;">@foo.register</span>(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;">def</span> _(data):</span>
<span id="cb7-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'It is a integer!'</span>)</span>
<span id="cb7-4">    </span>
<span id="cb7-5"><span class="at" style="color: #657422;">@foo.register</span>(<span class="bu" style="color: null;">float</span>)</span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;">def</span> _(data):</span>
<span id="cb7-7">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'It is a float!'</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="at" style="color: #657422;">@foo.register</span>(<span class="bu" style="color: null;">dict</span>)</span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;">def</span> _(data):</span>
<span id="cb7-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'It is a dict!'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">foo(<span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb8-2">foo(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-3">foo({<span class="st" style="color: #20794D;">'1'</span>:<span class="dv" style="color: #AD0000;">1</span>})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It is a float!
It is a integer!
It is a dict!</code></pre>
</div>
</div>
<p>How is this possible? Basically there are multiple version of a generic function, <code>singlepatch</code> will pick the correct one base on the type of the <strong>first</strong> argument.</p>
<p>It will fallback to the most generic function if the type of argument is not registered.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">foo([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'list'&gt;, [1, 2, 3]</code></pre>
</div>
</div>
<p>I hope you can see how this is going to be useful. <code>singledispatch</code> limited the usage to the first argument of a function. But we can actually do more than that.</p>
<p>In next post I will cover the <code>patch</code> method from fastai will leverage <code>singledispatch</code> more to do multi-dispatch. In python, everything is just an object, even a function itself. So there is no reason why you can only dispatch to a function object. In fact, you could dispatch method to a class too.</p>
<section id="fastai-typedispatch" class="level1">
<h1>Fastai <span class="citation" data-cites="typedispatch">@typedispatch</span></h1>
<p>Single Dispatch is great, but what if we can do multi dispatch for more than 1 argument?</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;">from</span> fastcore.dispatch <span class="im" style="color: #00769E;">import</span>  typedispatch, TypeDispatch</span></code></pre></div>
</div>
<p>Let us first try if this work as expected</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="at" style="color: #657422;">@typedispatch</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;">def</span> add(x:<span class="bu" style="color: null;">int</span>, y:<span class="bu" style="color: null;">int</span>):</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">+</span>y</span>
<span id="cb13-4"><span class="at" style="color: #657422;">@typedispatch</span></span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;">def</span> add(x:<span class="bu" style="color: null;">int</span>, y:<span class="bu" style="color: null;">str</span>):</span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;">return</span> x <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">int</span>(y)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;">print</span>(add(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb14-2"><span class="bu" style="color: null;">print</span>(add(<span class="dv" style="color: #AD0000;">1</span>,<span class="st" style="color: #20794D;">'2'</span>))</span>
<span id="cb14-3"><span class="bu" style="color: null;">print</span>(add(<span class="st" style="color: #20794D;">'a'</span>,<span class="st" style="color: #20794D;">'a'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3
3
a</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">add(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>3</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">add(<span class="dv" style="color: #AD0000;">1</span>,<span class="st" style="color: #20794D;">'2'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>3</code></pre>
</div>
</div>
<p>But what if we added something does not define?</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">add(<span class="st" style="color: #20794D;">'2'</span>,<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>'2'</code></pre>
</div>
</div>
<p>‘2’? where does it come from? Let’s have a look at the definition of typedispatch and understand how it works.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">??typedispatch</span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;">class</span> DispatchReg:</span>
<span id="cb22-3">    <span class="co" style="color: #5E5E5E;">"A global registry for `TypeDispatch` objects keyed by function name"</span></span>
<span id="cb22-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>): <span class="va" style="color: #111111;">self</span>.d <span class="op" style="color: #5E5E5E;">=</span> defaultdict(TypeDispatch)</span>
<span id="cb22-5">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__call__</span>(<span class="va" style="color: #111111;">self</span>, f):</span>
<span id="cb22-6">        nm <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>f<span class="sc" style="color: #5E5E5E;">.</span>__qualname__<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb22-7">        <span class="va" style="color: #111111;">self</span>.d[nm].add(f)</span>
<span id="cb22-8">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.d[nm]</span></code></pre></div>
</div>
<p>In fact, <code>typedispatch</code> is not even a function, it’s an instance! In python, everything is an object. With the <strong>__call__</strong> method, we can use an instance just liek a function. And the typedispatch is just an instance of <code>DispatchReg</code></p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;">type</span>(typedispatch)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>fastcore.dispatch.DispatchReg</code></pre>
</div>
</div>
<p>typedispatch store a dictionary inside, when you first register your function, it actually store inside a dict. As shown previously, you cannot define the same function twice. But you actually can, because function is nothing but just an object! Let me show you.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;">def</span> foo(): <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'foo'</span></span>
<span id="cb25-2">a <span class="op" style="color: #5E5E5E;">=</span> foo</span>
<span id="cb25-3"><span class="kw" style="color: #003B4F;">def</span> foo(): <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'not foo'</span></span>
<span id="cb25-4">b <span class="op" style="color: #5E5E5E;">=</span> foo</span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">foo()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>'not foo'</code></pre>
</div>
</div>
<p>foo() is replaced by the latest definition indeed, but we store a copy of the original function as a variable.</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">a()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>'foo'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">b()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>'not foo'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="bu" style="color: null;">hex</span>(<span class="bu" style="color: null;">id</span>(a)), <span class="bu" style="color: null;">hex</span>(<span class="bu" style="color: null;">id</span>(b))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>('0x2b9d28bb5e8', '0x2b9d2ebe048')</code></pre>
</div>
</div>
<p>The two function is nothing other than two Python object. <code>typedispatch</code> make use of these, when you register a new function, you create an new object and stored inside typedispatch dictionary. It then checks your type annotation and find the corresponding type until it match the <code>issubclass</code> condition.</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">typedispatch.d</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>defaultdict(fastcore.dispatch.TypeDispatch,
            {'cast': (object,object) -&gt; cast, 'add': (int,str) -&gt; add
             (int,int) -&gt; add})</code></pre>
</div>
</div>
<p>So back to our question, why does add(‘a’,1) return ‘a’? The following explain the reasons. When you call your method, you are really calling the <strong>__call__</strong> method inside <code>TypeDispatch</code>, and when the signature is not find, it will simply return the first argument.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__call__</span>(<span class="va" style="color: #111111;">self</span>, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb36-2">       ts <span class="op" style="color: #5E5E5E;">=</span> L(args).<span class="bu" style="color: null;">map</span>(<span class="bu" style="color: null;">type</span>)[:<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb36-3">       f <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>[<span class="bu" style="color: null;">tuple</span>(ts)]</span>
<span id="cb36-4">       <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> f: <span class="cf" style="color: #003B4F;">return</span> args[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb36-5">       <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.inst <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>: f <span class="op" style="color: #5E5E5E;">=</span> MethodType(f, <span class="va" style="color: #111111;">self</span>.inst)</span>
<span id="cb36-6">       <span class="cf" style="color: #003B4F;">return</span> f(<span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span></code></pre></div>


</section>

 ]]></description>
  <category>python</category>
  <category>fastai</category>
  <guid>https://noklam.github.io/archive/posts/2020-02-22-python-dynamic-dispatch.html</guid>
  <pubDate>Sat, 22 Feb 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>plyer - Desktop Notification with Python</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/archive/posts/2019-10-19-Deskto-Notification.html</link>
  <description><![CDATA[ 



<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> plyer <span class="im" style="color: #00769E;">import</span> notification</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">class</span> DesktopNotification:</span>
<span id="cb1-5">    <span class="at" style="color: #657422;">@staticmethod</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;">def</span> notify(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Hey~'</span>, message<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Done!'</span>, timeout<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb1-7">        ls <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'👍'</span>,<span class="st" style="color: #20794D;">'✔'</span>,<span class="st" style="color: #20794D;">'✌'</span>,<span class="st" style="color: #20794D;">'👌'</span>,<span class="st" style="color: #20794D;">'👍'</span>,<span class="st" style="color: #20794D;">'😎'</span>]</span>
<span id="cb1-8">        notification.notify(</span>
<span id="cb1-9">            title <span class="op" style="color: #5E5E5E;">=</span> title ,</span>
<span id="cb1-10">            message <span class="op" style="color: #5E5E5E;">=</span> random.choice(ls) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">' '</span> <span class="op" style="color: #5E5E5E;">+</span> message,</span>
<span id="cb1-11">            timeout <span class="op" style="color: #5E5E5E;">=</span> timeout <span class="co" style="color: #5E5E5E;"># seconds</span></span>
<span id="cb1-12">        )</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'__main__'</span>:</span>
<span id="cb1-16">    DesktopNotification.notify()</span></code></pre></div>
<p>You could add this simple code block to notify you when the program is done! A desktop notification will be prompt on the bottom right corner in Window.</p>
<!--truncate-->



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/archive/posts/2019-10-19-Deskto-Notification.html</guid>
  <pubDate>Fri, 18 Oct 2019 23:00:00 GMT</pubDate>
</item>
<item>
  <title>nbdev + GitHub Codespaces: A New Literate Programming Environment</title>
  <dc:creator>&lt;a href=&#39;https://twitter.com/HamelHusain&#39;&gt;Hamel Husain&lt;/a&gt; &amp; &lt;a href=&#39;https://twitter.com/jeremyphoward&#39;&gt;Jeremy Howard&lt;/a&gt;</dc:creator>
  <link>https://noklam.github.io/archive/posts/2019-01-01-codespace-template.html</link>
  <description><![CDATA[ 



<p><strong>Today, we are going to show you how to set up a literate programming environment, allowing you to use an IDE (VS Code) and an interactive computing environment (Jupyter), without leaving your browser, for free, in under 5 minutes. You’ll even see how VSCode and Jupyter work together automatically!</strong> But first, what is literate programming? And how did I go from skeptic to a zealot of literate programming?</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<blockquote class="blockquote">
<p>Literate programming is a programming paradigm introduced by <a href="https://en.wikipedia.org/wiki/Donald_Knuth">Donald Knuth</a> in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated. According to Knuth, literate programming provides higher-quality programs by forcing programmers to explicitly state the thoughts behind the program. This process makes poorly thought-out design decisions more obvious. Knuth also claims that literate programming provides a first-rate documentation system, which is not an add-on, but is grown naturally in the process of exposition of one’s thoughts during a program’s creation. <sup>1</sup></p>
</blockquote>
<p>When I first learned about literate programming, I was quite skeptical. For the longest time, I had wrongly equated <a href="https://jupyter.org/">Jupyter notebooks</a> with literate programming. Indeed, Jupyter is a brilliant interactive computing system, which was awarded the Association of Computing Machinery (ACM) <a href="https://blog.jupyter.org/jupyter-receives-the-acm-software-system-award-d433b0dfe3a2">Software System Award</a>, and is loved by many developers. However, Jupyter falls short of the literate programming paradigm for the following reasons:<sup>2</sup></p>
<ul>
<li>It can be difficult to compile source code from notebooks.</li>
<li>It can be difficult to diff and use version control with notebooks because they are not stored in plain text.</li>
<li>It is not clear how to automatically generate documentation from notebooks.</li>
<li>It is not clear how to properly run tests suites when writing code in notebooks.</li>
</ul>
<p>My skepticism quickly evaporated when I began using <a href="https://nbdev.fast.ai/">nbdev</a>, a project that extends notebooks to complete the literate programming ideal. I spent a month, full time, using nbdev while contributing to the python library <a href="https://github.com/fastai/fastcore">fastcore</a>, and can report that Donald Knuth was definitely onto something. The process of writing prose and tests alongside code forced me to deeply understand why the code does what it does, and to think deeply about its design. Furthermore, the reduced cognitive load and speed of iteration of having documentation, code, and tests in one location boosted my productivity to levels I have never before experienced as a software developer. Furthermore, I found that developing this way bolstered collaboration such that code reviews not only happened faster but were more meaningful. In short, nbdev may be the most profound productivity tool I have ever used.</p>
<p>As a teaser, look how easy it is to instantiate this literate programming environment, which includes a notebook, a docs site and an IDE with all dependencies pre-installed! :point_down:</p>
<p>{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/e2e_small.mp4” %}</p>
<p>
<br>
</p>
</section>
<section id="features-of-nbdev" class="level2">
<h2 class="anchored" data-anchor-id="features-of-nbdev">Features of nbdev</h2>
<p>As discussed in the <a href="https://nbdev.fast.ai/">docs</a>, nbdev provides the following features:</p>
<ul>
<li>Searchable, hyperlinked documentation, which can be automatically hosted on <a href="https://docs.github.com/en/github/working-with-github-pages">GitHub Pages</a> for free.</li>
<li>Python modules, following best practices such as <a href="http://xion.io/post/code/python-all-wild-imports.html">automatically defining <code>__all__</code></a> with your exported functions, classes, and variables.</li>
<li>Pip and Conda installers.</li>
<li>Tests defined directly in notebooks which run in parallel. This testing system has been thoroughly tested with <a href="https://github.com/features/actions">GitHub Actions</a>.</li>
<li>Navigate and edit your code in a standard text editor or IDE, and export any changes automatically back into your notebooks.</li>
</ul>
<p>Since you are in a notebook, you can also add charts, text, links, images, videos, etc, that are included automatically in the documentation of your library, along with standardized documentation generated automatically from your code. <a href="https://docs.fast.ai/">This site</a> is an example of docs generated automatically by nbdev.</p>
</section>
<section id="github-codespaces" class="level2">
<h2 class="anchored" data-anchor-id="github-codespaces">GitHub Codespaces</h2>
<p>Thanks to <a href="https://docs.conda.io/en/latest/">Conda</a> and <a href="https://github.com/fastai/nbdev_template">nbdev_template</a>, setting up a development environment with nbdev is far easier than it used to be. However, we realized it could be even easier, thanks to a new GitHub product called <a href="https://github.com/features/codespaces">Codespaces</a>. Codespaces is a fully functional development environment in your browser, accessible directly from GitHub, that provides the following features:</p>
<ol type="1">
<li>A full VS Code IDE.</li>
<li>An environment that has files from the repository mounted into the environment, along with your GitHub credentials.</li>
<li>A development environment with dependencies pre-installed, backed by <a href="https://www.docker.com/">Docker</a>.</li>
<li>The ability to serve additional applications on arbitrary ports. For nbdev, we serve a Jupyter notebook server as well as a <a href="https://jekyllrb.com/">Jekyll</a> based documentation site.</li>
<li>A shared file system, which facilitates editing code in one browser tab and rendering the results in another.</li>
<li>… <a href="https://docs.github.com/en/github/developing-online-with-codespaces">and more</a>.</li>
</ol>
<p>Codespaces enables developers to immediately participate in a project without wasting time on DevOps or complicated setup steps. Most importantly, CodeSpaces with nbdev allows developers to quickly get started with creating their own software with literate programming.</p>
</section>
<section id="a-demo-of-nbdev-codespaces" class="level2">
<h2 class="anchored" data-anchor-id="a-demo-of-nbdev-codespaces">A demo of nbdev + Codespaces</h2>
<p>This demo uses the project <a href="https://github.com/fastai/fastcore">fastai/fastcore</a>, which was built with nbdev, as an example. First, we can navigate to this repo and launch a Codespace:</p>
<p>{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/1_open.mp4” %}</p>
<p>
<br>
</p>
<p>If you are launching a fresh Codespace, it may take several minutes to set up. Once the environment is ready, we can verify that all dependencies we want are installed (in this case <code>fastcore</code> and <code>nbdev</code>):</p>
<p>{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/2_verify.mp4” %}</p>
<p>
<br>
</p>
<p>Additionally, we can serve an arbitrary number of applications on user-specified ports, which we can open through VSCode as shown below:</p>
<p>{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/3_nb_small.mp4” %}</p>
<p>
<br>
</p>
<p>In this case, these applications are a notebook and docs site. Changes to a notebook are reflected immediately in the data docs. Furthermore, we can use the cli command <code>nbdev_build_lib</code> to sync our notebooks with python modules. This functionality is shown below:</p>
<p>{% include video.html url=“https://github.com/machine-learning-apps/demo-videos/raw/master/codespaces-nbdev/4_reload_small.mp4” %}</p>
<p>
<br>
</p>
<p>This is amazing! With a click of a button, I was able to:</p>
<ol type="1">
<li>Launch an IDE with all dependencies pre-installed.</li>
<li>Launch two additional applications: a Jupyter Notebook server on port 8080 and a docs site on port 4000.</li>
<li>Automatically update the docs and modules every time I make a change to a Jupyter notebook.</li>
</ol>
<p>This is just the tip of the iceberg. There are additional utilities for <a href="https://nbdev.fast.ai/test.html">writing and executing tests</a>, <a href="https://nbdev.fast.ai/sync.html#Diff-notebook---library">diffing notebooks</a>, <a href="https://nbdev.fast.ai/magic_flags.html#How-do-comment-flags-correspond-to-magic-flags?">special flags</a> for hiding, showing, and collapsing cells in the generated docs, as well as <a href="https://nbdev.fast.ai/cli.html#nbdev_install_git_hooks">git hooks</a> for automation. This and more functionality is covered in <a href="https://nbdev.fast.ai/">the nbdev docs</a>.</p>
</section>
<section id="give-it-a-try-for-yourself" class="level2">
<h2 class="anchored" data-anchor-id="give-it-a-try-for-yourself">Give It A Try For Yourself</h2>
<p>To try out nbdev yourself, <a href="https://nbdev.fast.ai/tutorial.html">take this tutorial</a>, which will walk you through everything you need to know. The tutorial also shows you how to use a repository template with the configuration files necessary to enable Codespaces with nbdev.</p>
</section>
<section id="you-can-write-blogs-with-notebooks-too" class="level2">
<h2 class="anchored" data-anchor-id="you-can-write-blogs-with-notebooks-too">You Can Write Blogs With Notebooks, Too!</h2>
<p>This blog post was written in <a href="https://github.com/fastai/fastpages">fastpages</a> which is also built on nbdev! We recommend <a href="https://github.com/fastai/fastpages">fastpages</a> if you want an easy way to blog with Jupyter notebooks.</p>
</section>
<section id="additional-resources" class="level2">
<h2 class="anchored" data-anchor-id="additional-resources">Additional Resources</h2>
<ol type="1">
<li>The <a href="https://github.com/features/codespaces">GitHub Codepaces site</a>.</li>
<li>The official <a href="https://docs.github.com/en/github/developing-online-with-codespaces">docs for Codespaces</a>.</li>
<li>The nbdev <a href="https://nbdev.fast.ai/">docs</a>.</li>
<li>The nbdev <a href="https://github.com/fastai/nbdev">GitHub repo</a>.</li>
<li><a href="https://github.com/fastai/fastpages">fastpages</a>: The project used to write this blog.</li>
<li>The GitHub repo <a href="https://github.com/fastai/fastcore">fastai/fastcore</a>, which is what we used in this blog post as an example.</li>
</ol>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Wikipedia article: <a href="https://en.wikipedia.org/wiki/Literate_programming">Literate Programming</a>↩︎</p></li>
<li id="fn2"><p>This is not a criticism of Jupyter. Jupyter doesn’t claim to be a full literate programming system. However, people can sometimes (unfairly) judge Jupyter according to this criteria.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>codespaces</category>
  <category>nbdev</category>
  <guid>https://noklam.github.io/archive/posts/2019-01-01-codespace-template.html</guid>
  <pubDate>Tue, 01 Jan 2019 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/archive/posts/images/fastpages_posts/codespaces/codespaces.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
